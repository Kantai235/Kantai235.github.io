<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我不會寫程式</title>
  
  <subtitle>我覺得我原本如果不是大師級的開發者，我至少也是一位大神級的開發者，直到我端火鍋摔倒撞到頭以後，我就變成了一個只會 Hello World 的菜鳥。</subtitle>
  <link href="https://blog.init.engineer/atom.xml" rel="self"/>
  
  <link href="https://blog.init.engineer/"/>
  <updated>2023-11-29T16:00:00.000Z</updated>
  <id>https://blog.init.engineer/</id>
  
  <author>
    <name>乾太 ₍₍ ◝(･◡･)◟ ⁾⁾</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>透過 ChatGPT 應用於商業信件心得</title>
    <link href="https://blog.init.engineer/posts/WriteALetterUsingGPT/"/>
    <id>https://blog.init.engineer/posts/WriteALetterUsingGPT/</id>
    <published>2023-11-29T16:00:00.000Z</published>
    <updated>2023-11-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>其實乾太不太會撰寫信件、文章甚至講話，但透過 GPT 可以將這個缺點彌補到堪用，而最近有大量商業信件往來的需求，因此在工具的輔助下，有了一些心得可以分享。</p><p>舉個最近的例子，我最近需要替組織尋求贊助、合作機會，這時候如果直接去請 GPT 生出一個信件草稿給你參考，那麼它所產生的內容不只多半無法使用，內容還缺乏可參考性。為了避免這樣的問題產生，我會先整理背景資訊，簡單整理成幾個重要資訊：</p><ul><li>自己是誰？<ul><li>你所代表的組織、公司或你個人，你需要介紹你所代表的是什麼、在做什麼的、有什麼豐功偉業。</li></ul></li><li>對方是誰？<ul><li>你的目標是誰，可以很明確的指定，也可以提供一個抽象的概念，它可能是科技業、傳統產業、基金會或政府部門。</li></ul></li><li>自己要什麼？<ul><li>你這封信的目標是什麼，想要從對方身上獲得什麼。</li></ul></li><li>對方要什麼？<ul><li>你能夠提供對方什麼，你有多少可以談的空間。</li></ul></li></ul><p>如果我們有詳細的向 GPT 介紹這幾項重點的話，基本上它都有辦法給你一份能夠參考的草稿，但這份草稿基本上會因為你前面提供的內容多寡，而決定了它產給你的範本有多長。這不是壞事，只是我們需要稍微修飾一下。</p><p>首先我會自己思考一個信件的結構，每個段落的重點是什麼，舉例來說，最近在寫的合作邀請信件，我會要求 GPT 將段落修改成「介紹組織、現在情況、合作邀請」三個段落。到這邊基本上已經完成了信件的最初草稿了，但味道仍舊不太對，很容易就會被發現是透過工具來產生出來的信件內容，原因是：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我們寫信件的時候，需要注重禮貌，而 GPT 會把禮貌過於注重。</span><br></pre></td></tr></table></figure><p>舉例來說，GPT 幫我撰寫了信件結尾的部分，有兩個範本給各位參考，可以猜猜看哪個選項是工具所產生的，而哪個選項又是潤飾過的。</p><p>🅰️ 詳情請見贊助徵求書，我們期待您的回音，共同開創合作新篇章。<br>🅱️ 請參閱附上的贊助徵求書，以了解如何成為我們的支持者和合作夥伴。我們期待您的積極回應，共同為台灣的資訊教育及科技創新貢獻一份力量。</p><p>前者是經過潤飾的，而後者是工具產生出來的，你會發現工具產生出來的會有一種過頭了的感覺，具體來說就是把內容簡化、多餘的刪掉。最後我們會獲得一份接近人工打造的信件草稿，只需要再稍微修改部分用詞就好。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPT 懂得如何產生內容，但 GPT 並不懂得如何創造內容。</span><br></pre></td></tr></table></figure><p>🅰️ 通過品牌曝光和互動，與這群未來的科技人才建立聯繫。<br>🅱️ 通過品牌曝光和互動，與這群未來的科技新星建立聯繫。</p><p>前後者的差別僅有最後的「科技人才」改為「科技新星」，透過創造一些字詞、用語，來讓信件內容看起來更有趣些，也更有一點手工的味道。目前的 GPT 食用心得大致上是這樣，可以分成幾個階段，建立背景、定義需求、細部修正，整個工具現階段對我來說是這樣：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用 GPT 幫我寫信件，我一篇都沒辦法用；</span><br><span class="line">沒有 GPT 幫我寫信件，我一篇都寫不出來。</span><br></pre></td></tr></table></figure><p>最後，以上內容皆為乾太純手工打造，充滿乾太的溫度，請安心使用 🦊❤️</p>]]></content>
    
    
    <summary type="html">其實乾太不太會撰寫信件、文章甚至講話，但透過 GPT 可以將這個缺點彌補到堪用，而最近有大量商業信件往來的需求，因此在工具的輔助下，有了一些心得可以分享。</summary>
    
    
    
    <category term="經驗分享" scheme="https://blog.init.engineer/categories/%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="ChatGPT" scheme="https://blog.init.engineer/tags/ChatGPT/"/>
    
  </entry>
  
  <entry>
    <title>廣告留言困擾的解決方案，關鍵字封鎖與群眾誤刪問題探討</title>
    <link href="https://blog.init.engineer/posts/AdMessageBlocking/"/>
    <id>https://blog.init.engineer/posts/AdMessageBlocking/</id>
    <published>2023-06-13T16:00:00.000Z</published>
    <updated>2023-06-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解決廣告留言困擾的關鍵字封鎖挑戰"><a href="#解決廣告留言困擾的關鍵字封鎖挑戰" class="headerlink" title="解決廣告留言困擾的關鍵字封鎖挑戰"></a>解決廣告留言困擾的關鍵字封鎖挑戰</h1><p>當你經營一個社群平台時，廣告留言可能是你最常面對的困擾之一。這些留言不僅干擾了你的社群環境，也對使用者的體驗產生了負面影響。作為經營者，你開始意識到制定一些封鎖留言的關鍵字列表是解決這個問題的重要一環。然而，這並不是一件簡單的事情。當你開始封鎖某些關鍵字時，你可能會面臨到一個問題，那就是可能過度封鎖，而意外刪除了一些無辜的留言，甚至在社群中引起了一些不滿和抱怨。</p><p>在我自己經營社群平台的經驗中，我也曾遇到類似的問題。當我嘗試解決廣告留言問題時，我意識到需要一個細緻且精確的關鍵字列表，以達到封鎖干擾留言的目的，同時又不誤刪重要的群眾留言。這需要投入大量的時間和努力，仔細觀察和研究留言內容，以確定哪些關鍵字與廣告留言最相關。</p><p>然而，即使你已經投入了努力來建立關鍵字列表，問題還是可能發生。在某些情況下，你可能意外封鎖了一些真實使用者的留言，這可能導致使用者的流失和不滿情緒的增加。因此，除了關鍵字的封鎖，手動檢查留言也變得至關重要，以確保沒有遭到誤刪的群眾留言。</p><p>在接下來的文章中，我將分享我所觀察到的關鍵字問題以及面臨的挑戰。我將討論如何制定關鍵字列表、避免誤刪留言的方法，以及如何有效管理廣告留言困擾。無論你是一位社群平台經營者還是對這個議題感興趣的讀者，這些實用的建議和策略都將幫助你解決留言困擾所帶來的挑戰。</p><h1 id="分享觀察到的關鍵字"><a href="#分享觀察到的關鍵字" class="headerlink" title="分享觀察到的關鍵字"></a>分享觀察到的關鍵字</h1><p>首先，我們一起來看一個關鍵字封鎖的實例，這段實例是我在過去數年中積累的關鍵字封鎖的成果。每當我遇到廣告留言時，我會篩選出相關的關鍵字並將其新增至封鎖列表中。這樣的努力積累下來，我已經累計了多達300項關鍵字，然而，這些關鍵字的整理卻變得相當混亂。許多關鍵字的來源已經難以考究，我甚至發現了一些重複的內容片段。這些問題都需要被改善和解決。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每個月增加,全自動行銷軟體,逛逛,新平台,試賣,購買過程,推廣產,安全性及品,購買產品,使用產品,旅館約正妹l i n e,微信wechat id,主頁看本人照,台灣出差,旅館外約,純本土兼職,高挑氣質空姐,凱渥小模,火辣夜店辣妹,舞姬女郎,各行業兼職正妹,等你來哦,外約,叫小姐,全套,睡美人,茶莊,+賴,妹資,阿彌,創世破曉,王國紀元,紀元,破曉,每天接單無上限,找打字人員,雙人韓國來回機票,雙人韓國,來回機票,按讚粉絲專頁,崩潰男友,留言越多機會越高,抽獎送,參加方式,徵打字員,想賺錢的把握機會,現在入職還送手機喔,想買的東西買不了？,找我諮詢詳情吧,肯定要你一星期內就買得到,在家用手機就可以做,还有专人教你打字秘诀,有興趣了解加,雙人日本來回機票,雙人日本,眾多片分享,line.me,老司機群組,ivendor,網賺操作員,日賺1-3000元,親自教你怎麼賺錢,想了解趕快加我,非本人回覆請慎防詐騙,拍拖,paktor,運彩分析,臉書只有你和,臉書只有您和,在臉書我,在 fb 我,在fb我,股往金來,臉書只有,fb只有,fb 只有,值得信任,我最佩服,臉書我只看您,我只看你和,我只看您,看臉書這麽久,看fb這麽久,最讓人敬佩,只有您和,只有你和,讓人敬佩,在facebook,盤倉日記,最敬佩,大漲鴻圖,看facebook,我佩服,我信任,只有您,宏觀理念,利財隨筆,謝駿揚,錢線勘查,在fb只,倉盤日記,看臉書這,只有版主,追蹤版主,宏觀論市,受益頗多,感謝版主,分析透徹,講股論壇,臉書遇到,fb遇到,facebook遇到,透徹到位,觀點分析,關注老師,分析明了,fb現在,facebook現在,臉書現在,現在最值得,值得看版主,讓人信任,视频被删除,視頻被刪除,视频删除,視頻刪除,is.gd,在推薦,意外在,奪冠密碼,這位版主,平時簡單,獲益匪淺,平時善意,yep.pt,bit.ly,借錢免煩惱,飞机,100-500,海外抖音,海外斗音,批量广告,上千个号,趨勢觀察,不敗教主,陳重銘,值得佩服,只有板主,感謝板主,值得看板主,趨勢縱橫,推广引流,手动操作,日进粉,自动日,适用于,亚马逊,国际物流,护肤品,酒店用品,海外引流,一键群发,百万私信,国家地区,精准粉,加v,加w,稳定开单,专注推广,博主账号,个人工作,详询+,七天打造,任意行业,外部链接,当天即出效果,导流上号,精准上粉,一人可操作,霸屏发帖,必备神器,海外客户,详情联系,霸屏系统,网页后台,引流神器,t.me,+86,私信软件,海外钭音,日私信,精准采集,涨粉快,群发私信,顶尖软件,全网顶尖,操作便捷,变现快,纯网页端,跨境流量,流量黑马,wa.me,gift cards,出海神器,引流推广,推广工具,斜议引流,斜议私信,私信营销,无需注册,无需关注,强制私信,引到粉丝,粉丝添加,电子烟,电子产品,远程测试,上门考察,一键截取,国家粉丝,私域流量池,私信广告,直接私信,批量跨过,跨过关注,输送广告,一键批量,批量输送,获客,外贸行业,超级福音,超级私信,私信模式,精准定位,定位采集,每天稳定,客户主动,主动询盘,售后有保障,用心服务,跨境电商,独立站,独家技术,商品买卖,真实商品,链接自由,自由搭配,日爬取,爬取精准,精准粉丝,日强制,私信发送,发送不受限,大額小額,小額借款,支票借款,分享的觀點,臉書發現,fb發現,觀點確實,一位達人,投資筆記,股海浪子,值得追蹤,以股作樂,一心存股,伯樂相股,.vn,.is,.me,.to,.gg,.app,.link,.ly,.su,土伯股評,股海明燈,股評,股海,.la,發現值得追蹤,霸道股評,股票達人,股市達人,大家可以看看,朋友給我推薦,他的觀點,股市達,老股董,逍遙股海,.ng,港股,李筆記,輕松收益,公開實盤,關注博主,強勢股,股市風清揚,蝕扭為盈</span><br></pre></td></tr></table></figure><h1 id="Facebook「隱藏的字詞、短語或表情符號」遊戲規則"><a href="#Facebook「隱藏的字詞、短語或表情符號」遊戲規則" class="headerlink" title="Facebook「隱藏的字詞、短語或表情符號」遊戲規則"></a>Facebook「隱藏的字詞、短語或表情符號」遊戲規則</h1><p>接下來我們需要先了解 Facebook「隱藏的字詞、短語或表情符號」的遊戲規則，只要包含關鍵字在其中的留言就會將其隱藏，並且詳細規則如下：</p><blockquote><p>使用數字、符號或不同拼法的關鍵字變化版本會自動被隱藏。例如：tree、TREE、tr33、treee、t.r.e.e、#tree。</p></blockquote><p>瞭解了遊戲規則以後，我們就可以把內容整理一下，先將單純只有英文的內容抽離出來，我們得出了以下內容，很明顯 <code>.me</code> 這個關鍵字與許多其他關鍵字重複了，例如 <code>line.me</code>、<code>t.me</code>、<code>wa.me</code>，並且其他網址類的都有重複的現象，我們將這些重複的項目移除，並且稍加整理尾端網域。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">line.me,</span><br><span class="line">ivendor,</span><br><span class="line">paktor,</span><br><span class="line">is.gd,</span><br><span class="line">yep.pt,</span><br><span class="line">bit.ly,</span><br><span class="line">t.me,</span><br><span class="line">+86,</span><br><span class="line">wa.me,</span><br><span class="line">gift cards,</span><br><span class="line">.vn,</span><br><span class="line">.is,</span><br><span class="line">.me,</span><br><span class="line">.to,</span><br><span class="line">.gg,</span><br><span class="line">.app,</span><br><span class="line">.link,</span><br><span class="line">.ly,</span><br><span class="line">.su,</span><br><span class="line">.la,</span><br><span class="line">.ng,</span><br></pre></td></tr></table></figure><p>我們最後會得到以下的關鍵字，從原本 21 項關鍵字減少到 17 項關鍵字，分別是高風險網域、廣告商名稱、電話國碼以及其它。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 高風險網域</span></span><br><span class="line">.gd,</span><br><span class="line">.pt,</span><br><span class="line">.vn,</span><br><span class="line">.is,</span><br><span class="line">.me,</span><br><span class="line">.to,</span><br><span class="line">.gg,</span><br><span class="line">.app,</span><br><span class="line">.link,</span><br><span class="line">.ly,</span><br><span class="line">.su,</span><br><span class="line">.la,</span><br><span class="line">.ng,</span><br><span class="line"></span><br><span class="line"><span class="section"># 廣告商名稱</span></span><br><span class="line">ivendor,</span><br><span class="line">paktor,</span><br><span class="line"></span><br><span class="line"><span class="section"># 電話國碼</span></span><br><span class="line">+86,</span><br><span class="line"></span><br><span class="line"><span class="section"># 其它</span></span><br><span class="line">gift cards,</span><br></pre></td></tr></table></figure><h1 id="遊戲規則對關鍵字封鎖的影響"><a href="#遊戲規則對關鍵字封鎖的影響" class="headerlink" title="遊戲規則對關鍵字封鎖的影響"></a>遊戲規則對關鍵字封鎖的影響</h1><p>但是整理到這邊，我們遇到了一個問題，就是如果使用者名稱或粉絲專頁屬於關鍵字封鎖的話，那麼這個封鎖效果是否仍舊有用呢？所以我們就建立了一個新的粉絲專頁，並且將「純靠北工程師」以及我的 Facebook 帳號本名加入到關鍵字封鎖當中，並且建立一個新的帳號到新的粉絲專頁當中留言。</p><p><img src="/img/posts/AdMessageBlocking/1.png" alt="1.png"></p><p>結論很出乎意料，如果這個帳號是以 Tag 的形式來留言，那麼關鍵字封鎖將不起任何作用，必須是純文字的方式，我們後續還有將網域、粉絲專頁 ID、帳號都加入關鍵字封鎖，都仍然不起作用，也就是說我們沒辦法用關鍵字封鎖來封鎖粉絲專頁，總而言之我們整理了以下規則：</p><ol><li>留言 Tag 的粉絲專頁名稱如果包含關鍵字，那麼關鍵字封鎖將不起作用。</li><li>留言 Tag 的粉絲專頁如果已遭粉絲專頁封鎖，使用者仍然可以留言，而粉絲專頁只是不會顯示超連結，關鍵字封鎖也仍舊不起作用。</li><li>留言的如果不是 Tag，而是文字的話，關鍵字封鎖將起作用。</li><li>留言的如果是網址，那麼關鍵字仍然會起作用。</li></ol><p><img src="/img/posts/AdMessageBlocking/2.png" alt="2.png"></p><p>所以如果我們遇到了「臉書我只看您和 @xxx」之類的留言，我們將「@xxx」加入關鍵字封鎖是徒勞無功的，因為根據以上規則，關鍵字封鎖將會睡覺，睡著的系統是永遠叫不醒的，但是如果我們將「我只看您」加入關鍵字封鎖，那這樣的留言將會被系統屏蔽。</p><p>這就產生了一個很大的問題，那便是我們如果要封鎖廣告留言的話，我們不能直接封鎖目標，我們需要封鎖除了它以外的內容，變成需要仰賴龐大的留言數量來搜尋特定關鍵字有多少人在使用，因此長時間以來，我一直在對自己粉絲專頁的留言做蒐集的動作，就是為了拿來做後續處理用的，舉例來說，我想封鎖「股市」這種一聽就覺得很不妙的關鍵字，在純靠北工程師當中提到股市，八九不離十應該是廣告對吧？</p><p><img src="/img/posts/AdMessageBlocking/3.png" alt="3.png"></p><p>但事實上從資料庫下去檢查後，會發現有不少真實留言卻會提到「股市」這個再常見不過的關鍵字了，反而廣告留言只有最後一條，因此換個思維下去思考，如果我改成封鎖「行情走勢」這個關鍵字呢？這次就正中目標了，這是個沒有人在用的詞彙，封鎖下去就對了。</p><p><img src="/img/posts/AdMessageBlocking/4.png" alt="4.png"></p><h1 id="整理不同類別的關鍵字"><a href="#整理不同類別的關鍵字" class="headerlink" title="整理不同類別的關鍵字"></a>整理不同類別的關鍵字</h1><p>接下來就可以根據留言資料庫，來好好的比對一下每項關鍵字真實留言、廣告的使用率，稍作整理以後，我們分了幾個類別，分別是 <code>性交易相關</code>、<code>股市相關</code>、<code>誘導用詞</code>、<code>投資相關</code>、<code>打字員</code>、<code>運彩分析</code>、<code>跨境廣告</code>、<code>高風險網域</code>、<code>廣告商名稱</code> 以及 <code>電話國碼</code>，我們將其稍作整理後，就有了以下初步的關鍵字名單：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 性交易相關</span></span><br><span class="line">找小姐,</span><br><span class="line">叫小姐,</span><br><span class="line">學生妹,</span><br><span class="line">清涼妹,</span><br><span class="line">外約,</span><br><span class="line">全套,</span><br><span class="line">半套,</span><br><span class="line">茶莊,</span><br><span class="line">+賴,</span><br><span class="line">加賴,</span><br><span class="line">賴客服,</span><br><span class="line">+LINE,</span><br><span class="line">加LINE,</span><br><span class="line">LINE客服,</span><br><span class="line"></span><br><span class="line"><span class="section"># 股市相關</span></span><br><span class="line">股評,</span><br><span class="line">股海,</span><br><span class="line">股董,</span><br><span class="line">強勢股,</span><br><span class="line">注意股,</span><br><span class="line">處置股,</span><br><span class="line"></span><br><span class="line"><span class="section"># 誘導用詞 - 提及使用者</span></span><br><span class="line">只有您和,</span><br><span class="line">只有你和,</span><br><span class="line">只看你和,</span><br><span class="line">只看您和,</span><br><span class="line"></span><br><span class="line"><span class="section"># 誘導用詞 - 提及板主、版主</span></span><br><span class="line">只有板主,</span><br><span class="line">只有版主,</span><br><span class="line">追蹤板主,</span><br><span class="line">追蹤版主,</span><br><span class="line">感謝板主,</span><br><span class="line">感謝版主,</span><br><span class="line">這位板主,</span><br><span class="line">這位版主,</span><br><span class="line">值得看板主,</span><br><span class="line">值得看版主,</span><br><span class="line"></span><br><span class="line"><span class="section"># 誘導用詞 - 提及 Facebook</span></span><br><span class="line">fb遇到,</span><br><span class="line">fb發現,</span><br><span class="line">fb只有,</span><br><span class="line">fb現在,</span><br><span class="line">facebook遇到,</span><br><span class="line">facebook發現,</span><br><span class="line">facebook只有,</span><br><span class="line">facebook現在,</span><br><span class="line"></span><br><span class="line">在fb只,</span><br><span class="line">在fb我,</span><br><span class="line">在fb這,</span><br><span class="line">看fb只,</span><br><span class="line">看fb我,</span><br><span class="line">看fb這,</span><br><span class="line">在facebook,</span><br><span class="line">看facebook,</span><br><span class="line"></span><br><span class="line">在臉書,</span><br><span class="line">看臉書,</span><br><span class="line">臉書只,</span><br><span class="line">臉書發,</span><br><span class="line">臉書我,</span><br><span class="line">臉書遇到,</span><br><span class="line">臉書現在,</span><br><span class="line"></span><br><span class="line"><span class="section"># 誘導用詞 - 四字箴言</span></span><br><span class="line">受益頗多,</span><br><span class="line">分析透徹,</span><br><span class="line">透徹到位,</span><br><span class="line">觀點分析,</span><br><span class="line">關注老師,</span><br><span class="line">分析明了,</span><br><span class="line">平時簡單,</span><br><span class="line">平時善意,</span><br><span class="line">獲益匪淺,</span><br><span class="line">值得佩服,</span><br><span class="line">他的觀點,</span><br><span class="line">輕松收益,</span><br><span class="line">公開實盤,</span><br><span class="line">關注博主,</span><br><span class="line">蝕扭為盈,</span><br><span class="line">觀點確實,</span><br><span class="line">一位達人,</span><br><span class="line">值得追蹤,</span><br><span class="line"></span><br><span class="line"><span class="section"># 誘導用詞 - 其它</span></span><br><span class="line">分享的觀點,</span><br><span class="line">我佩服,</span><br><span class="line">我信任,</span><br><span class="line">我最佩服,</span><br><span class="line">我最信任,</span><br><span class="line">我最敬佩,</span><br><span class="line">我敬佩,</span><br><span class="line">值得佩服,</span><br><span class="line">值得信任,</span><br><span class="line">值得敬佩,</span><br><span class="line">意外在,</span><br><span class="line">讓人佩服,</span><br><span class="line">讓人信任,</span><br><span class="line">讓人敬佩,</span><br><span class="line"></span><br><span class="line"><span class="section"># 投資相關粉絲專頁</span></span><br><span class="line">李筆記,</span><br><span class="line">陳重銘,</span><br><span class="line">謝駿揚,</span><br><span class="line">一心存股,</span><br><span class="line">土伯股評,</span><br><span class="line">大漲鴻圖,</span><br><span class="line">不敗教主,</span><br><span class="line">以股作樂,</span><br><span class="line">伯樂相股,</span><br><span class="line">利財隨筆,</span><br><span class="line">宏觀理念,</span><br><span class="line">宏觀論市,</span><br><span class="line">投資筆記,</span><br><span class="line">股往金來,</span><br><span class="line">倉盤日記,</span><br><span class="line">奪冠密碼,</span><br><span class="line">盤倉日記,</span><br><span class="line">錢線勘查,</span><br><span class="line">講股論壇,</span><br><span class="line">趨勢縱橫,</span><br><span class="line">趨勢觀察,</span><br><span class="line">股市風清揚,</span><br><span class="line"></span><br><span class="line"><span class="section"># 打字員</span></span><br><span class="line">日賺,</span><br><span class="line">打字人員,</span><br><span class="line">打字員,</span><br><span class="line">打字秘诀,</span><br><span class="line">本土兼職,</span><br><span class="line">在家用手,</span><br><span class="line">有興趣了解加,</span><br><span class="line">老司,</span><br><span class="line">每天接單,</span><br><span class="line">來回機票,</span><br><span class="line">抽獎送,</span><br><span class="line">留言越多,</span><br><span class="line">參加方式,</span><br><span class="line">崩潰男友,</span><br><span class="line">現在入職,</span><br><span class="line">眾多片分享,</span><br><span class="line">想了解,</span><br><span class="line">慎防詐騙,</span><br><span class="line">網賺操作員,</span><br><span class="line">趕快加我,</span><br><span class="line">機會越高,</span><br><span class="line">機群組,</span><br><span class="line">親自教你怎麼賺錢,</span><br><span class="line"></span><br><span class="line"><span class="section"># 運彩分析</span></span><br><span class="line">運彩,</span><br><span class="line">都會贏,</span><br><span class="line">不作假,</span><br><span class="line">免費分析,</span><br><span class="line"></span><br><span class="line"><span class="section"># 跨境廣告</span></span><br><span class="line">一人可操作,</span><br><span class="line">一键,</span><br><span class="line">七天打造,</span><br><span class="line">上千个号,</span><br><span class="line">上门考察,</span><br><span class="line">个人工作,</span><br><span class="line">大額小額,</span><br><span class="line">小額借款,</span><br><span class="line">广告,</span><br><span class="line">飞机,</span><br><span class="line">引流,</span><br><span class="line">手动操作,</span><br><span class="line">支票借款,</span><br><span class="line">斗音,</span><br><span class="line">无需,</span><br><span class="line">日私信,</span><br><span class="line">日爬取,</span><br><span class="line">日进粉,</span><br><span class="line">日强制,</span><br><span class="line">主动询盘,</span><br><span class="line">出海神器,</span><br><span class="line">加v,</span><br><span class="line">加w,</span><br><span class="line">发送不受限,</span><br><span class="line">外贸行业,</span><br><span class="line">外部链接,</span><br><span class="line">必备神器,</span><br><span class="line">用心服务,</span><br><span class="line">电子,</span><br><span class="line">亚马逊,</span><br><span class="line">任意行业,</span><br><span class="line">全网顶尖,</span><br><span class="line">导流上号,</span><br><span class="line">百万私信,</span><br><span class="line">网页后台,</span><br><span class="line">自由搭配,</span><br><span class="line">自动日,</span><br><span class="line">批量跨过,</span><br><span class="line">批量输送,</span><br><span class="line">抖音,</span><br><span class="line">护肤品,</span><br><span class="line">每天稳定,</span><br><span class="line">私信发送,</span><br><span class="line">私信软件,</span><br><span class="line">私信营销,</span><br><span class="line">私信模式,</span><br><span class="line">私域流量池,</span><br><span class="line">纯网页端,</span><br><span class="line">变现快,</span><br><span class="line">国际物流,</span><br><span class="line">国家地区,</span><br><span class="line">定位采集,</span><br><span class="line">爬取精准,</span><br><span class="line">直接私信,</span><br><span class="line">详询+,</span><br><span class="line">详情联系,</span><br><span class="line">远程测试,</span><br><span class="line">顶尖软件,</span><br><span class="line">客户主动,</span><br><span class="line">流量黑马,</span><br><span class="line">独立站,</span><br><span class="line">独家技术,</span><br><span class="line">海外客户,</span><br><span class="line">海外钭音,</span><br><span class="line">涨粉快,</span><br><span class="line">真实商品,</span><br><span class="line">粉丝,</span><br><span class="line">适用于,</span><br><span class="line">酒店用品,</span><br><span class="line">售后有保障,</span><br><span class="line">商品买卖,</span><br><span class="line">推广,</span><br><span class="line">斜议私信,</span><br><span class="line">获客,</span><br><span class="line">博主账号,</span><br><span class="line">强制私信,</span><br><span class="line">超级私信,</span><br><span class="line">超级福音,</span><br><span class="line">链接自由,</span><br><span class="line">群发私信,</span><br><span class="line">跨过关注,</span><br><span class="line">跨境电商,</span><br><span class="line">跨境流量,</span><br><span class="line">稳定开单,</span><br><span class="line">精准上粉,</span><br><span class="line">精准定位,</span><br><span class="line">精准采集,</span><br><span class="line">精准粉,</span><br><span class="line">操作便捷,</span><br><span class="line">霸屏发帖,</span><br><span class="line">霸屏系统,</span><br><span class="line"></span><br><span class="line"><span class="section"># 高風險網域</span></span><br><span class="line">.app,</span><br><span class="line">.cc,</span><br><span class="line">.gd,</span><br><span class="line">.gg,</span><br><span class="line">.is,</span><br><span class="line">.la,</span><br><span class="line">.link,</span><br><span class="line">.ly,</span><br><span class="line">.me,</span><br><span class="line">.ng,</span><br><span class="line">.pt,</span><br><span class="line">.su,</span><br><span class="line">.to,</span><br><span class="line">.vn,</span><br><span class="line"></span><br><span class="line"><span class="section"># 廣告商名稱</span></span><br><span class="line">ivendor,</span><br><span class="line">paktor,</span><br><span class="line"></span><br><span class="line"><span class="section"># 電話國碼</span></span><br><span class="line">+60,</span><br><span class="line">+63,</span><br><span class="line">+66,</span><br><span class="line">+84,</span><br><span class="line">+86,</span><br><span class="line">+886,</span><br></pre></td></tr></table></figure><h1 id="濃縮的關鍵字封鎖列表"><a href="#濃縮的關鍵字封鎖列表" class="headerlink" title="濃縮的關鍵字封鎖列表"></a>濃縮的關鍵字封鎖列表</h1><p>如果你想要直接複製貼上到自己粉絲專頁的關鍵字封鎖的話，以下我也幫你整理好了濃縮起來的版本：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">找小姐,叫小姐,學生妹,清涼妹,外約,全套,半套,茶莊,+賴,加賴,賴客服,+LINE,加LINE,LINE客服,股評,股海,股董,強勢股,注意股,處置股,只有您和,只有你和,只看你和,只看您和,只有板主,只有版主,追蹤板主,追蹤版主,感謝板主,感謝版主,這位板主,這位版主,值得看板主,值得看版主,fb遇到,fb發現,fb只有,fb現在,facebook遇到,facebook發現,facebook只有,facebook現在,在fb只,在fb我,在fb這,看fb只,看fb我,看fb這,在facebook,看facebook,在臉書,看臉書,臉書只,臉書發,臉書我,臉書遇到,臉書現在,受益頗多,分析透徹,透徹到位,觀點分析,關注老師,分析明了,平時簡單,平時善意,獲益匪淺,值得佩服,他的觀點,輕松收益,公開實盤,關注博主,蝕扭為盈,觀點確實,一位達人,值得追蹤,分享的觀點,我佩服,我信任,我最佩服,我最信任,我最敬佩,我敬佩,值得佩服,值得信任,值得敬佩,意外在,讓人佩服,讓人信任,讓人敬佩,李筆記,陳重銘,謝駿揚,一心存股,土伯股評,大漲鴻圖,不敗教主,以股作樂,伯樂相股,利財隨筆,宏觀理念,宏觀論市,投資筆記,股往金來,倉盤日記,奪冠密碼,盤倉日記,錢線勘查,講股論壇,趨勢縱橫,趨勢觀察,股市風清揚,日賺,打字人員,打字員,打字秘诀,本土兼職,在家用手,有興趣了解加,老司,每天接單,來回機票,抽獎送,留言越多,參加方式,崩潰男友,現在入職,眾多片分享,想了解,慎防詐騙,網賺操作員,趕快加我,機會越高,機群組,親自教你怎麼賺錢,運彩,都會贏,不作假,免費分析,一人可操作,一键,七天打造,上千个号,上门考察,个人工作,大額小額,小額借款,广告,飞机,引流,手动操作,支票借款,斗音,无需,日私信,日爬取,日进粉,日强制,主动询盘,出海神器,加v,加w,发送不受限,外贸行业,外部链接,必备神器,用心服务,电子,亚马逊,任意行业,全网顶尖,导流上号,百万私信,网页后台,自由搭配,自动日,批量跨过,批量输送,抖音,护肤品,每天稳定,私信发送,私信软件,私信营销,私信模式,私域流量池,纯网页端,变现快,国际物流,国家地区,定位采集,爬取精准,直接私信,详询+,详情联系,远程测试,顶尖软件,客户主动,流量黑马,独立站,独家技术,海外客户,海外钭音,涨粉快,真实商品,粉丝,适用于,酒店用品,售后有保障,商品买卖,推广,斜议私信,获客,博主账号,强制私信,超级私信,超级福音,链接自由,群发私信,跨过关注,跨境电商,跨境流量,稳定开单,精准上粉,精准定位,精准采集,精准粉,操作便捷,霸屏发帖,霸屏系统,.app,.cc,.gd,.gg,.is,.la,.link,.ly,.me,.ng,.pt,.su,.to,.vn,ivendor,paktor,+60,+63,+66,+84,+86,+886,</span><br></pre></td></tr></table></figure><p>截至目前為止，總共有 251 個關鍵字，目前在思考之後可能會建立一套廣告回報系統，盡可能減少篩選關鍵字的這個人工成本，不過這需要一點時間去想該怎麼實作，如果你對於關鍵字封鎖也有興趣，或者想參與這些過程的話，可以來我們的 Discord 找乾太 talk talk ㄛ 🥺</p><p>我是你們厝邊隔壁陪你寫程式的好鄰居乾太，我們下次見。</p><p>👉 <a href="https://discord.com/invite/tPhnrs2">純靠北工程師 Discord</a></p>]]></content>
    
    
    <summary type="html">本文旨在探討社群平台經營者在面對廣告留言困擾時的解決方案。分享了封鎖留言的關鍵字列表的制定方法，並提及手動檢查是否有遭到誤刪的群眾的重要性。透過觀察和研究，文章揭示了關鍵字選擇的注意事項以及可能遭遇的問題，並提供實用的建議和策略，以解決留言困擾帶來的挑戰。</summary>
    
    
    
    <category term="經驗分享" scheme="https://blog.init.engineer/categories/%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="廣告留言" scheme="https://blog.init.engineer/tags/%E5%BB%A3%E5%91%8A%E7%95%99%E8%A8%80/"/>
    
    <category term="社群經營" scheme="https://blog.init.engineer/tags/%E7%A4%BE%E7%BE%A4%E7%B6%93%E7%87%9F/"/>
    
  </entry>
  
  <entry>
    <title>如何透過 GitHub 的 Projects 功能，來協助專案管理的執行（以委託繪師為例）</title>
    <link href="https://blog.init.engineer/posts/HowToUseGitHubProjectForArtist/"/>
    <id>https://blog.init.engineer/posts/HowToUseGitHubProjectForArtist/</id>
    <published>2023-02-16T04:00:00.000Z</published>
    <updated>2023-02-16T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果有在接觸軟體開發這件事的話，對於敏捷開發(Agile)這件事情應該不陌生，甚至於大型的專案上，為了確保每個功能細項都能如實執行，甚至還要能夠應付一直不斷變化的需求，所以我們會依賴一些工具來把項目給視覺化，以協助我們更容易對專案進行管理，這就是我們今天要介紹的 <a href="https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects">GitHub Projects</a> 功能，並且是以委託繪師為例子，緣由來自於<a href="https://twitter.com/a0960212623">某位</a>繪師朋友的委託多到炸了，但要來整理委託又好麻煩，所以透過介紹這功能的同時，希望能藉此解決其他人的這類煩惱。</p><p><a href="https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects">GitHub Projects</a> 是 <a href="https://github.com/">GitHub</a> 平台提供的一個專案管理工具，它允許開發者和團隊在一個平台上組織和管理他們的工作流程。它提供了一個可自訂的看板，用於追蹤任務和專案的進度，協助團隊協作和提高工作效率。</p><p>不過本文章是以繪師接案來作為範例，因此以下展示了透過 <a href="https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects">GitHub Projects</a> 來作為工作流程的模樣：</p><p><img src="/img/posts/HowToUseGitHubProjectsForArtist/14.png" alt="14.png"></p><p>如上圖所示，<a href="https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects">GitHub Projects</a> 提供了一個直覺的看板，用於管理和追蹤任務。繪師（團隊成員）可以輕鬆地拖放任務卡片，以反映任務的進度和狀態。此外，繪師（團隊成員）可以在任務卡片上添加詳細資訊和討論，以便日後可以更好地理解和追蹤任務的進度。</p><p>使用 <a href="https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects">GitHub Projects</a> 可以協助繪師更好地管理專案和工作流程。首先，您需要在 <a href="https://github.com/">GitHub</a> 上註冊一個帳號，這是使用 <a href="https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects">GitHub Projects</a> 的前提。</p><blockquote><p>GitHub 註冊 ➡ <a href="https://github.com/signup">https://github.com/signup</a></p></blockquote><p>接下來，有兩種方式來建立看板，</p><p>方式一、透過建立 Repository，再建立 Project</p><ol><li>您可以點擊 GitHub 首頁右上角的加號按鈕，選擇 <code>New repository</code>，然後進入 <code>repository</code> 的設定頁面。</li><li>在這個頁面中，您可以選擇是否將這個 <code>repository</code> 設置為公開或私人，以及命名您的 <code>repository</code>。</li><li>在 <code>repository</code> 的設定中，您可以建立一個 <code>Projects</code> 看板。</li></ol><p>方式二、直接建立 Project</p><ol><li>您可以點擊 GitHub 首頁右上角的加號按鈕，選擇 <code>New project</code>，然後進入 <code>project</code> 的設定頁面。</li></ol><p>這裡我們採用方式二的做法來建立 Project 看板。</p><p><img src="/img/posts/HowToUseGitHubProjectsForArtist/1.png" alt="1.png"></p><p>接下來我們為看板選擇 <code>Board</code> 的樣式，這個樣式會更適合作為管理專案和工作流程。</p><p><img src="/img/posts/HowToUseGitHubProjectsForArtist/2.png" alt="2.png"></p><p>建立完成以後，看板將會有幾些預設的列，分別為 <code>Todo(等待執行)</code>、<code>In Progress(進行中)</code>、<code>Done(完成)</code> 三個列，當然我們也可以編輯這些列的內容。</p><p><img src="/img/posts/HowToUseGitHubProjectsForArtist/3.png" alt="3.png"></p><p>只要點擊列表右上角的三點，就可以選擇 <code>Edit details(編輯詳細)</code> 來開啟編輯列的視窗。</p><p><img src="/img/posts/HowToUseGitHubProjectsForArtist/4.png" alt="4.png"></p><p>一旦您建立了看板，您就可以開始設定列了。列通常用於將相關的任務分組。</p><p><img src="/img/posts/HowToUseGitHubProjectsForArtist/5.png" alt="5.png"></p><p>例如，您可以建立一個 <code>提交委託</code>、<code>已確認委託</code>、<code>正在進行</code>、<code>委託完成</code>、<code>委託結束</code>。您可以根據您的需求來新增、刪除或重新排序列。</p><p><img src="/img/posts/HowToUseGitHubProjectsForArtist/6.png" alt="6.png"></p><p>接下來，您可以透過頁面下方的輸入框來新增任務卡片，只要輸入內容即可新增，任務卡片包含有關一個具體任務的訊息，例如任務標題、描述、負責人、截止日期等等。</p><p><img src="/img/posts/HowToUseGitHubProjectsForArtist/7.png" alt="7.png"></p><p>在這裡我們把卡片作為是委託人，每張卡片都屬於一位委託者、委託內容，您也可以使用拖放功能將委託卡片移動到不同的列中，以反映委託的狀態。</p><p><img src="/img/posts/HowToUseGitHubProjectsForArtist/8.png" alt="8.png"></p><p>直接點擊卡片即可開啟卡片的詳細內容並且編輯。</p><p><img src="/img/posts/HowToUseGitHubProjectsForArtist/9.png" alt="9.png"></p><p>除此之外，<a href="https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects">GitHub Projects</a> 還提供了其他一些有用的功能，例如在卡片中新增標籤，以便更好地組織和搜尋卡片；在卡片中設定檔案、連結或註解等等。</p><p><img src="/img/posts/HowToUseGitHubProjectsForArtist/10.png" alt="10.png"></p><p>編輯完畢以後直接點擊 <code>Update comment</code> 即可儲存卡片的資訊。</p><p><img src="/img/posts/HowToUseGitHubProjectsForArtist/11.png" alt="11.png"></p><p>當卡片進行到一個階段後，就可以直接拖曳卡片來當作卡片目前的狀態。</p><p><img src="/img/posts/HowToUseGitHubProjectsForArtist/12.png" alt="12.png"></p><p>推薦可以為 Board 建立五個列，並作為五種用途，分別：</p><ol><li><code>提交委託</code>：新收到的委託。</li><li><code>已確認委託</code>：已收到委託，排隊等待執行。</li><li><code>正在進行</code>：正在進行當中的委託。</li><li><code>委託完成</code>：已經完成委託，進行最後的確認、收款的步驟。</li><li><code>委託結束</code>：已確認完畢並收款完成。</li></ol><p><img src="/img/posts/HowToUseGitHubProjectsForArtist/13.png" alt="13.png"></p><p>最後的成果會如同下圖：</p><p><img src="/img/posts/HowToUseGitHubProjectsForArtist/14.png" alt="14.png"></p>]]></content>
    
    
    <summary type="html">GitHub Projects 是 GitHub 平台提供的一個專案管理工具，它允許開發者和團隊在一個平台上組織和管理他們的工作流程 ...</summary>
    
    
    
    <category term="專案管理" scheme="https://blog.init.engineer/categories/%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="GitHub" scheme="https://blog.init.engineer/tags/GitHub/"/>
    
    <category term="Projects" scheme="https://blog.init.engineer/tags/Projects/"/>
    
    <category term="專案管理" scheme="https://blog.init.engineer/tags/%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>乾太推薦碼，信用卡、銀行、外送、購物、交通，Richart、e.Fingo、MaiCoin Max、Pionex、KOKO、LINE Bank、Shopee、Uber Eats、Foodpanda ...</title>
    <link href="https://blog.init.engineer/posts/KantaiCoupon/"/>
    <id>https://blog.init.engineer/posts/KantaiCoupon/</id>
    <published>2022-03-22T16:00:00.000Z</published>
    <updated>2022-03-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信用卡"><a href="#信用卡" class="headerlink" title="信用卡"></a>信用卡</h1><h2 id="台新銀行-Richart"><a href="#台新銀行-Richart" class="headerlink" title="台新銀行 Richart"></a>台新銀行 Richart</h2><p>透過我的推薦連結申辦台新銀行 Richart，你我會獲得：<br><code>你會獲得</code>：NT$ 100 優惠金<br><code>我會獲得</code>：NT$ 100 優惠金</p><ul><li>推薦連結 <a href="https://richart.tw/TSDIB_RichartWeb/RC07/RC070100?sn=DSIAW">https://richart.tw/TSDIB_RichartWeb&#x2F;RC07&#x2F;RC070100?sn&#x3D;DSIAW</a></li></ul><h2 id="玉山銀行-e-Fingo"><a href="#玉山銀行-e-Fingo" class="headerlink" title="玉山銀行 e. Fingo"></a>玉山銀行 e. Fingo</h2><p>透過我的推薦連結申辦玉山銀行 e. Fingo，你我會獲得：<br><code>你會獲得</code>：100 優惠點數(NT$ 100)<br><code>我會獲得</code>：100 優惠點數(NT$ 100)</p><ul><li>我的會員代碼：<code>5ZV3SJ98</code></li><li>推薦連結 <a href="https://j3x8a.app.goo.gl/fW8QM6XKcD64xVdW6">https://j3x8a.app.goo.gl/fW8QM6XKcD64xVdW6</a></li></ul><h2 id="連線銀行-LINE-Bank"><a href="#連線銀行-LINE-Bank" class="headerlink" title="連線銀行 LINE Bank"></a>連線銀行 LINE Bank</h2><p>透過我的推薦連結申辦連線銀行 LINE Bank，你我會獲得：<br><code>你會獲得</code>：LINE POINTS 300點(NT$ 300)<br><code>我會獲得</code>：LINE POINTS 100點(NT$ 100)</p><ul><li>推薦連結 <a href="https://www.linebank.com.tw/R/mgm-event/invitation?mgm=101000116634">https://www.linebank.com.tw/R/mgm-event/invitation?mgm=101000116634</a></li></ul><h2 id="將來銀行-NEXT-Bank"><a href="#將來銀行-NEXT-Bank" class="headerlink" title="將來銀行 NEXT Bank"></a>將來銀行 NEXT Bank</h2><p>透過我的推薦連結申辦將來銀行 NEXT Bank，你我會獲得：<br><code>你會獲得</code>：200 將來 N 點(NT$ 200) + 6.66% N 倍券 1 張(加息利率 6.66 %，加息期間 10 天，加息存款限額 25,000 元)<br><code>我會獲得</code>：100 將來 N 點(NT$ 100)</p><ul><li>我的邀請碼：<code>W57TX</code></li><li>推薦連結 <a href="https://www.linebank.com.tw/R/mgm-event/invitation?mgm=101000116634">https://www.linebank.com.tw/R/mgm-event/invitation?mgm=101000116634</a></li></ul><h2 id="遠東商銀-Bankee"><a href="#遠東商銀-Bankee" class="headerlink" title="遠東商銀 Bankee"></a>遠東商銀 Bankee</h2><p>透過我的推薦連結申辦遠東商銀 Bankee，你我會獲得：<br><code>你會獲得</code>：加息利率 2.6 %，加息期間 180 天，加息存款限額 50,000 元<br><code>我會獲得</code>：加息利率 2.6 %，加息期間 180 天，加息存款限額 50,000 元</p><ul><li>我的邀請碼：<code>WLX55</code></li><li>推薦連結 <a href="https://www.appbankee.com.tw/bankee/rest/re/WLX55">https://www.appbankee.com.tw/bankee/rest/re/WLX55</a></li></ul><h2 id="國泰世華"><a href="#國泰世華" class="headerlink" title="國泰世華"></a>國泰世華</h2><p>透過我的推薦連結申辦國泰世華，你我會獲得：<br><code>你會獲得</code>：我也不知道，他沒跟我說 QQ<br><code>我會獲得</code>：我也不知道，他沒跟我說 QQ</p><ul><li>推薦連結 <a href="https://www.cathaybk.com.tw/cathaybk/promo/event/ebanking/product/APP-WEB/index.html?invite=L35BB">https://www.cathaybk.com.tw/cathaybk/promo/event/ebanking/product/APP-WEB/index.html?invite=L35BB</a></li></ul><h1 id="虛擬貨幣"><a href="#虛擬貨幣" class="headerlink" title="虛擬貨幣"></a>虛擬貨幣</h1><h2 id="幣安-Binance"><a href="#幣安-Binance" class="headerlink" title="幣安 Binance"></a>幣安 Binance</h2><p><code>【推薦點這個】</code>透過我的「邀請返券」推薦連結申辦幣安 Binance，你我會獲得：<br><code>你會獲得</code>：100 USDT 交易手續<br><code>我會獲得</code>：100 USDT 交易手續</p><ul><li>邀請返券 ID：<code>CPA_00L9WSN4W0</code></li><li>邀請返券鏈結 <a href="https://www.binance.com/zh-TW/activity/referral/offers/claim?ref=CPA_00L9WSN4W0">https://www.binance.com/zh-TW/activity/referral/offers/claim?ref=CPA_00L9WSN4W0</a></li></ul><p>透過我的「標準推薦」推薦連結申辦幣安 Binance，你我會獲得：<br><code>你會獲得</code>：20% 交易手續費折抵<br><code>我會獲得</code>：20% 交易手續費返佣</p><ul><li>推薦 ID：<code>435272848</code></li><li>推薦鏈結 <a href="https://accounts.binance.com/zh-TW/register?ref=435272848">https://accounts.binance.com/zh-TW/register?ref=435272848</a></li></ul><h2 id="MaiCoin-MAX"><a href="#MaiCoin-MAX" class="headerlink" title="MaiCoin MAX"></a>MaiCoin MAX</h2><p>透過我的推薦連結申辦 MaiCoin MAX，你我會獲得：<br><code>你會獲得</code>：20% 交易手續費折抵<br><code>我會獲得</code>：20% 交易手續費返佣</p><ul><li>推薦連結 <a href="https://max.maicoin.com/signup?r=7ceaf65d">https://max.maicoin.com/signup?r=7ceaf65d</a></li></ul><h2 id="派網-Pionex"><a href="#派網-Pionex" class="headerlink" title="派網 Pionex"></a>派網 Pionex</h2><p>透過我的推薦連結申辦派網 Pionex，你我會獲得：<br><code>你會獲得</code>：20% 交易手續費折抵<br><code>我會獲得</code>：20% 交易手續費返佣</p><ul><li>推薦連結 <a href="https://www.pionex.com/offers/#/w/grid/PY7CGXc5">https://www.pionex.com/offers/#/w/grid/PY7CGXc5</a></li></ul><h1 id="證券交易"><a href="#證券交易" class="headerlink" title="證券交易"></a>證券交易</h1><h2 id="玉山證券-富果帳戶-Fugle"><a href="#玉山證券-富果帳戶-Fugle" class="headerlink" title="玉山證券 富果帳戶 Fugle"></a>玉山證券 富果帳戶 Fugle</h2><p>透過我的推薦連結申辦玉山證券 富果帳戶 Fugle，你我會獲得：<br><code>你會獲得</code>：108 富果幣(NT$ 108)<br><code>我會獲得</code>：108 富果幣(NT$ 108)</p><ul><li>推薦連結 <a href="https://openaccount.fugle.tw/?referral=f-49d4960&utm_source=referral&utm_medium=link&openExternalBrowser=1">https://openaccount.fugle.tw/?referral=f-49d4960&utm_source&#x3D;referral&amp;utm_medium&#x3D;link&amp;openExternalBrowser&#x3D;1</a></li></ul><h2 id="國泰世華-綜合證券"><a href="#國泰世華-綜合證券" class="headerlink" title="國泰世華 綜合證券"></a>國泰世華 綜合證券</h2><p>透過我的推薦連結申辦國泰世華 綜合證券，你我會獲得：<br><code>你會獲得</code>：證券下單手續費 2.8 折，以及抽 iPhone 13、抽統一超商 100 元商品卡的機會，我知道這很爛<br><code>我會獲得</code>：抽 iPhone 13、抽統一超商 100 元商品卡的機會，我知道這很爛</p><ul><li>推薦連結 <a href="https://cathaysec.tw/q84M9V?openExternalBrowser=1">https://cathaysec.tw/q84M9V?openExternalBrowser=1</a></li></ul><h1 id="購物"><a href="#購物" class="headerlink" title="購物"></a>購物</h1><h2 id="蝦皮-Shopee"><a href="#蝦皮-Shopee" class="headerlink" title="蝦皮 Shopee"></a>蝦皮 Shopee</h2><p>透過我的推薦連結申辦蝦皮 Shopee，你我會獲得：<br><code>你會獲得</code>：訂單金額 200% 蝦幣回饋<br><code>我會獲得</code>：200 蝦幣(NT$ 200)</p><ul><li>我的推薦折扣碼：<code>REF-HUE422</code></li><li>推薦連結 <a href="https://shp.ee/g773a9j?smtt=0.0.9">https://shp.ee/g773a9j?smtt=0.0.9</a></li></ul><h2 id="ShopBack"><a href="#ShopBack" class="headerlink" title="ShopBack"></a>ShopBack</h2><p>透過我的推薦連結申辦 ShopBack，你我會獲得：<br><code>你會獲得</code>：NT$ 100 獎勵金<br><code>我會獲得</code>：NT$ 100 獎勵金</p><ul><li>推薦連結 <a href="https://app.shopback.com/KwhG819RBob">https://app.shopback.com/KwhG819RBob</a></li></ul><h1 id="外送"><a href="#外送" class="headerlink" title="外送"></a>外送</h1><h2 id="Uber-Eats"><a href="#Uber-Eats" class="headerlink" title="Uber Eats"></a>Uber Eats</h2><p>透過我的推薦連結申辦 Uber Eats，你我會獲得：<br><code>你會獲得</code>：2 次消費滿 NT$ 150 折扣 NT$ 100 優惠<br><code>我會獲得</code>：1 次消費滿 NT$ 150 折扣 NT$ 100 優惠</p><ul><li>在結帳時使用我的代碼：<code>eats-imyyb0</code></li></ul><h2 id="Foodpanda"><a href="#Foodpanda" class="headerlink" title="Foodpanda"></a>Foodpanda</h2><p>透過我的推薦連結申辦 Foodpanda，你我會獲得：<br><code>你會獲得</code>：1 次消費滿 NT$ 200 折扣 NT$ 100 優惠<br><code>我會獲得</code>：1 次消費滿 NT$ 200 折扣 NT$ 100 優惠</p><ul><li>推薦連結 <a href="https://www.foodpanda.com.tw/referral?code=b5ef2ef89e771f726e02ae91296c1f0b&geid=FP_TW">https://www.foodpanda.com.tw/referral?code=b5ef2ef89e771f726e02ae91296c1f0b&geid=FP_TW</a></li></ul><h1 id="旅遊"><a href="#旅遊" class="headerlink" title="旅遊"></a>旅遊</h1><h2 id="GoShare"><a href="#GoShare" class="headerlink" title="GoShare"></a>GoShare</h2><p>透過我的推薦連結申辦 GoShare，你我會獲得：<br><code>你會獲得</code>：NT$ 100 折扣優惠<br><code>我會獲得</code>：NT$ 100 折扣優惠</p><ul><li>我的推薦碼：<code>LLE62</code></li><li>推薦連結 <a href="https://go.ridegoshare.com/7Qbtm8oTswpQuA3s5">https://go.ridegoshare.com/7Qbtm8oTswpQuA3s5</a></li></ul>]]></content>
    
    
    <summary type="html">乾太推薦碼，信用卡、銀行、外送、購物、交通，Richart、e.Fingo、MaiCoin Max、Pionex、KOKO、LINE Bank、Shopee、Uber Eats、Foodpanda、ShopBack、GoShare、Fugle ...</summary>
    
    
    
    <category term="經驗分享" scheme="https://blog.init.engineer/categories/%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="推薦碼" scheme="https://blog.init.engineer/tags/%E6%8E%A8%E8%96%A6%E7%A2%BC/"/>
    
  </entry>
  
  <entry>
    <title>【社群恩仇錄】byStarTW/instanceof/pan93412</title>
    <link href="https://blog.init.engineer/posts/BlockedPan93412/"/>
    <id>https://blog.init.engineer/posts/BlockedPan93412/</id>
    <published>2022-03-06T16:00:00.000Z</published>
    <updated>2022-03-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我覺得在這個社群當中，願意無私奉獻精力去經營「<a href="https://init.enginner/">純靠北工程師</a>」的人，我都會懷抱感恩的心情去面對每位貢獻者，我喜歡稱這些人是參與者、貢獻者、我們的夥伴，大家會在自己有限的時間當中，抽出一部分的時間，對這個社群持續付出心力，或許有人擅長 <code>Android</code> 開發，於是協助製作 <code>Android APP</code> 應用程式，或許有人擅長 <code>Discord Bot</code> 的撰寫，在協助管理社群的這段歲月，創作了可以造福社群的機器人。</p><blockquote><p>這邊真的要感謝 <a href="https://github.com/SmoothieNoIce">SmoothieNoIce</a> 的貢獻，如果沒有他，就沒有純靠北工程師 Android APP 專案了。<br><a href="https://github.com/init-engineer/init.engineer-Android-App">這是一份純靠北工程師 Android App 的專案。</a></p></blockquote><blockquote><p>這邊也要感謝 <a href="https://github.com/money626">money626</a> 的貢獻，如果沒有他，純靠北工程師的 Discord 就沒有很方便的機器人服務了。<br><a href="https://github.com/init-engineer/init.engineer-Discord-Python-Bot">這是一項使用 Python 撰寫的 Discord 機器人專案，用於純靠北工程師群組。</a></p></blockquote><h1 id="事件詳細"><a href="#事件詳細" class="headerlink" title="事件詳細"></a>事件詳細</h1><p>每個人都有自己擅長的能力，在這個社群當中，也有值得自己去學習的技能，但是有一種態度實在是不適宜在社群當中展現，那就是參與社群的開發，卻嫌棄前人所建造下來的基石。</p><p>這件事要從社群上的開發人力說起，其實「<a href="https://init.enginner/">純靠北工程師</a>」一直都處在開發人力稀少，我們開發速度非常緩慢，但開發得很開心、很快樂，時常就是突然有甚麼有趣的點子，今天下午提出來，晚上就開始動工，凌晨直接推更新，又或者是有人對於社群的功能有甚麼想法，直接開始動手作，做完以後就變成了<a href="https://github.com/init-engineer/init.engineer-Android-App">值得驕傲的作品</a>之一，甚至有人從社群中發現問題，從問題中找到解決辦法，創造出了一個<a href="https://haer0248.me/635/">值得學習的新項目</a>。</p><p>然而主要網頁服務也不例外，如果有前端開發者願意一起來開發，那麼再好不過，於是找上了事主，但這卻是一些糾紛的開始。</p><h2 id="合作過程"><a href="#合作過程" class="headerlink" title="合作過程"></a>合作過程</h2><p>當你習慣技術項目內建所提供的開發模式，他對此並不熟悉，使得他在運行專案時遇到困難的時候，他會告訴你：</p><blockquote><p>「怎麼不用 <code>Memcached</code> &#x2F; <code>MariaDB</code> 還有 <code>Redis</code>，不用 <code>docker-compose</code> 或 <code>k8s</code> 感覺很累」</p></blockquote><p>當你一開始服務啟用時就選擇了 <code>MariaDB</code> 作為主要的資料庫系統，並且告訴他使用的資料庫系統是 <code>MariaDB</code>，而不是最好的資料庫系統的時候，他會告訴你：</p><blockquote><p>「不考慮換成 <code>PostageSQL</code> 嗎？聽說效能好一點」</p></blockquote><p>欸？等等，前一句你不是說怎麼不用 <code>MariaDB</code> 嗎？怎麼下一秒問怎麼不考慮換成 <code>PostageSQL</code> 了？</p><p>算了，繼續看其他的好了。</p><p>當你的開發模式跟他理想上的有落差時，他會告訴你：</p><blockquote><p>「你現在的開發模式大概跟 <code>jQuery</code> + <code>Notepad++</code> 那時代差不多」</p></blockquote><p>當你的開發工具不夠自動化的話，他會告訴你：</p><blockquote><p>「你們是不是都很喜歡把 <code>IDE</code> 當 <code>VI</code> 寫」</p></blockquote><p>當你的前端有兩種以上的渲染方式，他會告訴你：</p><blockquote><p>「既然 <code>Blade</code> 可以做 <code>Component</code>，為什麼又需要一個 <code>Vue</code>？」</p></blockquote><p>當他的開發工具無法顯示出函數的詳細資訊時，他會告訴你：</p><blockquote><p>「無論是裝了 <code>Laravel</code> 的 <code>JetBrains PHPStorm</code>，還是裝了一堆 <code>Laravel Plugins</code> 的 <code>VS Code</code>，兩個都看不到這個函數的定義」</p></blockquote><p>當他覺得你的 <code>Codebase</code> 也就是開發風格他並不喜歡時，他會告訴你：</p><blockquote><p>「老實說，我不是很喜歡這個 <code>Codebase</code> 的前端擺放方式，所以我其實得承認，我有點在找碴」</p></blockquote><h2 id="前後對比"><a href="#前後對比" class="headerlink" title="前後對比"></a>前後對比</h2><p>剛開始決定嘗試參與專案前端的時候是這樣。</p><blockquote><p>2021.11.12<br>「<code>Laravel</code> 真的好方便⋯」</p></blockquote><p>過了不到兩個月後變這樣。</p><blockquote><p>2022.01.06<br>「老實說，我真的不習慣 <code>Laravel</code> 那一套。」</p></blockquote><p>那你可以不要碰 <code>Laravel</code> 啊！</p><h1 id="評語"><a href="#評語" class="headerlink" title="評語"></a>評語</h1><p>在合作的過程中，你會覺得這個人是有想法的、有動力的，而且會覺得他會協助你完成目標，當你把項目下放給這個人後，他雖然會嘗試接觸項目相關的技術，但是整個過程會有許多負面情緒、抱怨，甚至是質疑項目技術，舉例來說我使用 <code>MariaDB</code> 作為我主要的資料庫系統，他就會質疑為什麼不使用<code>「不考慮換成 PostageSQL 嗎？聽說效能好一點」</code>，又或者是我採用前後端混合的開發模式，他就會質疑為何不使用前後端分離？</p><p>如果對於項目技術不熟悉，會質疑項目是否過時了、難以開發，甚至會有<code>「你現在的開發模式大概跟 jQuery + Notepad++ 那時代差不多」</code>諸如此類的言論，反而不是嘗試去了解相關技術。總而言之，整個合作的過程當中，我需要在他接觸 <code>Laravel</code> 遇到問題時提供協助，同時要接受他對於 <code>Laravel</code> 的各種不理解、不諒解、不友善。</p><hr><h1 id="看看其他人的想法"><a href="#看看其他人的想法" class="headerlink" title="看看其他人的想法"></a>看看其他人的想法</h1><h2 id="猫又おにぎり-Blog-對號入座，我就說你"><a href="#猫又おにぎり-Blog-對號入座，我就說你" class="headerlink" title="猫又おにぎり Blog - 對號入座，我就說你"></a>猫又おにぎり Blog - 對號入座，我就說你</h2><blockquote><p>甚麼叫做【有一點故意】，你認為的【刻意公開】就是你自己對號入座<br>我臉書朋友 1140位 就認為說在說你？世界都繞著你轉？<br>你心情好不好與我何干？我要不要發文開地球與你何干？你以為你是誰？<br>來源 : <a href="https://haer0248.me/451/">猫又おにぎり Blog - 對號入座，我就說你</a></p></blockquote><h2 id="Telegram-靠北-byStarTW-pan93412"><a href="#Telegram-靠北-byStarTW-pan93412" class="headerlink" title="Telegram - 靠北 byStarTW(pan93412)"></a>Telegram - 靠北 byStarTW(pan93412)</h2><blockquote><p>想靠北他嗎<br>@byStarTW_Anon 傳送訊息給他<br>將會不定時轉發<br>來源 : <a href="https://t.me/s/bystartw/">Telegram - 靠北 byStarTW(pan93412)</a></p></blockquote>]]></content>
    
    
    <summary type="html">這個社群當中，願意無私奉獻精力去貢獻的人，我都會懷抱感恩的心情去面對每位貢獻者，我喜歡稱這些人是參與者、貢獻者、我們的夥伴，除了一些例外 ...</summary>
    
    
    
    <category term="社群恩仇錄" scheme="https://blog.init.engineer/categories/%E7%A4%BE%E7%BE%A4%E6%81%A9%E4%BB%87%E9%8C%84/"/>
    
    
    <category term="byStarTW" scheme="https://blog.init.engineer/tags/byStarTW/"/>
    
    <category term="instanceof" scheme="https://blog.init.engineer/tags/instanceof/"/>
    
    <category term="pan93412" scheme="https://blog.init.engineer/tags/pan93412/"/>
    
  </entry>
  
  <entry>
    <title>【學習筆記】指數平滑異同移動平均線 Moving Average Convergence / Divergence</title>
    <link href="https://blog.init.engineer/posts/MovingAverageConvergenceDivergence/"/>
    <id>https://blog.init.engineer/posts/MovingAverageConvergenceDivergence/</id>
    <published>2022-02-22T16:00:00.000Z</published>
    <updated>2022-02-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>指數平滑異同移動平均線(Moving Average Convergence &#x2F; Divergence, MACD)</p><h1 id="計算方式"><a href="#計算方式" class="headerlink" title="計算方式"></a>計算方式</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MACD = EMA(DIF, 9)</span><br><span class="line">DIF = EMA(12) - EMA(26)</span><br><span class="line"></span><br><span class="line">EMA: 指數移動平均線</span><br><span class="line">DIF: 離差值</span><br></pre></td></tr></table></figure><ul><li><a href="/posts/ExponentialMovingAverage">【學習筆記】指數移動平均線 Exponential Moving Average</a></li></ul><h2 id="舉例陽明-2609-111-x2F-02-x2F-18-的-MACD"><a href="#舉例陽明-2609-111-x2F-02-x2F-18-的-MACD" class="headerlink" title="舉例陽明(2609) 111&#x2F;02&#x2F;18 的 MACD"></a>舉例陽明(2609) 111&#x2F;02&#x2F;18 的 MACD</h2><ol><li>計算 EMA(12)</li></ol><p>加權指數<br>K &#x3D; <code>平滑因子 / (時間週期 + 1)</code><br>  &#x3D; <code>Something / (N + 1)</code><br>  &#x3D; <code>2 / (12 + 1)</code><br>  &#x3D; <code>2 / 13</code><br>  &#x3D; <code>0.1538461538461538</code></p><p>EMA(12) &#x3D; <code>(今日收盤價 * 加權指數) + 昨日 EMA * (1 - 加權指數)</code><br>       &#x3D; <code>(Today CP * K) + Yesterday EMA * (1 - K)</code><br>       &#x3D; <code>(116.50 * 0.1538461538461538) + 109.93 * (1 - 0.1538461538461538)</code><br>       &#x3D; <code>17.92307692307692 + 109.93 * 0.8461538461538462</code><br>       &#x3D; <code>17.92307692307692 + 93.01769230769231</code><br>       &#x3D; <code>110.9407692307692</code> 約等於 <code>110.94</code></p><ol start="2"><li>計算 EMA(26)</li></ol><p>加權指數<br>K &#x3D; <code>平滑因子 / (時間週期 + 1)</code><br>  &#x3D; <code>Something / (N + 1)</code><br>  &#x3D; <code>2 / (26 + 1)</code><br>  &#x3D; <code>2 / 27</code><br>  &#x3D; <code>0.0740740740740741</code></p><p>EMA(26) &#x3D; <code>(今日收盤價 * 加權指數) + 昨日 EMA * (1 - 加權指數)</code><br>       &#x3D; <code>(Today CP * K) + Yesterday EMA * (1 - K)</code><br>       &#x3D; <code>(116.50 * 0.0740740740740741) + 110.24 * (1 - 0.0740740740740741)</code><br>       &#x3D; <code>8.629629629629633 + 110.24 * 0.9259259259259259</code><br>       &#x3D; <code>8.629629629629633 + 102.0740740740741</code><br>       &#x3D; <code>110.7037037037037</code> 約等於 <code>110.70</code></p><ol start="3"><li>計算 DIF</li></ol><p>DIF &#x3D; <code>EMA(12) - EMA(26)</code><br>    &#x3D; <code>110.94 - 110.70</code><br>    &#x3D; <code>0.24</code></p><ol start="4"><li>計算 MACD</li></ol><p><code>111/02/18</code> 的 <code>DIF</code> 值為 <code> 0.24</code><br><code>111/02/17</code> 的 <code>DIF</code> 值為 <code>-0.30</code><br><code>111/02/16</code> 的 <code>DIF</code> 值為 <code>-0.54</code><br><code>111/02/15</code> 的 <code>DIF</code> 值為 <code>-0.88</code><br><code>111/02/14</code> 的 <code>DIF</code> 值為 <code>-1.15</code><br><code>111/02/11</code> 的 <code>DIF</code> 值為 <code>-1.43</code><br><code>111/02/10</code> 的 <code>DIF</code> 值為 <code>-1.92</code><br><code>111/02/09</code> 的 <code>DIF</code> 值為 <code>-2.71</code><br><code>111/02/08</code> 的 <code>DIF</code> 值為 <code>-3.49</code></p><p>加權指數<br>K &#x3D; <code>平滑因子 / (時間週期 + 1)</code><br>  &#x3D; <code>Something / (N + 1)</code><br>  &#x3D; <code>2 / (9 + 1)</code><br>  &#x3D; <code>2 / 10</code><br>  &#x3D; <code>0.2</code></p><p>EMA(DIF, 9) &#x3D; <code>(今日 DIF * 加權指數) + 昨日 MACD * (1 - 加權指數)</code><br>       &#x3D; <code>(Today DIF * K) + Yesterday MACD * (1 - K)</code><br>       &#x3D; <code>(0.24 * 0.2) + (-1.59) * (1 - 0.2)</code><br>       &#x3D; <code>0.048 + (-1.59) * 0.8</code><br>       &#x3D; <code>0.048 + (-1.272)</code><br>       &#x3D; <code>-1.224</code> 約等於 <code>-1.22</code></p><p>MACD &#x3D; <code>EMA(DIF, 9)</code><br>     &#x3D; <code>-1.22</code></p><h1 id="範例資料"><a href="#範例資料" class="headerlink" title="範例資料"></a>範例資料</h1><table><thead><tr><th align="left">日期</th><th align="right">收盤價</th><th align="right">EMA(12)</th><th align="right">EMA(26)</th><th align="right">DIF</th><th align="right">MACD</th></tr></thead><tbody><tr><td align="left">111&#x2F;02&#x2F;18</td><td align="right">116.50</td><td align="right">110.94</td><td align="right">110.70</td><td align="right">0.24</td><td align="right">-1.22</td></tr><tr><td align="left">111&#x2F;02&#x2F;17</td><td align="right">112.00</td><td align="right">109.93</td><td align="right">110.24</td><td align="right">-0.30</td><td align="right">-1.59</td></tr><tr><td align="left">111&#x2F;02&#x2F;16</td><td align="right">112.50</td><td align="right">109.56</td><td align="right">110.09</td><td align="right">-0.54</td><td align="right">-1.91</td></tr><tr><td align="left">111&#x2F;02&#x2F;15</td><td align="right">111.00</td><td align="right">109.02</td><td align="right">109.90</td><td align="right">-0.88</td><td align="right">-2.25</td></tr><tr><td align="left">111&#x2F;02&#x2F;14</td><td align="right">110.50</td><td align="right">108.66</td><td align="right">109.81</td><td align="right">-1.15</td><td align="right">-2.59</td></tr><tr><td align="left">111&#x2F;02&#x2F;11</td><td align="right">112.00</td><td align="right">108.33</td><td align="right">109.76</td><td align="right">-1.43</td><td align="right">-2.95</td></tr><tr><td align="left">111&#x2F;02&#x2F;10</td><td align="right">114.00</td><td align="right">107.66</td><td align="right">109.58</td><td align="right">-1.92</td><td align="right">-3.33</td></tr><tr><td align="left">111&#x2F;02&#x2F;09</td><td align="right">112.00</td><td align="right">106.51</td><td align="right">109.23</td><td align="right">-2.71</td><td align="right">-3.69</td></tr><tr><td align="left">111&#x2F;02&#x2F;08</td><td align="right">112.50</td><td align="right">105.51</td><td align="right">109.00</td><td align="right">-3.49</td><td align="right">-3.93</td></tr><tr><td align="left">111&#x2F;02&#x2F;07</td><td align="right">108.00</td><td align="right">104.24</td><td align="right">108.72</td><td align="right">-4.48</td><td align="right">-4.04</td></tr><tr><td align="left">111&#x2F;01&#x2F;26</td><td align="right">98.60</td><td align="right">103.56</td><td align="right">108.78</td><td align="right">-5.22</td><td align="right">-3.93</td></tr><tr><td align="left">111&#x2F;01&#x2F;25</td><td align="right">95.10</td><td align="right">104.46</td><td align="right">109.60</td><td align="right">-5.13</td><td align="right">-3.61</td></tr><tr><td align="left">111&#x2F;01&#x2F;24</td><td align="right">99.90</td><td align="right">106.17</td><td align="right">110.76</td><td align="right">-4.59</td><td align="right">-3.22</td></tr><tr><td align="left">111&#x2F;01&#x2F;21</td><td align="right">99.00</td><td align="right">107.30</td><td align="right">111.63</td><td align="right">-4.32</td><td align="right">-2.88</td></tr><tr><td align="left">111&#x2F;01&#x2F;20</td><td align="right">104.00</td><td align="right">108.81</td><td align="right">112.64</td><td align="right">-3.82</td><td align="right">-2.52</td></tr><tr><td align="left">111&#x2F;01&#x2F;19</td><td align="right">104.00</td><td align="right">109.69</td><td align="right">113.33</td><td align="right">-3.64</td><td align="right">-2.20</td></tr><tr><td align="left">111&#x2F;01&#x2F;18</td><td align="right">106.50</td><td align="right">110.72</td><td align="right">114.07</td><td align="right">-3.35</td><td align="right">-1.84</td></tr><tr><td align="left">111&#x2F;01&#x2F;17</td><td align="right">105.50</td><td align="right">111.49</td><td align="right">114.68</td><td align="right">-3.19</td><td align="right">-1.46</td></tr><tr><td align="left">111&#x2F;01&#x2F;14</td><td align="right">107.50</td><td align="right">112.58</td><td align="right">115.41</td><td align="right">-2.83</td><td align="right">-1.03</td></tr><tr><td align="left">111&#x2F;01&#x2F;13</td><td align="right">105.00</td><td align="right">113.51</td><td align="right">116.05</td><td align="right">-2.54</td><td align="right">-0.58</td></tr><tr><td align="left">111&#x2F;01&#x2F;12</td><td align="right">108.00</td><td align="right">115.05</td><td align="right">116.93</td><td align="right">-1.88</td><td align="right">-0.09</td></tr><tr><td align="left">111&#x2F;01&#x2F;11</td><td align="right">112.00</td><td align="right">116.34</td><td align="right">117.64</td><td align="right">-1.31</td><td align="right">0.36</td></tr><tr><td align="left">111&#x2F;01&#x2F;10</td><td align="right">111.50</td><td align="right">117.12</td><td align="right">118.10</td><td align="right">-0.97</td><td align="right">0.77</td></tr><tr><td align="left">111&#x2F;01&#x2F;07</td><td align="right">113.50</td><td align="right">118.15</td><td align="right">118.62</td><td align="right">-0.48</td><td align="right">1.21</td></tr><tr><td align="left">111&#x2F;01&#x2F;06</td><td align="right">114.50</td><td align="right">118.99</td><td align="right">119.03</td><td align="right">-0.04</td><td align="right">1.63</td></tr><tr><td align="left">111&#x2F;01&#x2F;05</td><td align="right">115.00</td><td align="right">119.81</td><td align="right">119.40</td><td align="right">0.41</td><td align="right">2.05</td></tr><tr><td align="left">111&#x2F;01&#x2F;04</td><td align="right">115.50</td><td align="right">120.68</td><td align="right">119.75</td><td align="right">0.93</td><td align="right">2.46</td></tr><tr><td align="left">111&#x2F;01&#x2F;03</td><td align="right">114.50</td><td align="right">121.62</td><td align="right">120.09</td><td align="right">1.54</td><td align="right">2.85</td></tr></tbody></table><p>範例資料: 陽明(2609) 111&#x2F;02&#x2F;18 ~ 111&#x2F;01&#x2F;03 個股股價行情<br>資料來源: <a href="https://stock.wearn.com/cdata.asp?Year=111&month=02&kind=2609">https://stock.wearn.com/cdata.asp?Year=111&amp;month=02&amp;kind=2609</a></p>]]></content>
    
    
    <summary type="html">指數平滑異同移動平均線(Moving Average Convergence / Divergence, MACD)</summary>
    
    
    
    <category term="投資理財" scheme="https://blog.init.engineer/categories/%E6%8A%95%E8%B3%87%E7%90%86%E8%B2%A1/"/>
    
    <category term="技術指標" scheme="https://blog.init.engineer/categories/%E6%8A%95%E8%B3%87%E7%90%86%E8%B2%A1/%E6%8A%80%E8%A1%93%E6%8C%87%E6%A8%99/"/>
    
    
    <category term="學習筆記" scheme="https://blog.init.engineer/tags/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="指數平滑異同移動平均線" scheme="https://blog.init.engineer/tags/%E6%8C%87%E6%95%B8%E5%B9%B3%E6%BB%91%E7%95%B0%E5%90%8C%E7%A7%BB%E5%8B%95%E5%B9%B3%E5%9D%87%E7%B7%9A/"/>
    
    <category term="MACD" scheme="https://blog.init.engineer/tags/MACD/"/>
    
    <category term="Moving Average Convergence / Divergence" scheme="https://blog.init.engineer/tags/Moving-Average-Convergence-Divergence/"/>
    
  </entry>
  
  <entry>
    <title>【學習筆記】相對強弱指數 Relative Strength Index</title>
    <link href="https://blog.init.engineer/posts/RelativeStrengthIndex/"/>
    <id>https://blog.init.engineer/posts/RelativeStrengthIndex/</id>
    <published>2022-02-21T16:00:00.000Z</published>
    <updated>2022-02-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>相對強弱指數(Relative Strength Index, RSI)</p><h1 id="計算方式"><a href="#計算方式" class="headerlink" title="計算方式"></a>計算方式</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RSI = ( 時間內平均漲幅 / (時間內平均漲幅) + (時間內平均跌幅) ) * 100</span><br></pre></td></tr></table></figure><h2 id="舉例陽明-2609-111-x2F-02-x2F-18-的-RSI，預設-14-天的周期"><a href="#舉例陽明-2609-111-x2F-02-x2F-18-的-RSI，預設-14-天的周期" class="headerlink" title="舉例陽明(2609) 111&#x2F;02&#x2F;18 的 RSI，預設 14 天的周期"></a>舉例陽明(2609) 111&#x2F;02&#x2F;18 的 RSI，預設 14 天的周期</h2><ol><li>先計算平均漲幅</li></ol><p><code>111/02/18</code> 的收盤價格為 <code>116.50</code> 漲了 <code>4.50</code><br><code>111/02/17</code> 的收盤價格為 <code>112.00</code><br><code>111/02/16</code> 的收盤價格為 <code>112.50</code> 漲了 <code>1.50</code><br><code>111/02/15</code> 的收盤價格為 <code>111.00</code> 漲了 <code>0.50</code><br><code>111/02/14</code> 的收盤價格為 <code>110.50</code><br><code>111/02/11</code> 的收盤價格為 <code>112.00</code><br><code>111/02/10</code> 的收盤價格為 <code>114.00</code> 漲了 <code>2.00</code><br><code>111/02/09</code> 的收盤價格為 <code>112.00</code><br><code>111/02/08</code> 的收盤價格為 <code>112.50</code> 漲了 <code>4.50</code><br><code>111/02/07</code> 的收盤價格為 <code>108.00</code> 漲了 <code>9.40</code><br><code>111/01/26</code> 的收盤價格為 <code> 98.60</code> 漲了 <code>3.50</code><br><code>111/01/25</code> 的收盤價格為 <code> 95.10</code><br><code>111/01/24</code> 的收盤價格為 <code> 99.90</code> 漲了 <code>0.90</code><br><code>111/01/21</code> 的收盤價格為 <code> 99.00</code></p><p>將以上漲幅合計起來獲得 <code>26.80</code>，並將其除以 <code>14</code> 天的周期獲得平均漲幅 <code>1.9143</code>。</p><ol><li>再來計算平均跌幅</li></ol><p><code>111/02/18</code> 的收盤價格為 <code>116.50</code><br><code>111/02/17</code> 的收盤價格為 <code>112.00</code> 跌了 <code>0.50</code><br><code>111/02/16</code> 的收盤價格為 <code>112.50</code><br><code>111/02/15</code> 的收盤價格為 <code>111.00</code><br><code>111/02/14</code> 的收盤價格為 <code>110.50</code> 跌了 <code>1.50</code><br><code>111/02/11</code> 的收盤價格為 <code>112.00</code> 跌了 <code>2.00</code><br><code>111/02/10</code> 的收盤價格為 <code>114.00</code><br><code>111/02/09</code> 的收盤價格為 <code>112.00</code> 跌了 <code>0.50</code><br><code>111/02/08</code> 的收盤價格為 <code>112.50</code><br><code>111/02/07</code> 的收盤價格為 <code>108.00</code><br><code>111/01/26</code> 的收盤價格為 <code> 98.60</code><br><code>111/01/25</code> 的收盤價格為 <code> 95.10</code> 跌了 <code>4.80</code><br><code>111/01/24</code> 的收盤價格為 <code> 99.90</code><br><code>111/01/21</code> 的收盤價格為 <code> 99.00</code> 跌了 <code>5.00</code></p><p>將以上跌幅合計起來獲得 <code>14.30</code>，並將其除以 <code>14</code> 天的周期獲得平均漲幅 <code>1.0214</code>。</p><ol><li>最後計算 RSI 指數</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RSI = ( 時間內平均漲幅 / (時間內平均漲幅) + (時間內平均跌幅) ) * 100</span><br><span class="line">    = ( 1.9143 / ( 1.9143 + 1.0214 )) * 100</span><br><span class="line">    = ( 1.9143 / 2.9357 ) * 100</span><br><span class="line">    = 0.652076166 * 100</span><br><span class="line">    = 65.2076 約等於 65.21</span><br></pre></td></tr></table></figure><h1 id="範例資料"><a href="#範例資料" class="headerlink" title="範例資料"></a>範例資料</h1><table><thead><tr><th align="left">日期</th><th align="right">收盤價</th><th align="right">漲幅</th><th align="right">跌幅</th><th align="right">漲幅平均</th><th align="right">跌幅平均</th><th align="right">RSI</th></tr></thead><tbody><tr><td align="left">111&#x2F;02&#x2F;18</td><td align="right">116.50</td><td align="right">4.5</td><td align="right"></td><td align="right">1.91</td><td align="right">1.02</td><td align="right">65.21</td></tr><tr><td align="left">111&#x2F;02&#x2F;17</td><td align="right">112.00</td><td align="right"></td><td align="right">0.5</td><td align="right">1.59</td><td align="right">1.02</td><td align="right">60.93</td></tr><tr><td align="left">111&#x2F;02&#x2F;16</td><td align="right">112.50</td><td align="right">1.5</td><td align="right"></td><td align="right">1.59</td><td align="right">1.16</td><td align="right">57.77</td></tr><tr><td align="left">111&#x2F;02&#x2F;15</td><td align="right">111.00</td><td align="right">0.5</td><td align="right"></td><td align="right">1.56</td><td align="right">1.16</td><td align="right">57.22</td></tr><tr><td align="left">111&#x2F;02&#x2F;14</td><td align="right">110.50</td><td align="right"></td><td align="right">1.5</td><td align="right">1.52</td><td align="right">1.31</td><td align="right">53.79</td></tr><tr><td align="left">111&#x2F;02&#x2F;11</td><td align="right">112.00</td><td align="right"></td><td align="right">2</td><td align="right">1.70</td><td align="right">1.20</td><td align="right">58.62</td></tr><tr><td align="left">111&#x2F;02&#x2F;10</td><td align="right">114.00</td><td align="right">2</td><td align="right"></td><td align="right">1.70</td><td align="right">1.27</td><td align="right">57.21</td></tr><tr><td align="left">111&#x2F;02&#x2F;09</td><td align="right">112.00</td><td align="right"></td><td align="right">0.5</td><td align="right">1.56</td><td align="right">1.56</td><td align="right">50.00</td></tr><tr><td align="left">111&#x2F;02&#x2F;08</td><td align="right">112.50</td><td align="right">4.5</td><td align="right"></td><td align="right">1.59</td><td align="right">1.52</td><td align="right">51.15</td></tr><tr><td align="left">111&#x2F;02&#x2F;07</td><td align="right">108.00</td><td align="right">9.4</td><td align="right"></td><td align="right">1.27</td><td align="right">1.66</td><td align="right">43.31</td></tr><tr><td align="left">111&#x2F;01&#x2F;26</td><td align="right">98.60</td><td align="right">3.5</td><td align="right"></td><td align="right">0.60</td><td align="right">1.74</td><td align="right">25.69</td></tr><tr><td align="left">111&#x2F;01&#x2F;25</td><td align="right">95.10</td><td align="right"></td><td align="right">4.8</td><td align="right">0.35</td><td align="right">1.77</td><td align="right">16.50</td></tr><tr><td align="left">111&#x2F;01&#x2F;24</td><td align="right">99.90</td><td align="right">0.9</td><td align="right"></td><td align="right">0.35</td><td align="right">1.46</td><td align="right">19.29</td></tr><tr><td align="left">111&#x2F;01&#x2F;21</td><td align="right">99.00</td><td align="right"></td><td align="right">5</td><td align="right">0.36</td><td align="right">1.46</td><td align="right">19.61</td></tr><tr><td align="left">111&#x2F;01&#x2F;20</td><td align="right">104.00</td><td align="right"></td><td align="right"></td><td align="right">0.36</td><td align="right">1.57</td><td align="right">18.52</td></tr><tr><td align="left">111&#x2F;01&#x2F;19</td><td align="right">104.00</td><td align="right"></td><td align="right">2.5</td><td align="right">0.36</td><td align="right">1.82</td><td align="right">16.39</td></tr><tr><td align="left">111&#x2F;01&#x2F;18</td><td align="right">106.50</td><td align="right">1</td><td align="right"></td><td align="right">0.36</td><td align="right">1.68</td><td align="right">17.54</td></tr><tr><td align="left">111&#x2F;01&#x2F;17</td><td align="right">105.50</td><td align="right"></td><td align="right">2</td><td align="right">0.46</td><td align="right">1.68</td><td align="right">21.67</td></tr><tr><td align="left">111&#x2F;01&#x2F;14</td><td align="right">107.50</td><td align="right">2.5</td><td align="right"></td><td align="right">0.46</td><td align="right">1.54</td><td align="right">23.21</td></tr><tr><td align="left">111&#x2F;01&#x2F;13</td><td align="right">105.00</td><td align="right"></td><td align="right">3</td><td align="right">0.29</td><td align="right">1.54</td><td align="right">15.69</td></tr><tr><td align="left">111&#x2F;01&#x2F;12</td><td align="right">108.00</td><td align="right"></td><td align="right">4</td><td align="right">0.29</td><td align="right">1.43</td><td align="right">16.67</td></tr><tr><td align="left">111&#x2F;01&#x2F;11</td><td align="right">112.00</td><td align="right">0.5</td><td align="right"></td><td align="right">0.29</td><td align="right">1.25</td><td align="right">18.60</td></tr><tr><td align="left">111&#x2F;01&#x2F;10</td><td align="right">111.50</td><td align="right"></td><td align="right">2</td><td align="right">0.50</td><td align="right">1.25</td><td align="right">28.57</td></tr><tr><td align="left">111&#x2F;01&#x2F;07</td><td align="right">113.50</td><td align="right"></td><td align="right">1</td><td align="right">0.50</td><td align="right">1.21</td><td align="right">29.17</td></tr><tr><td align="left">111&#x2F;01&#x2F;06</td><td align="right">114.50</td><td align="right"></td><td align="right">0.5</td><td align="right">0.61</td><td align="right">1.14</td><td align="right">34.69</td></tr><tr><td align="left">111&#x2F;01&#x2F;05</td><td align="right">115.00</td><td align="right"></td><td align="right">0.5</td><td align="right">0.61</td><td align="right">1.14</td><td align="right">34.69</td></tr><tr><td align="left">111&#x2F;01&#x2F;04</td><td align="right">115.50</td><td align="right">1</td><td align="right"></td><td align="right">0.79</td><td align="right">1.11</td><td align="right">41.51</td></tr><tr><td align="left">111&#x2F;01&#x2F;03</td><td align="right">114.50</td><td align="right"></td><td align="right">6.5</td><td align="right">0.71</td><td align="right">1.64</td><td align="right">30.30</td></tr></tbody></table><p>範例資料: 陽明(2609) 111&#x2F;02&#x2F;18 ~ 111&#x2F;01&#x2F;03 個股股價行情<br>資料來源: <a href="https://stock.wearn.com/cdata.asp?Year=111&month=02&kind=2609">https://stock.wearn.com/cdata.asp?Year=111&amp;month=02&amp;kind=2609</a></p>]]></content>
    
    
    <summary type="html">相對強弱指數(Relative Strength Index, RSI)</summary>
    
    
    
    <category term="投資理財" scheme="https://blog.init.engineer/categories/%E6%8A%95%E8%B3%87%E7%90%86%E8%B2%A1/"/>
    
    <category term="技術指標" scheme="https://blog.init.engineer/categories/%E6%8A%95%E8%B3%87%E7%90%86%E8%B2%A1/%E6%8A%80%E8%A1%93%E6%8C%87%E6%A8%99/"/>
    
    
    <category term="學習筆記" scheme="https://blog.init.engineer/tags/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="相對強弱指數" scheme="https://blog.init.engineer/tags/%E7%9B%B8%E5%B0%8D%E5%BC%B7%E5%BC%B1%E6%8C%87%E6%95%B8/"/>
    
    <category term="RSI" scheme="https://blog.init.engineer/tags/RSI/"/>
    
    <category term="Relative Strength Index" scheme="https://blog.init.engineer/tags/Relative-Strength-Index/"/>
    
  </entry>
  
  <entry>
    <title>【學習筆記】布林通道 Bollinger Bands</title>
    <link href="https://blog.init.engineer/posts/BollingerBands/"/>
    <id>https://blog.init.engineer/posts/BollingerBands/</id>
    <published>2022-02-20T16:00:00.000Z</published>
    <updated>2022-02-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>布林通道(Bollinger Bands, BBands)</p><h1 id="計算方式"><a href="#計算方式" class="headerlink" title="計算方式"></a>計算方式</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">中線: 20SMA</span><br><span class="line">上線: 20SMA + 2 倍標準差</span><br><span class="line">下線: 20SMA - 2 倍標準差</span><br></pre></td></tr></table></figure><h2 id="舉例陽明-2609-111-x2F-02-x2F-18-的布林通道"><a href="#舉例陽明-2609-111-x2F-02-x2F-18-的布林通道" class="headerlink" title="舉例陽明(2609) 111&#x2F;02&#x2F;18 的布林通道"></a>舉例陽明(2609) 111&#x2F;02&#x2F;18 的布林通道</h2><ol><li>先計算中線，也就是 20 日簡單移動平均線</li></ol><p><code>111/02/18</code> 的收盤價格為 <code>116.50</code><br><code>111/02/17</code> 的收盤價格為 <code>112.00</code><br><code>111/02/16</code> 的收盤價格為 <code>112.50</code><br><code>111/02/15</code> 的收盤價格為 <code>111.00</code><br><code>111/02/14</code> 的收盤價格為 <code>110.50</code><br><code>111/02/11</code> 的收盤價格為 <code>112.00</code><br><code>111/02/10</code> 的收盤價格為 <code>114.00</code><br><code>111/02/09</code> 的收盤價格為 <code>112.00</code><br><code>111/02/08</code> 的收盤價格為 <code>112.50</code><br><code>111/02/07</code> 的收盤價格為 <code>108.00</code><br><code>111/01/26</code> 的收盤價格為 <code>98.60</code><br><code>111/01/25</code> 的收盤價格為 <code>95.10</code><br><code>111/01/24</code> 的收盤價格為 <code>99.90</code><br><code>111/01/21</code> 的收盤價格為 <code>99.00</code><br><code>111/01/20</code> 的收盤價格為 <code>104.00</code><br><code>111/01/19</code> 的收盤價格為 <code>104.00</code><br><code>111/01/18</code> 的收盤價格為 <code>106.50</code><br><code>111/01/17</code> 的收盤價格為 <code>105.50</code><br><code>111/01/14</code> 的收盤價格為 <code>107.50</code><br><code>111/01/13</code> 的收盤價格為 <code>105.00</code></p><p>以上 <code>20</code> 天的收盤價加起來等於 <code>2,146.10</code>，並將其除以 <code>20</code> 等於 <code>107.31</code>，因此 <code>111/02/18</code> 的 <code>5 日移動平均</code> 為 <code>107.31</code>。</p><p>可以參考 <a href="/posts/SimpleMovingAverage/">【學習筆記】簡單移動平均線 Simple Moving Average</a></p><ol start="2"><li>計算上線 &#x3D; 20SMA + 2 倍標準差</li></ol><p>標準差的計算方式為將 20 天的收盤價格，<code>(收盤價格 - 平均價格) ^ 2</code>，並將其相加後，除以資料數量，最後將其平方根。</p><p><code>111/02/18</code> 將 <code>(收盤價格 - 平均價格)^2</code> &#x3D; <code>(116.50 - 107.31)^2</code> &#x3D; <code>84.55</code><br><code>111/02/17</code> 將 <code>(收盤價格 - 平均價格)^2</code> &#x3D; <code>(112.00 - 107.31)^2</code> &#x3D; <code>22.04</code><br><code>111/02/16</code> 將 <code>(收盤價格 - 平均價格)^2</code> &#x3D; <code>(112.50 - 107.31)^2</code> &#x3D; <code>26.99</code><br><code>111/02/15</code> 將 <code>(收盤價格 - 平均價格)^2</code> &#x3D; <code>(111.00 - 107.31)^2</code> &#x3D; <code>13.65</code><br><code>111/02/14</code> 將 <code>(收盤價格 - 平均價格)^2</code> &#x3D; <code>(110.50 - 107.31)^2</code> &#x3D; <code>10.21</code><br><code>111/02/11</code> 將 <code>(收盤價格 - 平均價格)^2</code> &#x3D; <code>(112.00 - 107.31)^2</code> &#x3D; <code>22.04</code><br><code>111/02/10</code> 將 <code>(收盤價格 - 平均價格)^2</code> &#x3D; <code>(114.00 - 107.31)^2</code> &#x3D; <code>44.82</code><br><code>111/02/09</code> 將 <code>(收盤價格 - 平均價格)^2</code> &#x3D; <code>(112.00 - 107.31)^2</code> &#x3D; <code>22.04</code><br><code>111/02/08</code> 將 <code>(收盤價格 - 平均價格)^2</code> &#x3D; <code>(112.50 - 107.31)^2</code> &#x3D; <code>26.99</code><br><code>111/02/07</code> 將 <code>(收盤價格 - 平均價格)^2</code> &#x3D; <code>(108.00 - 107.31)^2</code> &#x3D; <code>0.48</code><br><code>111/01/26</code> 將 <code>(收盤價格 - 平均價格)^2</code> &#x3D; <code>(98.60 - 107.31)^2</code> &#x3D; <code>75.78</code><br><code>111/01/25</code> 將 <code>(收盤價格 - 平均價格)^2</code> &#x3D; <code>(95.10 - 107.31)^2</code> &#x3D; <code>148.96</code><br><code>111/01/24</code> 將 <code>(收盤價格 - 平均價格)^2</code> &#x3D; <code>(99.90 - 107.31)^2</code> &#x3D; <code>54.83</code><br><code>111/01/21</code> 將 <code>(收盤價格 - 平均價格)^2</code> &#x3D; <code>(99.00 - 107.31)^2</code> &#x3D; <code>68.97</code><br><code>111/01/20</code> 將 <code>(收盤價格 - 平均價格)^2</code> &#x3D; <code>(104.00 - 107.31)^2</code> &#x3D; <code>10.92</code><br><code>111/01/19</code> 將 <code>(收盤價格 - 平均價格)^2</code> &#x3D; <code>(104.00 - 107.31)^2</code> &#x3D; <code>10.92</code><br><code>111/01/18</code> 將 <code>(收盤價格 - 平均價格)^2</code> &#x3D; <code>(106.50 - 107.31)^2</code> &#x3D; <code>0.65</code><br><code>111/01/17</code> 將 <code>(收盤價格 - 平均價格)^2</code> &#x3D; <code>(105.50 - 107.31)^2</code> &#x3D; <code>3.26</code><br><code>111/01/14</code> 將 <code>(收盤價格 - 平均價格)^2</code> &#x3D; <code>(107.50 - 107.31)^2</code> &#x3D; <code>0.04</code><br><code>111/01/13</code> 將 <code>(收盤價格 - 平均價格)^2</code> &#x3D; <code>(105.00 - 107.31)^2</code> &#x3D; <code>5.31</code></p><p>將以上數值加總後，得到 <code>653.47</code>，並將其除以資料數量 <code>20</code> 後會獲得 <code>32.67</code>，最後再將其平方根後會獲得 <code>5.72</code> 即是標準差。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">上線 = 20SMA + (SQRT * 2)</span><br><span class="line">    = 107.31 + (5.72 * 2)</span><br><span class="line">    = 107.31 + 11.44</span><br><span class="line">    = 118.74</span><br></pre></td></tr></table></figure><ol start="3"><li>計算下線 &#x3D; 20SMA - 2 倍標準差</li></ol><p>根據上面我們獲得的標準差 <code>5.72</code> 繼續計算</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下線 = 20SMA - (SQRT * 2)</span><br><span class="line">    = 107.31 - (5.72 * 2)</span><br><span class="line">    = 107.31 - 11.44</span><br><span class="line">    = 95.87</span><br></pre></td></tr></table></figure><h1 id="範例資料"><a href="#範例資料" class="headerlink" title="範例資料"></a>範例資料</h1><table><thead><tr><th align="left">日期</th><th align="right">開盤價</th><th align="right">最高價</th><th align="right">最低價</th><th align="right">收盤價</th><th align="right">成交量</th><th align="right">中線</th><th align="right">上線</th><th align="right">下線</th><th align="right">標準差</th></tr></thead><tbody><tr><td align="left">111&#x2F;02&#x2F;18</td><td align="right">112.00</td><td align="right">118.00</td><td align="right">111.00</td><td align="right">116.50</td><td align="right">103,926</td><td align="right">107.31</td><td align="right">118.74</td><td align="right">95.87</td><td align="right">5.72</td></tr><tr><td align="left">111&#x2F;02&#x2F;17</td><td align="right">113.00</td><td align="right">114.50</td><td align="right">111.50</td><td align="right">112.00</td><td align="right">39,731</td><td align="right">106.88</td><td align="right">117.52</td><td align="right">96.24</td><td align="right">5.32</td></tr><tr><td align="left">111&#x2F;02&#x2F;16</td><td align="right">113.50</td><td align="right">113.50</td><td align="right">112.00</td><td align="right">112.50</td><td align="right">30,104</td><td align="right">106.88</td><td align="right">117.52</td><td align="right">96.24</td><td align="right">5.32</td></tr><tr><td align="left">111&#x2F;02&#x2F;15</td><td align="right">112.00</td><td align="right">112.50</td><td align="right">110.50</td><td align="right">111.00</td><td align="right">31,536</td><td align="right">106.83</td><td align="right">117.37</td><td align="right">96.29</td><td align="right">5.27</td></tr><tr><td align="left">111&#x2F;02&#x2F;14</td><td align="right">111.50</td><td align="right">115.50</td><td align="right">110.50</td><td align="right">110.50</td><td align="right">71,168</td><td align="right">106.96</td><td align="right">117.75</td><td align="right">96.16</td><td align="right">5.40</td></tr><tr><td align="left">111&#x2F;02&#x2F;11</td><td align="right">114.00</td><td align="right">115.00</td><td align="right">112.00</td><td align="right">112.00</td><td align="right">55,575</td><td align="right">107.16</td><td align="right">118.34</td><td align="right">95.97</td><td align="right">5.59</td></tr><tr><td align="left">111&#x2F;02&#x2F;10</td><td align="right">113.50</td><td align="right">114.50</td><td align="right">111.50</td><td align="right">114.00</td><td align="right">42,037</td><td align="right">107.31</td><td align="right">118.82</td><td align="right">95.79</td><td align="right">5.76</td></tr><tr><td align="left">111&#x2F;02&#x2F;09</td><td align="right">114.00</td><td align="right">115.50</td><td align="right">111.00</td><td align="right">112.00</td><td align="right">62,258</td><td align="right">107.38</td><td align="right">119.09</td><td align="right">95.67</td><td align="right">5.86</td></tr><tr><td align="left">111&#x2F;02&#x2F;08</td><td align="right">109.00</td><td align="right">116.50</td><td align="right">108.50</td><td align="right">112.50</td><td align="right">155,773</td><td align="right">107.51</td><td align="right">119.46</td><td align="right">95.55</td><td align="right">5.98</td></tr><tr><td align="left">111&#x2F;02&#x2F;07</td><td align="right">100.50</td><td align="right">108.00</td><td align="right">100.00</td><td align="right">108.00</td><td align="right">59,599</td><td align="right">107.93</td><td align="right">121.11</td><td align="right">94.75</td><td align="right">6.59</td></tr><tr><td align="left">111&#x2F;01&#x2F;26</td><td align="right">96.10</td><td align="right">99.90</td><td align="right">96.10</td><td align="right">98.60</td><td align="right">51,052</td><td align="right">108.76</td><td align="right">123.78</td><td align="right">93.73</td><td align="right">7.51</td></tr><tr><td align="left">111&#x2F;01&#x2F;25</td><td align="right">99.00</td><td align="right">99.10</td><td align="right">95.10</td><td align="right">95.10</td><td align="right">48,479</td><td align="right">110.08</td><td align="right">125.92</td><td align="right">94.23</td><td align="right">7.92</td></tr><tr><td align="left">111&#x2F;01&#x2F;24</td><td align="right">97.00</td><td align="right">101.00</td><td align="right">96.50</td><td align="right">99.90</td><td align="right">48,844</td><td align="right">111.45</td><td align="right">126.60</td><td align="right">96.29</td><td align="right">7.58</td></tr><tr><td align="left">111&#x2F;01&#x2F;21</td><td align="right">103.00</td><td align="right">103.50</td><td align="right">99.00</td><td align="right">99.00</td><td align="right">65,444</td><td align="right">112.58</td><td align="right">127.48</td><td align="right">97.67</td><td align="right">7.45</td></tr><tr><td align="left">111&#x2F;01&#x2F;20</td><td align="right">104.00</td><td align="right">105.50</td><td align="right">103.50</td><td align="right">104.00</td><td align="right">28,239</td><td align="right">113.75</td><td align="right">127.88</td><td align="right">99.62</td><td align="right">7.06</td></tr><tr><td align="left">111&#x2F;01&#x2F;19</td><td align="right">105.00</td><td align="right">107.50</td><td align="right">103.00</td><td align="right">104.00</td><td align="right">51,633</td><td align="right">114.75</td><td align="right">128.81</td><td align="right">100.69</td><td align="right">7.03</td></tr><tr><td align="left">111&#x2F;01&#x2F;18</td><td align="right">104.50</td><td align="right">108.00</td><td align="right">104.00</td><td align="right">106.50</td><td align="right">31,750</td><td align="right">115.83</td><td align="right">129.71</td><td align="right">101.94</td><td align="right">6.94</td></tr><tr><td align="left">111&#x2F;01&#x2F;17</td><td align="right">106.00</td><td align="right">106.50</td><td align="right">104.50</td><td align="right">105.50</td><td align="right">30,165</td><td align="right">116.60</td><td align="right">130.04</td><td align="right">103.16</td><td align="right">6.72</td></tr><tr><td align="left">111&#x2F;01&#x2F;14</td><td align="right">105.00</td><td align="right">107.50</td><td align="right">103.00</td><td align="right">107.50</td><td align="right">55,764</td><td align="right">117.50</td><td align="right">130.24</td><td align="right">104.76</td><td align="right">6.37</td></tr><tr><td align="left">111&#x2F;01&#x2F;13</td><td align="right">108.50</td><td align="right">109.50</td><td align="right">105.00</td><td align="right">105.00</td><td align="right">47,851</td><td align="right">118.23</td><td align="right">130.24</td><td align="right">106.21</td><td align="right">6.01</td></tr></tbody></table><p>範例資料: 陽明(2609) 111&#x2F;02&#x2F;18 ~ 111&#x2F;01&#x2F;13 個股股價行情<br>資料來源: <a href="https://stock.wearn.com/cdata.asp?Year=111&month=02&kind=2609">https://stock.wearn.com/cdata.asp?Year=111&amp;month=02&amp;kind=2609</a></p>]]></content>
    
    
    <summary type="html">布林通道(Bollinger Bands, BBands)</summary>
    
    
    
    <category term="投資理財" scheme="https://blog.init.engineer/categories/%E6%8A%95%E8%B3%87%E7%90%86%E8%B2%A1/"/>
    
    <category term="技術指標" scheme="https://blog.init.engineer/categories/%E6%8A%95%E8%B3%87%E7%90%86%E8%B2%A1/%E6%8A%80%E8%A1%93%E6%8C%87%E6%A8%99/"/>
    
    
    <category term="學習筆記" scheme="https://blog.init.engineer/tags/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="布林通道" scheme="https://blog.init.engineer/tags/%E5%B8%83%E6%9E%97%E9%80%9A%E9%81%93/"/>
    
    <category term="BBands" scheme="https://blog.init.engineer/tags/BBands/"/>
    
    <category term="Bollinger Bands" scheme="https://blog.init.engineer/tags/Bollinger-Bands/"/>
    
  </entry>
  
  <entry>
    <title>【學習筆記】隨機指標 Stochastic Oscillator</title>
    <link href="https://blog.init.engineer/posts/StochasticOscillator/"/>
    <id>https://blog.init.engineer/posts/StochasticOscillator/</id>
    <published>2022-02-19T16:00:00.000Z</published>
    <updated>2022-02-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>隨機指標(Stochastic Oscillator, KD)</p><h1 id="計算方式"><a href="#計算方式" class="headerlink" title="計算方式"></a>計算方式</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">RSV = ( ( CP – Day N Low ) / (Day N High – Day N Low ) ) * 100</span><br><span class="line"></span><br><span class="line">K 值 = ( 2/3 * ( 昨日 K 值 ) ) + ( 1/3 * ( 今日 RSV ) )</span><br><span class="line"></span><br><span class="line">D 值 = ( 2/3 * ( 昨日 D 值 ) ) + ( 1/3 * ( 今日 K 值 ) )</span><br><span class="line"></span><br><span class="line">RSV = 未成熟隨機值 Raw Stochastic Value, RSV</span><br><span class="line">N : 天數</span><br><span class="line">CP : 收盤價</span><br><span class="line">Day N Low : N 天以來的最低價</span><br><span class="line">Day N High : N 天以來的最高價</span><br></pre></td></tr></table></figure><h2 id="舉例陽明-2609-111-x2F-02-x2F-18-的-KD，預設週期-9-天"><a href="#舉例陽明-2609-111-x2F-02-x2F-18-的-KD，預設週期-9-天" class="headerlink" title="舉例陽明(2609) 111&#x2F;02&#x2F;18 的 KD，預設週期 9 天"></a>舉例陽明(2609) 111&#x2F;02&#x2F;18 的 KD，預設週期 9 天</h2><ol><li>先計算 RSV 值</li></ol><p><code>111/02/18</code> 的收盤價為 <code>116.50</code> (9 天以來的最高價)<br><code>111/02/17</code> 的收盤價為 <code>112.00</code><br><code>111/02/16</code> 的收盤價為 <code>112.50</code><br><code>111/02/15</code> 的收盤價為 <code>111.00</code><br><code>111/02/14</code> 的收盤價為 <code>110.50</code> (9 天以來的最低價)<br><code>111/02/11</code> 的收盤價為 <code>112.00</code><br><code>111/02/10</code> 的收盤價為 <code>114.00</code><br><code>111/02/09</code> 的收盤價為 <code>112.00</code><br><code>111/02/08</code> 的收盤價為 <code>112.50</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RSV = ( ( CP – Day N Low ) / (Day N High – Day N Low ) ) * 100</span><br><span class="line">    = ( ( 116.50 - 110.50 ) / ( 116.50 - 110.50 ) ) * 100</span><br><span class="line">    = ( 6.00 / 6.00 ) * 100</span><br><span class="line">    = 1.00 * 100</span><br><span class="line">    = 100.00</span><br></pre></td></tr></table></figure><ol start="2"><li>再計算 K 值</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">K = ( ( 2 / 3 ) * ( 昨日 K 值 ) ) + ( ( 1 / 3 ) * ( 今日 RSV ) )</span><br><span class="line">  = ( ( 2 / 3 ) * 67.63 ) + ( ( 1 / 3 ) * 100.00 )</span><br><span class="line">  = 45.0866 + 33.3333</span><br><span class="line">  = 78.4199 約等於 78.42</span><br></pre></td></tr></table></figure><ol start="3"><li>最後再計算 D 值</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D = ( ( 2 / 3 ) * ( 昨日 D 值 ) ) + ( ( 1 / 3 ) * ( 今日 K 值 ) )</span><br><span class="line">  = ( ( 2 / 3 ) * ( 74.06 ) ) + ( ( 1 / 3 ) * ( 78.42 ) )</span><br><span class="line">  = 49.3733 + 26.14</span><br><span class="line">  = 75.5133 約等於 75.51</span><br></pre></td></tr></table></figure><h1 id="範例資料"><a href="#範例資料" class="headerlink" title="範例資料"></a>範例資料</h1><table><thead><tr><th align="left">日期</th><th align="right">開盤價</th><th align="right">最高價</th><th align="right">最低價</th><th align="right">收盤價</th><th align="right">成交量</th><th align="right">K</th><th align="right">D</th><th align="right">RSV</th></tr></thead><tbody><tr><td align="left">111&#x2F;02&#x2F;18</td><td align="right">112.00</td><td align="right">118.00</td><td align="right">111.00</td><td align="right">116.50</td><td align="right">103,926</td><td align="right">78.42</td><td align="right">75.51</td><td align="right">100.00</td></tr><tr><td align="left">111&#x2F;02&#x2F;17</td><td align="right">113.00</td><td align="right">114.50</td><td align="right">111.50</td><td align="right">112.00</td><td align="right">39,731</td><td align="right">67.63</td><td align="right">74.06</td><td align="right">42.86</td></tr><tr><td align="left">111&#x2F;02&#x2F;16</td><td align="right">113.50</td><td align="right">113.50</td><td align="right">112.00</td><td align="right">112.50</td><td align="right">30,104</td><td align="right">80.02</td><td align="right">77.27</td><td align="right">75.00</td></tr><tr><td align="left">111&#x2F;02&#x2F;15</td><td align="right">112.00</td><td align="right">112.50</td><td align="right">110.50</td><td align="right">111.00</td><td align="right">31,536</td><td align="right">82.53</td><td align="right">75.90</td><td align="right">80.52</td></tr><tr><td align="left">111&#x2F;02&#x2F;14</td><td align="right">111.50</td><td align="right">115.50</td><td align="right">110.50</td><td align="right">110.50</td><td align="right">71,168</td><td align="right">83.54</td><td align="right">72.59</td><td align="right">81.48</td></tr><tr><td align="left">111&#x2F;02&#x2F;11</td><td align="right">114.00</td><td align="right">115.00</td><td align="right">112.00</td><td align="right">112.00</td><td align="right">55,575</td><td align="right">84.56</td><td align="right">67.11</td><td align="right">89.42</td></tr><tr><td align="left">111&#x2F;02&#x2F;10</td><td align="right">113.50</td><td align="right">114.50</td><td align="right">111.50</td><td align="right">114.00</td><td align="right">42,037</td><td align="right">82.14</td><td align="right">58.38</td><td align="right">100.00</td></tr><tr><td align="left">111&#x2F;02&#x2F;09</td><td align="right">114.00</td><td align="right">115.50</td><td align="right">111.00</td><td align="right">112.00</td><td align="right">62,258</td><td align="right">73.21</td><td align="right">46.51</td><td align="right">97.13</td></tr><tr><td align="left">111&#x2F;02&#x2F;08</td><td align="right">109.00</td><td align="right">116.50</td><td align="right">108.50</td><td align="right">112.50</td><td align="right">155,773</td><td align="right">61.24</td><td align="right">33.16</td><td align="right">100.00</td></tr><tr><td align="left">111&#x2F;02&#x2F;07</td><td align="right">100.50</td><td align="right">108.00</td><td align="right">100.00</td><td align="right">108.00</td><td align="right">59,599</td><td align="right">41.87</td><td align="right">19.12</td><td align="right">100.00</td></tr></tbody></table><p>範例資料: 陽明(2609) 111&#x2F;02&#x2F;18 ~ 111&#x2F;02&#x2F;07 個股股價行情<br>資料來源: <a href="https://stock.wearn.com/cdata.asp?Year=111&month=02&kind=2609">https://stock.wearn.com/cdata.asp?Year=111&amp;month=02&amp;kind=2609</a></p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://zh.wikipedia.org/wiki/KD%E6%8C%87%E6%A8%99">KD指標 - 維基百科，自由的百科全書</a></li><li><a href="https://augustime.com/stochastic-oscillator/">KD值怎麼看？3道計算公式＋參數設定教學</a></li></ul>]]></content>
    
    
    <summary type="html">隨機指標(Stochastic Oscillator, KD)</summary>
    
    
    
    <category term="投資理財" scheme="https://blog.init.engineer/categories/%E6%8A%95%E8%B3%87%E7%90%86%E8%B2%A1/"/>
    
    <category term="技術指標" scheme="https://blog.init.engineer/categories/%E6%8A%95%E8%B3%87%E7%90%86%E8%B2%A1/%E6%8A%80%E8%A1%93%E6%8C%87%E6%A8%99/"/>
    
    
    <category term="學習筆記" scheme="https://blog.init.engineer/tags/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="隨機指標" scheme="https://blog.init.engineer/tags/%E9%9A%A8%E6%A9%9F%E6%8C%87%E6%A8%99/"/>
    
    <category term="KD" scheme="https://blog.init.engineer/tags/KD/"/>
    
    <category term="Stochastic Oscillator" scheme="https://blog.init.engineer/tags/Stochastic-Oscillator/"/>
    
  </entry>
  
  <entry>
    <title>如何將 Hexo 部落格架設到 GitHub Pages 上</title>
    <link href="https://blog.init.engineer/posts/HostYourBlogOnGitHub/"/>
    <id>https://blog.init.engineer/posts/HostYourBlogOnGitHub/</id>
    <published>2022-02-17T16:00:00.000Z</published>
    <updated>2022-02-17T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>前陣子嘗試將部落格更換框架、更換主題，從 <a href="https://jekyllrb.com/">Jekyll</a> 框架改成了 <a href="https://hexo.io/">Hexo</a> 這個框架，從 <a href="https://github.com/thiagorossener/jekflix-template/">Jekflix</a> 這主題改變成了 <a href="https://github.com/jerryc127/hexo-theme-butterfly/">Butterfly</a> 這主題，更適合當做一個技術部落格來使用，如果對於之前的 <a href="https://jekyllrb.com/">Jekyll</a> 有興趣，可以參考一下幾年前寫的「<a href="/posts/HowToCreateBlogOnGithub">如何在 GitHub 中建造一個屬於自己的部落格</a>」這篇文章，而本篇主要概述從建立起一個自己的 <a href="https://hexo.io/">Hexo</a> 部落格、選定主題樣式，到最後將自己建立好的部落格推送到 <a href="https://pages.github.com/">GitHub Pages</a> 上面，循序漸進的步驟，從架設 Hexo 到部屬 <a href="https://pages.github.com/">GitHub Pages</a>。</p><h1 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h1><p>首先因為 <a href="https://hexo.io/">Hexo</a> 需要使用 <a href="https://www.npmjs.com/">npm</a>(Node.js 預設的套件管理器)，所以我們可以先到 <a href="https://nodejs.org/">Node.js</a> 去下載，安裝完畢後，直接在終端機(Terminal)輸入 <code>node -v</code> 並執行，看看是否有版本資訊顯示出來，如果有就說明順利安裝完畢了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p><img src="/img/posts/HostYourBlogOnGitHub/1.png" alt="node -v"></p><h1 id="建置-Hexo-部落格專案"><a href="#建置-Hexo-部落格專案" class="headerlink" title="建置 Hexo 部落格專案"></a>建置 Hexo 部落格專案</h1><p>接下來我們要透過 <a href="https://www.npmjs.com/">npm</a> 套件管理器來安裝 <a href="https://hexo.io/">Hexo</a> 這個框架的 CLI(命令列介面 Command-Line Interface, CLI)，因此我們要在終端機(Terminal)輸入 <code>npm install hexo-cli -g</code> 並執行，正常情況下你會獲得如同下圖這樣的輸出結果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p><img src="/img/posts/HostYourBlogOnGitHub/2.png" alt="npm install hexo-cli -g"></p><p>完成了 <code>hexo-cli</code> 的安裝後，我們接下來可以在終端機(Terminal)當中輸入 <code>hexo</code> 並執行看看，如果出現了相關功能的內容提示，那代表你已經將 <code>hexo-cli</code> 安裝完成了，接下來我們可以透過它來建立一個部落格專案，通常我會建議專案以你部落格的網址作為名稱，因為我們最終要將部落格部屬到 <a href="https://pages.github.com/">GitHub Pages</a> 當中，到時候的網址將會是 <code>YOUR_ACCOUNT.github.io</code>，其中「YOUR_ACCOUNT」指的是你的 <a href="https://github.com/">GitHub</a> 帳號，舉例來說我的 <a href="https://github.com/">GitHub</a> 是「Kantai235」，因此我的專案名稱、<a href="https://pages.github.com/">GitHub Pages</a> 網址就會是「<a href="Kantai235.github.io">Kantai235.github.io</a>」。</p><p>瞭解了專案名稱以後，我們要來建立部落格專案，在終端機(Terminal)當中輸入 <code>hexo init something.github.io</code> 就會開始建立，接下來在你執行終端機(Terminal)指令的目錄下就會多出一個「something.github.io」的資料夾，也就是你的部落格專案。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo</span><br><span class="line">hexo init something.github.io</span><br></pre></td></tr></table></figure><p><img src="/img/posts/HostYourBlogOnGitHub/3.png" alt="hexo init something.github.io"></p><p>接著我們需要幫專案安裝相關的依賴套件，因此在終端機(Terminal)當中先 <code>cd something.github.io</code> 前往你的部落格專案資料夾當中，然後透過 <code>npm install</code> 來讓它自動執行安裝相關的依賴套件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd something.github.io</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="/img/posts/HostYourBlogOnGitHub/4.png" alt="npm install"></p><p>既然該安裝的依賴套件都處理得差不端了，我們接下來可以試著在本機運行看看成品如何，我們只要在終端機(Terminal)當中輸入 <code>hexo serve</code> 來運行專案，在正常的情況下，你會發現它運行後似乎沒有要停止的意思，而且還有一個 localhost 的網址出現，這就代表 <a href="https://hexo.io/">Hexo</a> 已經在本地端運行了，只要到瀏覽器當中輸入「<a href="http://localhost:4000/">http://localhost:4000/</a>」就可以直接瀏覽你剛剛建立的部落格了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure><p><img src="/img/posts/HostYourBlogOnGitHub/5.png" alt="hexo serve"></p><p><img src="/img/posts/HostYourBlogOnGitHub/6.png" alt="localhost:4000"></p><p>接著如果你想要停止 <a href="https://hexo.io/">Hexo</a> 運行的話，只需要在終端機(Terminal)當中，同時按下鍵盤上的 <code>Ctrl</code> + <code>C</code> 這兩個按鍵即可。</p><h1 id="使用-Butterfly-主題"><a href="#使用-Butterfly-主題" class="headerlink" title="使用 Butterfly 主題"></a>使用 Butterfly 主題</h1><p>如果用 <a href="https://hexo.io/">Hexo</a> 原生樣式的話，那部落格就太單調了，因此我們這裡以 <a href="https://github.com/jerryc127/hexo-theme-butterfly/">Butterfly</a> 這主題作為套用的範例，我們需要透過 <code>npm</code> 來安裝相關的主題、套件，只要在終端機(Terminal)當中輸入 <code>npm install hexo-theme-butterfly hexo-renderer-pug hexo-renderer-stylus --save</code> 安裝 <code>hexo-theme-butterfly</code>、<code>hexo-renderer-pug</code> 以及 <code>hexo-renderer-stylus</code> 這三個套件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-theme-butterfly hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p><img src="/img/posts/HostYourBlogOnGitHub/7.png" alt="npm install hexo-theme-butterfly hexo-renderer-pug hexo-renderer-stylus --save"></p><p>接著我們需要將部落格專案的主題樣式從預設主題改成 <a href="https://github.com/jerryc127/hexo-theme-butterfly/">Butterfly</a> 主題，因此我們需要打開部落格專案的 <code>_config.yml</code> 檔案，並且去找到 <code>theme: landscape</code> 將其修改為 <code>theme: butterfly</code> 並儲存。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>接著我們再嘗試運行一次專案，一樣在終端機(Terminal)當中輸入 <code>hexo serve</code> 即可運行，這裡會發現終端機(Terminal)輸出的內容跟剛剛不太一樣了，這代表你的主題套用已經成功，只要在瀏覽器當中輸入「<a href="http://localhost:4000/">http://localhost:4000/</a>」就可以直接瀏覽你剛剛套用 <a href="https://github.com/jerryc127/hexo-theme-butterfly/">Butterfly</a> 主題的部落格了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure><p><img src="/img/posts/HostYourBlogOnGitHub/8.png" alt="hexo serve"></p><p><img src="/img/posts/HostYourBlogOnGitHub/9.png" alt="localhost:4000"></p><p>最後我們要嘗試建立一篇自己的文章，我們只要在部落格專案當中的 <code>source/_posts</code> 這資料夾底下新增 <a href="https://markdown.tw/">Markdown</a> 檔案，檔案名稱就是你的文章連結，而副檔名需要是 <code>md</code> 或 <code>markdown</code>，這邊舉例我們新增了一個 <code>demo.md</code> 檔案，並且輸入以下內容。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="section">title: Demo</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">這是一篇測試文章。</span><br></pre></td></tr></table></figure><p>這樣我們就成功建立了一篇文章，並且這篇文章的網址會是 <code>http://localhost:4000/2022/02/18/demo/</code> 這樣的路徑，這是因為在設定當中文章的網址是「<code>/:year/:month/:day/:title/</code>」這樣的編排方式。</p><p><img src="/img/posts/HostYourBlogOnGitHub/10.png" alt="Demo 文章"></p><p>如果不喜歡這樣的路徑，我們可以到 <code>_config.yml</code> 檔案當中去修改 <code>permalink</code> 的資訊，舉例來說將 <code>:year/:month/:day/:title/</code> 修改為 <code>posts/:title/</code>，那麼網址就會從 <code>/2022/02/18/demo/</code> 變成 <code>/posts/demo/</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:title/</span></span><br></pre></td></tr></table></figure><h1 id="部屬到-GitHub-Pages"><a href="#部屬到-GitHub-Pages" class="headerlink" title="部屬到 GitHub Pages"></a>部屬到 GitHub Pages</h1><p>最後我們要把部落格部屬到 <a href="https://pages.github.com/">GitHub Pages</a> 當中，對於軟體工程師而言，全部的過程都活在終端機的世界當中，是一件習以為常的事情，但對於其他人來說，就不見得那麼親民了，所以這邊我們選擇使用 <a href="https://desktop.github.com/">GitHub Desktop</a> 這具有圖形化介面的軟體來操作 <a href="https://github.com/">GitHub</a> 儲存庫，首先我們需要先去註冊 <a href="https://github.com/">GitHub</a> 帳號，再來安裝 <a href="https://desktop.github.com/">GitHub Desktop</a> 並且登入 <a href="https://github.com/">GitHub</a> 當中，然後選擇「Create a new repository ...(新增一個新的儲存庫 ...)」，「Name(專案名稱)」的部分必須輸入 <code>YOUR_ACCOUNT.github.io</code>，其中「YOUR_ACCOUNT」指的是你的 <a href="https://github.com/">GitHub</a> 帳號，然後「Local path(本地專案路徑)」需要選擇你的部落格專案，最後按下 <code>Create repository(新增儲存庫)</code> 即可。</p><p><img src="/img/posts/HostYourBlogOnGitHub/11.png" alt="Create a new repository"></p><p><img src="/img/posts/HostYourBlogOnGitHub/12.png" alt="Source Code"></p><p>這時候我們就已經幫部落格專案建立起了 Git 版本控制的機制，我們只要按下 <a href="https://desktop.github.com/">GitHub Desktop</a> 軟體中上方的 <code>Publish repository</code> 就可以將部落格上傳到 <a href="https://github.com/">GitHub</a> 當中，可以透過瀏覽器輸入網址 <code>https://github.com/YOUR_ACCOUNT/YOUR_ACCOUNT.github.io</code> 來觀看你的專案，以我自己部落格專案的網址來說是「<a href="https://github.com/Kantai235/Kantai235.github.io">https://github.com/Kantai235/Kantai235.github.io</a>」。</p><p><img src="/img/posts/HostYourBlogOnGitHub/13.png" alt="Publish repository"></p><p>接下來我們需要設定專案的成品輸出要部屬到 <a href="https://github.com/">GitHub</a> 的哪個專案、哪個分支當中，所以我們需要在部落格專案的 <code>_config.yml</code> 當中，去修改 <code>deploy</code> 的資訊如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:YOUR_ACCOUNT/YOUR_ACCOUNT.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">github-pages</span></span><br></pre></td></tr></table></figure><p>再來我們回到部落格專案的終端機(Terminal)當中，我們現在已經將部落格的原始碼丟到了 <a href="https://github.com/">GitHub</a> 當中，因此我們需要先透過 <code>npm</code> 來安裝 <code>hexo-deployer-git</code> 這個套件，直接在終端機(Terminal)當中輸入 <code>npm install hexo-deployer-git</code> 即可，接下來我們只需要執行 <code>hexo deploy</code> 就可以部屬網頁到同一個專案下，所以你的部落格專案會有兩個分支，分別是 <code>main(原始碼)</code> 以及 <code>github-page(網頁輸出)</code>，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p><img src="/img/posts/HostYourBlogOnGitHub/14.png" alt="hexo deploy"></p><p>終於到了最後一個步驟，就是跟 <a href="https://github.com/">GitHub</a> 說你的專案是個 <a href="https://pages.github.com/">GitHub Pages</a> 的專案，並且要讀取哪個分支來作為網頁輸出，因此你需要打開瀏覽器去找你的 <a href="https://github.com/">GitHub</a> 儲存庫，並且點選 <code>Settings(設定)</code> 的分頁，找到 <code>Pages</code>，如果直接輸入網址的話，網址是 <code>https://github.com/YOUR_ACCOUNT/YOUR_ACCOUNT.github.io/settings/pages</code>，記得把「YOUR_ACCOUNT」替換掉。</p><p>然後將 <code>Branch(分支)</code> 的選項改為 <code>github-pages</code> 並且 <code>Save(儲存)</code>，等待幾分鐘的時間就可以部屬成功了，打開瀏覽器輸入網址 <code>https://YOUR_ACCOUNT.github.io</code> 就可以瀏覽到你剛剛所建立的部落格了。</p><p><img src="/img/posts/HostYourBlogOnGitHub/15.png" alt="GitHub Pages Setting"></p><h1 id="後續"><a href="#後續" class="headerlink" title="後續"></a>後續</h1><p>到這邊我們的「如何將 Hexo 部落格架設到 GitHub Pages 上」就告一段落，後續若想針對主題樣式做出不一樣的調整，可以參考 <a href="https://butterfly.js.org/">Butterfly 官方文件</a>，裡面有其他更詳細的設定操作。</p>]]></content>
    
    
    <summary type="html">前陣子嘗試將部落格更換框架、更換主題，從 Jekyll 框架改成了 Hexo 這個框架，從 Jekflix 這主題改變成了 Butterfly 這主題，更適合當做一個技術部落格來使用 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="Hexo" scheme="https://blog.init.engineer/tags/Hexo/"/>
    
    <category term="GitHub" scheme="https://blog.init.engineer/tags/GitHub/"/>
    
    <category term="Butterfly" scheme="https://blog.init.engineer/tags/Butterfly/"/>
    
  </entry>
  
  <entry>
    <title>部落格遇到抄襲，如何提交 Copyright issue，以及提交 DMCA Takedown Policy</title>
    <link href="https://blog.init.engineer/posts/HowToCopyrightIssue/"/>
    <id>https://blog.init.engineer/posts/HowToCopyrightIssue/</id>
    <published>2022-02-15T16:00:00.000Z</published>
    <updated>2022-02-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>前陣子<a href="https://blog.init.engineer/">技術部落格</a>遇到了文章抄襲事件，有部分的文章直接被完美的複製貼上到了其他人自己的網站當中，為了解決這樣的事情，於是開始查詢 GitHub Pages 對於抄襲這件事有甚麼處置，如何提交 Copyright Issue 訊息出去、如何提交 <a href="https://docs.github.com/en/github/site-policy/dmca-takedown-policy">DMCA Takedown Policy</a> 去嚇嚇人家，最後便把這些過程記錄下來。</p><h1 id="提交-Copyright-Issue"><a href="#提交-Copyright-Issue" class="headerlink" title="提交 Copyright Issue"></a>提交 Copyright Issue</h1><p>首先我的第一個動作是寄信給 GitHub 專門處理這類案件的信箱，也就是 <code>copyright@github.com</code> 這個信箱，你需要明確闡述出你滿腔的憤怒！然後附上受害者、加害者，最後期待 GitHub 的回覆，所以我們先用中文來寫一下信件內容大概的樣子，再將其翻譯成英文，畢竟是要給 GitHub 去審核的。</p><h2 id="版權聲明信件-中文內容"><a href="#版權聲明信件-中文內容" class="headerlink" title="版權聲明信件 中文內容"></a>版權聲明信件 中文內容</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">親愛的工作人員，</span><br><span class="line"></span><br><span class="line">這個 GitHub Pages 侵犯了我的版權，並且沒有提前通知我，</span><br><span class="line">請立即刪除該使用者的 GitHub 帳號。</span><br><span class="line">否則我將不得不對此類侵權行為採取適當的法律行動。</span><br><span class="line"></span><br><span class="line">GitHub 上的違規頁面</span><br><span class="line">GitHub Page =&gt; https://______.github.io/______</span><br><span class="line">Source Code =&gt; https://github.com/______/______.github.io/...</span><br><span class="line"></span><br><span class="line">GitHub 上的原作者</span><br><span class="line">GitHub Page =&gt; https://______.github.io/______</span><br><span class="line">Source Code =&gt; https://github.com/______/______.github.io/...</span><br><span class="line"></span><br><span class="line">我期待您的回覆。</span><br><span class="line"></span><br><span class="line">Sincerely,</span><br><span class="line">YOUR_NAME</span><br></pre></td></tr></table></figure><p>接著將其翻譯成英文，如果你遇到類似的案件，你也可以直接複製這些信件內容，將空格填寫一下，就可以直接寄信給 <code>copyright@github.com</code> 去檢舉了。</p><h2 id="版權聲明信件-英文內容"><a href="#版權聲明信件-英文內容" class="headerlink" title="版權聲明信件 英文內容"></a>版權聲明信件 英文內容</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Dear Staff,</span><br><span class="line"></span><br><span class="line">This Github page violated my copyright without been notice me advanced,</span><br><span class="line">please takedown the github account immediately.</span><br><span class="line">Or I will have to take suitable legal actions against such infringement.</span><br><span class="line"></span><br><span class="line">Violated page on Github</span><br><span class="line">GitHub Page =&gt; https://______.github.io/______</span><br><span class="line">Source Code =&gt; https://github.com/______/______.github.io/...</span><br><span class="line"></span><br><span class="line">Original Author</span><br><span class="line">GitHub Page =&gt; https://______.github.io/______</span><br><span class="line">Source Code =&gt; https://github.com/______/______.github.io/...</span><br><span class="line"></span><br><span class="line">I look forward to your reply.</span><br><span class="line"></span><br><span class="line">Sincerely,</span><br><span class="line">YOUR_NAME</span><br></pre></td></tr></table></figure><h1 id="來自-GitHub-的回覆"><a href="#來自-GitHub-的回覆" class="headerlink" title="來自 GitHub 的回覆"></a>來自 GitHub 的回覆</h1><p>寄出了 Copyright Issue 信件後，沒過多久我就收到了來自 GitHub 的回覆，大致內容如下:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Hi 乾太,</span><br><span class="line"></span><br><span class="line">Thanks for contacting us. A great first step is to try contacting the user directly; in many cases, this type of thing turns out to be a misunderstanding that can be resolved by reaching out to them. You can check their profile page for contact information, or open an issue in the repository itself. If that&#x27;s not possible, you may want to learn more about our DMCA takedown process.</span><br><span class="line"></span><br><span class="line">If you are the copyright holder and want to have the content removed, you have the option of filing a DMCA takedown notice. Instructions, examples, and policy details are available here:</span><br><span class="line"></span><br><span class="line">https://docs.github.com/en/github/site-policy/dmca-takedown-policy</span><br><span class="line"></span><br><span class="line">https://docs.github.com/en/github/site-policy/guide-to-submitting-a-dmca-takedown-notice</span><br><span class="line"></span><br><span class="line">If you&#x27;re not the copyright holder, your best bet would be to contact the owner of the content and let them decide if they&#x27;d like to take action.</span><br><span class="line"></span><br><span class="line">Regards,</span><br><span class="line"></span><br><span class="line">GitHub Trust &amp; Safety</span><br></pre></td></tr></table></figure><p>內容大致上 GitHub 是覺得這是誤會啦、不用那麼緊張啦！如果是這樣的內容，基本上就是獲得了來自 GitHub 的制式罐頭回覆，但內容當中還是有個地方有用，就是「<a href="https://docs.github.com/en/github/site-policy/guide-to-submitting-a-dmca-takedown-notice">提交 DMCA 刪除通知的指南</a>」。</p><h1 id="什麼是-DMCA"><a href="#什麼是-DMCA" class="headerlink" title="什麼是 DMCA"></a>什麼是 DMCA</h1><blockquote><p>數位千禧年著作權法 (Digital Millennium Copyright Act，DMCA) 是美國著作權法，規定其網站上供人發表貼文&#x2F;使用者創作內容的線上服務供應商若在收到著作權人或其代理人指稱侵權通知後即時移除不當內容，即可免除著作權侵權責任。 </p></blockquote><p>資料來源: <a href="https://www.amd.com/zh-hant/corporate/dmca-notice">著作權侵權 – DMCA 通知</a></p><h1 id="提交-DMCA"><a href="#提交-DMCA" class="headerlink" title="提交 DMCA"></a>提交 DMCA</h1><p>我們根據 GitHub 的回信當中得知，我們除了寄送 Copyright Issue 以外，我們還可以採取<a href="https://docs.github.com/en/github/site-policy/guide-to-submitting-a-dmca-takedown-notice">提交 DMCA 刪除通知</a>的動作，這個部分我們需要先到<a href="https://github.com/contact/dmca">Copyright claims (DMCA)</a>這個網頁，選擇裡面有個「<a href="https://github.com/contact/dmca-notice">Submit a DMCA takedown notice</a>」的選項，去提交你的 DMCA 刪除通知。</p><p><img src="/img/posts/HowToCopyrightIssue/1.png" alt="Submit a DMCA takedown notice"></p><p>接下來是一系列的表單填寫，</p><ol><li><p>Are you the copyright holder or authorized to act on the copyright owner&#39;s behalf?<br>您是著作權所有者還是被有著作權的人授權代理？</p><ul><li>Yes, I am the copyright holder.<br>是的，我是著作權所有者。</li><li>Yes, I am authorized to act on the copyright owner&#39;s behalf.<br>是的，我被有著作權的人授權代理。</li><li>No.<br>不。</li></ul></li><li><p>Are you submitting a revised DMCA notice after GitHub Trust &amp; Safety requested you make changes to your original notice?<br>在 GitHub Trust &amp; Safety 要求您更改原始通知後，您是否提交了修改後的 DMCA 通知？ </p><ul><li>Yes.<br>是的。</li><li>No.<br>不。</li></ul></li><li><p>Does your claim involve content on GitHub or npm.js?<br>您的聲明是否涉及 GitHub 或 npm.js 上的內容？ </p><ul><li>GitHub</li><li>npm.js</li><li>Both<br>兩個都有</li></ul></li><li><p>Please describe the nature of your copyright ownership or authorization to act on the owner&#39;s behalf.<br>請描述您的著作權或授權代理的性質。 </p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">這是我的個人部落格，我並沒有授權任何人可以去盜取我的文章內容。</span><br><span class="line">This is my personal blog, and I do not authorize anyone to steal the content of my articles.</span><br></pre></td></tr></table></figure></li><li><p>Please provide a detailed description of the original copyrighted work that has allegedly been infringed. If possible, include a URL to where it is posted online.<br>請提供涉嫌侵權的原始著作權作品的詳細說明，如果可以，請包含一個其線上發佈位置的 URL。</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">從發佈日期就可以得知 ______.github.io 的時間比 ______.github.io 更早期，而內容以及呈現方式幾乎是一模一樣，翻開原始碼更是一模一樣。</span><br><span class="line">From the release date, it can be known that ______.github.io is earlier than ______.github.io, and the content and presentation method are almost the same, and opening the source code is the same. </span><br><span class="line"></span><br><span class="line">Original Author</span><br><span class="line">GitHub Page =&gt; https://______.github.io/______</span><br><span class="line">Source Code =&gt; https://github.com/______/______.github.io/... </span><br></pre></td></tr></table></figure></li><li><p>What files should be taken down? Please provide URLs for each file, or if the entire repository, the repository’s URL.<br>應該刪除哪些文件？請提供每個文件的 URL，如果是整個儲存庫，請提供儲存庫的 URL。</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Violated page on Github</span><br><span class="line">GitHub Page =&gt; https://______.github.io/______</span><br><span class="line">Source Code =&gt; https://github.com/______/______.github.io/...</span><br></pre></td></tr></table></figure></li><li><p>Do you claim to have any technological measures in place to control access to your copyrighted content? Please see our Complaints about Anti-Circumvention Technology if you are unsure.<br>您是否聲稱已採取任何技術措施來控制對您受版權保護的內容的瀏覽？如果您不確定，請參閱我們關於反規避技術的申訴。</p><ul><li>Yes.<br>是的。</li><li>No.<br>不。</li></ul></li><li><p>What technological measures do you have in place and how do they effectively control access to your copyrighted material?<br>您採取了哪些技術措施，它們如何有效地控制對您受版權保護的資源？ </p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我沒有設定 LICENSE，但我這是這篇文章的作者，因此我有權利捍衛我的著作權。</span><br><span class="line">I have not set a license, but I am the author of this article, so I have the right to defend my copyright.</span><br></pre></td></tr></table></figure></li><li><p>How is the accused project designed to circumvent your technological protection measures?<br>被指控的項目是如何規避你們的技術保護措施的？</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">這個 GitHub Pages 侵犯了我的版權，並且沒有提前通知我。</span><br><span class="line">This Github page violated my copyright without been notice me advanced.</span><br></pre></td></tr></table></figure></li><li><p>Have you searched for any forks of the allegedly infringing files or repositories? Each fork is a distinct repository and must be identified separately if you believe it is infringing and wish to have it taken down.<br>您是否搜尋過涉嫌侵權的文件或儲存庫的任何分支？每個分支都是一個不同的儲存庫，如果您認為它侵權並希望將其刪除，則必須個別檢視它。</p></li><li><p>Is the work licensed under an open source license?<br>作品是否在開源許可下獲得許可？</p><ul><li>Yes.<br>是的。</li><li>No.<br>不。</li></ul></li><li><p>What would be the best solution for the alleged infringement?<br>對於涉嫌侵權的最佳解決方案是什麼？ </p><ul><li>Repository can be made private<br>儲存庫可以設定為私有(Private)</li><li>Reported content must be removed<br>必須刪除其內容</li><li>Other Change<br>其他</li></ul></li><li><p>Do you have the alleged infringer’s contact information? If so, please provide it.<br>你有被控侵權人的聯繫方式嗎？如果有，請提供。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Facebook: ...</span><br><span class="line">Email: ...</span><br></pre></td></tr></table></figure></li><li><p>I have a good faith belief that use of the copyrighted materials described above on the infringing web pages is not authorized by the copyright owner, or its agent, or the law.<br>我確信在侵權網頁上使用上述受版權保護的材料未經版權所有者或其代理人或法律授權。</p></li><li><p>I swear, under penalty of perjury, that the information in this notification is accurate and that I am the copyright owner, or am authorized to act on behalf of the owner, of an exclusive right that is allegedly infringed.<br>我宣誓，本通知中的信息是準確的，並且我是涉嫌侵權的專有權的版權所有者或被授權代表所有者行事，如果做偽證，我將受到懲罰。</p></li><li><p>I have taken fair use into consideration.<br>我考慮了合理使用。</p></li><li><p>I have read and understand GitHub&#39;s Guide to Submitting a DMCA Takedown Notice.<br>我已閱讀並理解 GitHub 提交 DMCA 刪除通知的指南。</p></li><li><p>So that we can get back to you, please provide either your telephone number or physical address.<br>為了方便我們回复您，請提供您的電話號碼或實際地址。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Facebook: ...</span><br><span class="line">Email: ...</span><br><span class="line">Phone: +886 ...</span><br></pre></td></tr></table></figure></li><li><p>Please type your full legal name below to sign this request.<br>請在下方輸入您的法定全名以簽署此請求。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YOUR NAME</span><br></pre></td></tr></table></figure></li></ol><h1 id="後續"><a href="#後續" class="headerlink" title="後續"></a>後續</h1><p>因為我遇到的侵權案件在提交 DMCA 刪除請求以後，對方就將違規的文章直接刪除了，所以沒有後續的進度，因此只記錄到此。</p><ul><li><a href="https://www.facebook.com/kantai.zeng/posts/1233845227147846">「線上 String 字串亂數產生器」侵權事件原委</a></li></ul>]]></content>
    
    
    <summary type="html">前陣子技術部落格遇到了文章抄襲事件，有部分的文章直接被完美的複製貼上到了其他人自己的網站當中，為了解決這樣的事情，於是開始查詢 GitHub Pages 對於抄襲這件事有甚麼處置，如何提交 Copyright Issue 訊息出去 ...</summary>
    
    
    
    <category term="經驗分享" scheme="https://blog.init.engineer/categories/%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="GitHub" scheme="https://blog.init.engineer/tags/GitHub/"/>
    
    <category term="Copyright" scheme="https://blog.init.engineer/tags/Copyright/"/>
    
  </entry>
  
  <entry>
    <title>【學習筆記】加權移動平均線 Weighted Moving Average</title>
    <link href="https://blog.init.engineer/posts/WeightedMovingAverage/"/>
    <id>https://blog.init.engineer/posts/WeightedMovingAverage/</id>
    <published>2022-02-12T16:00:00.000Z</published>
    <updated>2022-02-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>加權移動平均線(Weighted Moving Average, WMA)</p><h1 id="計算方式"><a href="#計算方式" class="headerlink" title="計算方式"></a>計算方式</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">當日 N WMA = ((Day 1 CP * 1) + (Day 2 CP * 2) + ... + (Day N CP * N)) / (1 + 2 + ... + N)</span><br><span class="line"></span><br><span class="line">N : 天數</span><br><span class="line">Day N CP : 第 N 天的收盤價</span><br></pre></td></tr></table></figure><h2 id="舉例陽明-2609-111-x2F-02-x2F-18-的-5-WMA"><a href="#舉例陽明-2609-111-x2F-02-x2F-18-的-5-WMA" class="headerlink" title="舉例陽明(2609) 111&#x2F;02&#x2F;18 的 5 WMA"></a>舉例陽明(2609) 111&#x2F;02&#x2F;18 的 5 WMA</h2><p><code>111/02/18</code> 的收盤價 <code>116.50</code>，加權相乘 116.50 * 5 &#x3D; <code>582.50</code><br><code>111/02/17</code> 的收盤價 <code>112.00</code>，加權相乘 112.00 * 4 &#x3D; <code>448.00</code><br><code>111/02/16</code> 的收盤價 <code>112.50</code>，加權相乘 112.50 * 3 &#x3D; <code>337.50</code><br><code>111/02/15</code> 的收盤價 <code>111.00</code>，加權相乘 111.00 * 2 &#x3D; <code>222.00</code><br><code>111/02/14</code> 的收盤價 <code>110.50</code>，加權相乘 110.50 * 1 &#x3D; <code>110.50</code></p><p>加權相乘加總起來為 <code>1,700.50</code>，並將其除以 <code>1 + 2 + 3 + 4 + 5 = 15</code></p><p><code>1,700.50 / 15 = 113.36</code>，當日 WMA 等於 <code>113.36</code></p><h2 id="舉例陽明-2609-111-x2F-02-x2F-18-的-10-WMA"><a href="#舉例陽明-2609-111-x2F-02-x2F-18-的-10-WMA" class="headerlink" title="舉例陽明(2609) 111&#x2F;02&#x2F;18 的 10 WMA"></a>舉例陽明(2609) 111&#x2F;02&#x2F;18 的 10 WMA</h2><p><code>111/02/18</code> 的收盤價 <code>116.50</code>，加權相乘 116.50 * 10 &#x3D; <code>1,165.00</code><br><code>111/02/17</code> 的收盤價 <code>112.00</code>，加權相乘 112.00 * 9 &#x3D; <code>1,008.00</code><br><code>111/02/16</code> 的收盤價 <code>112.50</code>，加權相乘 112.50 * 8 &#x3D; <code>900.00</code><br><code>111/02/15</code> 的收盤價 <code>111.00</code>，加權相乘 111.00 * 7 &#x3D; <code>777.00</code><br><code>111/02/14</code> 的收盤價 <code>110.50</code>，加權相乘 110.50 * 6 &#x3D; <code>663.00</code><br><code>111/02/11</code> 的收盤價 <code>112.00</code>，加權相乘 112.00 * 5 &#x3D; <code>560.00</code><br><code>111/02/10</code> 的收盤價 <code>114.00</code>，加權相乘 114.00 * 4 &#x3D; <code>456.00</code><br><code>111/02/09</code> 的收盤價 <code>112.00</code>，加權相乘 112.00 * 3 &#x3D; <code>336.00</code><br><code>111/02/08</code> 的收盤價 <code>112.50</code>，加權相乘 112.50 * 2 &#x3D; <code>225.00</code><br><code>111/02/07</code> 的收盤價 <code>108.00</code>，加權相乘 108.00 * 1 &#x3D; <code>108.00</code></p><p>加權相乘加總起來為 <code>6,198.00</code>，並將其除以 <code>1 + 2 + ... + 10 = 55</code></p><p><code>6,198.00 / 55 = 112.69</code>，當日 WMA 等於 <code>112.69</code></p><h2 id="舉例陽明-2609-111-x2F-02-x2F-18-的-20-WMA"><a href="#舉例陽明-2609-111-x2F-02-x2F-18-的-20-WMA" class="headerlink" title="舉例陽明(2609) 111&#x2F;02&#x2F;18 的 20 WMA"></a>舉例陽明(2609) 111&#x2F;02&#x2F;18 的 20 WMA</h2><p><code>111/02/18</code> 的收盤價 <code>112.00</code>，加權相乘 112.00 * 20 &#x3D; <code>2,330.00</code><br><code>111/02/17</code> 的收盤價 <code>113.00</code>，加權相乘 113.00 * 19 &#x3D; <code>2,128.00</code><br><code>111/02/16</code> 的收盤價 <code>113.50</code>，加權相乘 113.50 * 18 &#x3D; <code>2,025.00</code><br><code>111/02/15</code> 的收盤價 <code>112.00</code>，加權相乘 112.00 * 17 &#x3D; <code>1,887.00</code><br><code>111/02/14</code> 的收盤價 <code>111.50</code>，加權相乘 111.50 * 16 &#x3D; <code>1,768.00</code><br><code>111/02/11</code> 的收盤價 <code>114.00</code>，加權相乘 114.00 * 15 &#x3D; <code>1,680.00</code><br><code>111/02/10</code> 的收盤價 <code>113.50</code>，加權相乘 113.50 * 14 &#x3D; <code>1,596.00</code><br><code>111/02/09</code> 的收盤價 <code>114.00</code>，加權相乘 114.00 * 13 &#x3D; <code>1,456.00</code><br><code>111/02/08</code> 的收盤價 <code>109.00</code>，加權相乘 109.00 * 12 &#x3D; <code>1,350.00</code><br><code>111/02/07</code> 的收盤價 <code>100.50</code>，加權相乘 100.50 * 11 &#x3D; <code>1,188.00</code><br><code>111/01/26</code> 的收盤價 <code>96.10</code>，加權相乘 96.10 * 10 &#x3D; <code>986.00</code><br><code>111/01/25</code> 的收盤價 <code>99.00</code>，加權相乘 99.00 * 9 &#x3D; <code>855.90</code><br><code>111/01/24</code> 的收盤價 <code>97.00</code>，加權相乘 97.00 * 8 &#x3D; <code>799.20</code><br><code>111/01/21</code> 的收盤價 <code>103.00</code>，加權相乘 103.00 * 7 &#x3D; <code>693.00</code><br><code>111/01/20</code> 的收盤價 <code>104.00</code>，加權相乘 104.00 * 6 &#x3D; <code>624.00</code><br><code>111/01/19</code> 的收盤價 <code>105.00</code>，加權相乘 105.00 * 5 &#x3D; <code>520.00</code><br><code>111/01/18</code> 的收盤價 <code>104.50</code>，加權相乘 104.50 * 4 &#x3D; <code>426.00</code><br><code>111/01/17</code> 的收盤價 <code>106.00</code>，加權相乘 106.00 * 3 &#x3D; <code>316.50</code><br><code>111/01/14</code> 的收盤價 <code>105.00</code>，加權相乘 105.00 * 2 &#x3D; <code>215.00</code><br><code>111/01/13</code> 的收盤價 <code>108.50</code>，加權相乘 108.50 * 1 &#x3D; <code>105.00</code></p><p>加權相乘加總起來為 <code>22,948.60</code>，並將其除以 <code>1 + 2 + ... + 20 = 210</code></p><p><code>22,948.60 / 210 = 109.28</code>，當日 WMA 等於 <code>109.28</code></p><h1 id="範例資料"><a href="#範例資料" class="headerlink" title="範例資料"></a>範例資料</h1><table><thead><tr><th align="left">日期</th><th align="right">開盤價</th><th align="right">最高價</th><th align="right">最低價</th><th align="right">收盤價</th><th align="right">成交量</th><th align="right">5WMA</th><th align="right">10WMA</th><th align="right">20WMA</th></tr></thead><tbody><tr><td align="left">111&#x2F;02&#x2F;18</td><td align="right">112.00</td><td align="right">118.00</td><td align="right">111.00</td><td align="right">116.50</td><td align="right">103,926</td><td align="right">113.36</td><td align="right">112.69</td><td align="right">109.27</td></tr><tr><td align="left">111&#x2F;02&#x2F;17</td><td align="right">113.00</td><td align="right">114.50</td><td align="right">111.50</td><td align="right">112.00</td><td align="right">39,731</td><td align="right">111.73</td><td align="right">111.56</td><td align="right">108.36</td></tr><tr><td align="left">111&#x2F;02&#x2F;16</td><td align="right">113.50</td><td align="right">113.50</td><td align="right">112.00</td><td align="right">112.50</td><td align="right">30,104</td><td align="right">111.73</td><td align="right">110.95</td><td align="right">107.87</td></tr><tr><td align="left">111&#x2F;02&#x2F;15</td><td align="right">112.00</td><td align="right">112.50</td><td align="right">110.50</td><td align="right">111.00</td><td align="right">31,536</td><td align="right">111.53</td><td align="right">110.01</td><td align="right">107.33</td></tr><tr><td align="left">111&#x2F;02&#x2F;14</td><td align="right">111.50</td><td align="right">115.50</td><td align="right">110.50</td><td align="right">110.50</td><td align="right">71,168</td><td align="right">111.93</td><td align="right">109.13</td><td align="right">106.95</td></tr><tr><td align="left">111&#x2F;02&#x2F;11</td><td align="right">114.00</td><td align="right">115.00</td><td align="right">112.00</td><td align="right">112.00</td><td align="right">55,575</td><td align="right">112.33</td><td align="right">108.22</td><td align="right">106.63</td></tr><tr><td align="left">111&#x2F;02&#x2F;10</td><td align="right">113.50</td><td align="right">114.50</td><td align="right">111.50</td><td align="right">114.00</td><td align="right">42,037</td><td align="right">111.34</td><td align="right">106.90</td><td align="right">106.18</td></tr><tr><td align="left">111&#x2F;02&#x2F;09</td><td align="right">114.00</td><td align="right">115.50</td><td align="right">111.00</td><td align="right">112.00</td><td align="right">62,258</td><td align="right">108.42</td><td align="right">105.07</td><td align="right">105.55</td></tr><tr><td align="left">111&#x2F;02&#x2F;08</td><td align="right">109.00</td><td align="right">116.50</td><td align="right">108.50</td><td align="right">112.50</td><td align="right">155,773</td><td align="right">105.36</td><td align="right">103.49</td><td align="right">105.12</td></tr><tr><td align="left">111&#x2F;02&#x2F;07</td><td align="right">100.50</td><td align="right">108.00</td><td align="right">100.00</td><td align="right">108.00</td><td align="right">59,599</td><td align="right">101.23</td><td align="right">101.73</td><td align="right">104.69</td></tr><tr><td align="left">111&#x2F;01&#x2F;26</td><td align="right">96.10</td><td align="right">99.90</td><td align="right">96.10</td><td align="right">98.60</td><td align="right">51,052</td><td align="right">98.34</td><td align="right">100.73</td><td align="right">104.76</td></tr><tr><td align="left">111&#x2F;01&#x2F;25</td><td align="right">99.00</td><td align="right">99.10</td><td align="right">95.10</td><td align="right">95.10</td><td align="right">48,479</td><td align="right">98.94</td><td align="right">101.62</td><td align="right">105.85</td></tr><tr><td align="left">111&#x2F;01&#x2F;24</td><td align="right">97.00</td><td align="right">101.00</td><td align="right">96.50</td><td align="right">99.90</td><td align="right">48,844</td><td align="right">101.46</td><td align="right">103.44</td><td align="right">107.41</td></tr><tr><td align="left">111&#x2F;01&#x2F;21</td><td align="right">103.00</td><td align="right">103.50</td><td align="right">99.00</td><td align="right">99.00</td><td align="right">65,444</td><td align="right">102.76</td><td align="right">104.60</td><td align="right">108.61</td></tr><tr><td align="left">111&#x2F;01&#x2F;20</td><td align="right">104.00</td><td align="right">105.50</td><td align="right">103.50</td><td align="right">104.00</td><td align="right">28,239</td><td align="right">104.93</td><td align="right">106.20</td><td align="right">110.02</td></tr><tr><td align="left">111&#x2F;01&#x2F;19</td><td align="right">105.00</td><td align="right">107.50</td><td align="right">103.00</td><td align="right">104.00</td><td align="right">51,633</td><td align="right">105.50</td><td align="right">107.07</td><td align="right">111.04</td></tr><tr><td align="left">111&#x2F;01&#x2F;18</td><td align="right">104.50</td><td align="right">108.00</td><td align="right">104.00</td><td align="right">106.50</td><td align="right">31,750</td><td align="right">106.33</td><td align="right">108.14</td><td align="right">112.17</td></tr><tr><td align="left">111&#x2F;01&#x2F;17</td><td align="right">106.00</td><td align="right">106.50</td><td align="right">104.50</td><td align="right">105.50</td><td align="right">30,165</td><td align="right">106.70</td><td align="right">108.92</td><td align="right">113.13</td></tr><tr><td align="left">111&#x2F;01&#x2F;14</td><td align="right">105.00</td><td align="right">107.50</td><td align="right">103.00</td><td align="right">107.50</td><td align="right">55,764</td><td align="right">107.80</td><td align="right">110.05</td><td align="right">114.27</td></tr><tr><td align="left">111&#x2F;01&#x2F;13</td><td align="right">108.50</td><td align="right">109.50</td><td align="right">105.00</td><td align="right">105.00</td><td align="right">47,851</td><td align="right">108.63</td><td align="right">111.06</td><td align="right">115.30</td></tr><tr><td align="left">111&#x2F;01&#x2F;12</td><td align="right">113.50</td><td align="right">114.00</td><td align="right">107.50</td><td align="right">108.00</td><td align="right">54,098</td><td align="right">110.93</td><td align="right">112.88</td><td align="right">116.64</td></tr><tr><td align="left">111&#x2F;01&#x2F;11</td><td align="right">112.00</td><td align="right">115.00</td><td align="right">110.50</td><td align="right">112.00</td><td align="right">41,157</td><td align="right">112.70</td><td align="right">114.46</td><td align="right">117.75</td></tr><tr><td align="left">111&#x2F;01&#x2F;10</td><td align="right">111.50</td><td align="right">114.50</td><td align="right">109.00</td><td align="right">111.50</td><td align="right">47,052</td><td align="right">113.36</td><td align="right">115.50</td><td align="right">118.56</td></tr><tr><td align="left">111&#x2F;01&#x2F;07</td><td align="right">115.50</td><td align="right">116.00</td><td align="right">111.00</td><td align="right">113.50</td><td align="right">37,537</td><td align="right">114.40</td><td align="right">116.84</td><td align="right">119.47</td></tr><tr><td align="left">111&#x2F;01&#x2F;06</td><td align="right">113.50</td><td align="right">117.00</td><td align="right">113.50</td><td align="right">114.50</td><td align="right">35,949</td><td align="right">115.26</td><td align="right">117.98</td><td align="right">120.27</td></tr><tr><td align="left">111&#x2F;01&#x2F;05</td><td align="right">115.00</td><td align="right">117.00</td><td align="right">113.50</td><td align="right">115.00</td><td align="right">35,370</td><td align="right">116.46</td><td align="right">119.10</td><td align="right">121.03</td></tr><tr><td align="left">111&#x2F;01&#x2F;04</td><td align="right">115.00</td><td align="right">116.00</td><td align="right">113.50</td><td align="right">115.50</td><td align="right">36,842</td><td align="right">118.16</td><td align="right">120.33</td><td align="right">121.80</td></tr><tr><td align="left">111&#x2F;01&#x2F;03</td><td align="right">120.00</td><td align="right">120.50</td><td align="right">113.00</td><td align="right">114.50</td><td align="right">106,847</td><td align="right">120.16</td><td align="right">121.59</td><td align="right">122.56</td></tr></tbody></table><p>範例資料: 陽明(2609) 111&#x2F;02&#x2F;18 ~ 111&#x2F;01&#x2F;03 個股股價行情<br>資料來源: <a href="https://stock.wearn.com/cdata.asp?Year=111&month=02&kind=2609">https://stock.wearn.com/cdata.asp?Year=111&amp;month=02&amp;kind=2609</a></p>]]></content>
    
    
    <summary type="html">加權移動平均線(Weighted Moving Average, WMA)</summary>
    
    
    
    <category term="投資理財" scheme="https://blog.init.engineer/categories/%E6%8A%95%E8%B3%87%E7%90%86%E8%B2%A1/"/>
    
    <category term="技術指標" scheme="https://blog.init.engineer/categories/%E6%8A%95%E8%B3%87%E7%90%86%E8%B2%A1/%E6%8A%80%E8%A1%93%E6%8C%87%E6%A8%99/"/>
    
    
    <category term="學習筆記" scheme="https://blog.init.engineer/tags/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="加權移動平均線" scheme="https://blog.init.engineer/tags/%E5%8A%A0%E6%AC%8A%E7%A7%BB%E5%8B%95%E5%B9%B3%E5%9D%87%E7%B7%9A/"/>
    
    <category term="WMA" scheme="https://blog.init.engineer/tags/WMA/"/>
    
    <category term="Weighted Moving Average" scheme="https://blog.init.engineer/tags/Weighted-Moving-Average/"/>
    
  </entry>
  
  <entry>
    <title>【學習筆記】指數移動平均線 Exponential Moving Average</title>
    <link href="https://blog.init.engineer/posts/ExponentialMovingAverage/"/>
    <id>https://blog.init.engineer/posts/ExponentialMovingAverage/</id>
    <published>2022-02-11T16:00:00.000Z</published>
    <updated>2022-02-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>指數移動平均線(Exponential Moving Average, EMA)</p><h1 id="計算方式"><a href="#計算方式" class="headerlink" title="計算方式"></a>計算方式</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Today EMA = (Today CP * K) + Yesterday EMA * (1 - K)</span><br><span class="line"></span><br><span class="line">Today EMA: 今日 EMA</span><br><span class="line">Today CP: 今日收盤價</span><br><span class="line">K: 加權指數 (Something / N + 1)</span><br><span class="line">N: 時間週期</span><br><span class="line">Something: 平滑因子，通常預設為 2</span><br></pre></td></tr></table></figure><h2 id="舉例陽明-2609-111-x2F-02-x2F-18-的-5-EMA"><a href="#舉例陽明-2609-111-x2F-02-x2F-18-的-5-EMA" class="headerlink" title="舉例陽明(2609) 111&#x2F;02&#x2F;18 的 5 EMA"></a>舉例陽明(2609) 111&#x2F;02&#x2F;18 的 5 EMA</h2><p>加權指數<br>K &#x3D; <code>平滑因子 / (時間週期 + 1)</code><br>  &#x3D; <code>Something / (N + 1)</code><br>  &#x3D; <code>2 / (5 + 1)</code><br>  &#x3D; <code>2 / 6</code><br>  &#x3D; <code>0.333333333</code></p><p>今日 EMA<br>Today EMA &#x3D; <code>(今日收盤價 * 加權指數) + 昨日 EMA * (1 - 加權指數)</code><br>          &#x3D; <code>(Today CP * K) + Yesterday EMA * (1 - K)</code><br>          &#x3D; <code>(116.50 * 0.333333333) + 111.53 * (1 - 0.333333333)</code><br>          &#x3D; <code>38.833332945 + 111.53 * 0.666666667</code><br>          &#x3D; <code>38.833332945 + 74.35333337051</code><br>          &#x3D; <code>113.18666631551</code> 約等於 <code>133.19</code></p><h2 id="舉例陽明-2609-111-x2F-02-x2F-18-的-10-EMA"><a href="#舉例陽明-2609-111-x2F-02-x2F-18-的-10-EMA" class="headerlink" title="舉例陽明(2609) 111&#x2F;02&#x2F;18 的 10 EMA"></a>舉例陽明(2609) 111&#x2F;02&#x2F;18 的 10 EMA</h2><p>加權指數<br>K &#x3D; <code>平滑因子 / (時間週期 + 1)</code><br>  &#x3D; <code>Something / (N + 1)</code><br>  &#x3D; <code>2 / (10 + 1)</code><br>  &#x3D; <code>2 / 11</code><br>  &#x3D; <code>0.181818182</code></p><p>今日 EMA<br>Today EMA &#x3D; <code>(今日收盤價 * 加權指數) + 昨日 EMA * (1 - 加權指數)</code><br>          &#x3D; <code>(Today CP * K) + Yesterday EMA * (1 - K)</code><br>          &#x3D; <code>(116.50 * 0.181818182) + 110.24 * (1 - 0.181818182)</code><br>          &#x3D; <code>21.181818203 + 110.24 * 0.818181818</code><br>          &#x3D; <code>21.181818203 + 90.19636361632</code><br>          &#x3D; <code>111.37818181932</code> 約等於 <code>111.38</code></p><h2 id="舉例陽明-2609-111-x2F-02-x2F-18-的-20-EMA"><a href="#舉例陽明-2609-111-x2F-02-x2F-18-的-20-EMA" class="headerlink" title="舉例陽明(2609) 111&#x2F;02&#x2F;18 的 20 EMA"></a>舉例陽明(2609) 111&#x2F;02&#x2F;18 的 20 EMA</h2><p>加權指數<br>K &#x3D; <code>平滑因子 / (時間週期 + 1)</code><br>  &#x3D; <code>Something / (N + 1)</code><br>  &#x3D; <code>2 / (20 + 1)</code><br>  &#x3D; <code>2 / 21</code><br>  &#x3D; <code>0.095238095</code></p><p>今日 EMA<br>Today EMA &#x3D; <code>(今日收盤價 * 加權指數) + 昨日 EMA * (1 - 加權指數)</code><br>          &#x3D; <code>(Today CP * K) + Yesterday EMA * (1 - K)</code><br>          &#x3D; <code>(116.50 * 0.095238095) + 109.94 * (1 - 0.095238095)</code><br>          &#x3D; <code>11.0952380675 + 109.94 * 0.904761905</code><br>          &#x3D; <code>11.0952380675 + 99.4695238357</code><br>          &#x3D; <code>110.5647619032</code> 約等於 <code>110.57</code></p><h1 id="範例資料"><a href="#範例資料" class="headerlink" title="範例資料"></a>範例資料</h1><table><thead><tr><th align="left">日期</th><th align="right">開盤價</th><th align="right">最高價</th><th align="right">最低價</th><th align="right">收盤價</th><th align="right">成交量</th><th align="right">5EMA</th><th align="right">10EMA</th><th align="right">20EMA</th></tr></thead><tbody><tr><td align="left">111&#x2F;02&#x2F;18</td><td align="right">112.00</td><td align="right">118.00</td><td align="right">111.00</td><td align="right">116.50</td><td align="right">103,926</td><td align="right">113.19</td><td align="right">111.38</td><td align="right">110.57</td></tr><tr><td align="left">111&#x2F;02&#x2F;17</td><td align="right">113.00</td><td align="right">114.50</td><td align="right">111.50</td><td align="right">112.00</td><td align="right">39,731</td><td align="right">111.53</td><td align="right">110.24</td><td align="right">109.94</td></tr><tr><td align="left">111&#x2F;02&#x2F;16</td><td align="right">113.50</td><td align="right">113.50</td><td align="right">112.00</td><td align="right">112.50</td><td align="right">30,104</td><td align="right">111.30</td><td align="right">109.85</td><td align="right">109.73</td></tr><tr><td align="left">111&#x2F;02&#x2F;15</td><td align="right">112.00</td><td align="right">112.50</td><td align="right">110.50</td><td align="right">111.00</td><td align="right">31,536</td><td align="right">110.70</td><td align="right">109.26</td><td align="right">109.43</td></tr><tr><td align="left">111&#x2F;02&#x2F;14</td><td align="right">111.50</td><td align="right">115.50</td><td align="right">110.50</td><td align="right">110.50</td><td align="right">71,168</td><td align="right">110.55</td><td align="right">108.88</td><td align="right">109.27</td></tr><tr><td align="left">111&#x2F;02&#x2F;11</td><td align="right">114.00</td><td align="right">115.00</td><td align="right">112.00</td><td align="right">112.00</td><td align="right">55,575</td><td align="right">110.57</td><td align="right">108.52</td><td align="right">109.14</td></tr><tr><td align="left">111&#x2F;02&#x2F;10</td><td align="right">113.50</td><td align="right">114.50</td><td align="right">111.50</td><td align="right">114.00</td><td align="right">42,037</td><td align="right">109.86</td><td align="right">107.74</td><td align="right">108.84</td></tr><tr><td align="left">111&#x2F;02&#x2F;09</td><td align="right">114.00</td><td align="right">115.50</td><td align="right">111.00</td><td align="right">112.00</td><td align="right">62,258</td><td align="right">107.79</td><td align="right">106.35</td><td align="right">108.30</td></tr><tr><td align="left">111&#x2F;02&#x2F;08</td><td align="right">109.00</td><td align="right">116.50</td><td align="right">108.50</td><td align="right">112.50</td><td align="right">155,773</td><td align="right">105.68</td><td align="right">105.10</td><td align="right">107.91</td></tr><tr><td align="left">111&#x2F;02&#x2F;07</td><td align="right">100.50</td><td align="right">108.00</td><td align="right">100.00</td><td align="right">108.00</td><td align="right">59,599</td><td align="right">102.27</td><td align="right">103.45</td><td align="right">107.42</td></tr><tr><td align="left">111&#x2F;01&#x2F;26</td><td align="right">96.10</td><td align="right">99.90</td><td align="right">96.10</td><td align="right">98.60</td><td align="right">51,052</td><td align="right">99.41</td><td align="right">102.44</td><td align="right">107.36</td></tr><tr><td align="left">111&#x2F;01&#x2F;25</td><td align="right">99.00</td><td align="right">99.10</td><td align="right">95.10</td><td align="right">95.10</td><td align="right">48,479</td><td align="right">99.81</td><td align="right">103.30</td><td align="right">108.28</td></tr><tr><td align="left">111&#x2F;01&#x2F;24</td><td align="right">97.00</td><td align="right">101.00</td><td align="right">96.50</td><td align="right">99.90</td><td align="right">48,844</td><td align="right">102.17</td><td align="right">105.12</td><td align="right">109.67</td></tr><tr><td align="left">111&#x2F;01&#x2F;21</td><td align="right">103.00</td><td align="right">103.50</td><td align="right">99.00</td><td align="right">99.00</td><td align="right">65,444</td><td align="right">103.31</td><td align="right">106.28</td><td align="right">110.70</td></tr><tr><td align="left">111&#x2F;01&#x2F;20</td><td align="right">104.00</td><td align="right">105.50</td><td align="right">103.50</td><td align="right">104.00</td><td align="right">28,239</td><td align="right">105.46</td><td align="right">107.90</td><td align="right">111.93</td></tr><tr><td align="left">111&#x2F;01&#x2F;19</td><td align="right">105.00</td><td align="right">107.50</td><td align="right">103.00</td><td align="right">104.00</td><td align="right">51,633</td><td align="right">106.19</td><td align="right">108.76</td><td align="right">112.77</td></tr><tr><td align="left">111&#x2F;01&#x2F;18</td><td align="right">104.50</td><td align="right">108.00</td><td align="right">104.00</td><td align="right">106.50</td><td align="right">31,750</td><td align="right">107.29</td><td align="right">109.82</td><td align="right">113.69</td></tr><tr><td align="left">111&#x2F;01&#x2F;17</td><td align="right">106.00</td><td align="right">106.50</td><td align="right">104.50</td><td align="right">105.50</td><td align="right">30,165</td><td align="right">107.68</td><td align="right">110.56</td><td align="right">114.44</td></tr><tr><td align="left">111&#x2F;01&#x2F;14</td><td align="right">105.00</td><td align="right">107.50</td><td align="right">103.00</td><td align="right">107.50</td><td align="right">55,764</td><td align="right">108.77</td><td align="right">111.68</td><td align="right">115.39</td></tr><tr><td align="left">111&#x2F;01&#x2F;13</td><td align="right">108.50</td><td align="right">109.50</td><td align="right">105.00</td><td align="right">105.00</td><td align="right">47,851</td><td align="right">109.41</td><td align="right">112.61</td><td align="right">116.22</td></tr><tr><td align="left">111&#x2F;01&#x2F;12</td><td align="right">113.50</td><td align="right">114.00</td><td align="right">107.50</td><td align="right">108.00</td><td align="right">54,098</td><td align="right">111.61</td><td align="right">114.31</td><td align="right">117.40</td></tr><tr><td align="left">111&#x2F;01&#x2F;11</td><td align="right">112.00</td><td align="right">115.00</td><td align="right">110.50</td><td align="right">112.00</td><td align="right">41,157</td><td align="right">113.42</td><td align="right">115.71</td><td align="right">118.39</td></tr><tr><td align="left">111&#x2F;01&#x2F;10</td><td align="right">111.50</td><td align="right">114.50</td><td align="right">109.00</td><td align="right">111.50</td><td align="right">47,052</td><td align="right">114.13</td><td align="right">116.53</td><td align="right">119.06</td></tr><tr><td align="left">111&#x2F;01&#x2F;07</td><td align="right">115.50</td><td align="right">116.00</td><td align="right">111.00</td><td align="right">113.50</td><td align="right">37,537</td><td align="right">115.45</td><td align="right">117.65</td><td align="right">119.85</td></tr><tr><td align="left">111&#x2F;01&#x2F;06</td><td align="right">113.50</td><td align="right">117.00</td><td align="right">113.50</td><td align="right">114.50</td><td align="right">35,949</td><td align="right">116.42</td><td align="right">118.57</td><td align="right">120.52</td></tr><tr><td align="left">111&#x2F;01&#x2F;05</td><td align="right">115.00</td><td align="right">117.00</td><td align="right">113.50</td><td align="right">115.00</td><td align="right">35,370</td><td align="right">117.39</td><td align="right">119.48</td><td align="right">121.16</td></tr><tr><td align="left">111&#x2F;01&#x2F;04</td><td align="right">115.00</td><td align="right">116.00</td><td align="right">113.50</td><td align="right">115.50</td><td align="right">36,842</td><td align="right">118.58</td><td align="right">120.47</td><td align="right">121.80</td></tr><tr><td align="left">111&#x2F;01&#x2F;03</td><td align="right">120.00</td><td align="right">120.50</td><td align="right">113.00</td><td align="right">114.50</td><td align="right">106,847</td><td align="right">120.12</td><td align="right">121.58</td><td align="right">122.47</td></tr></tbody></table><p>範例資料: 陽明(2609) 111&#x2F;02&#x2F;18 ~ 111&#x2F;01&#x2F;03 個股股價行情<br>資料來源: <a href="https://stock.wearn.com/cdata.asp?Year=111&month=02&kind=2609">https://stock.wearn.com/cdata.asp?Year=111&amp;month=02&amp;kind=2609</a></p>]]></content>
    
    
    <summary type="html">指數移動平均線(Exponential Moving Average, EMA)</summary>
    
    
    
    <category term="投資理財" scheme="https://blog.init.engineer/categories/%E6%8A%95%E8%B3%87%E7%90%86%E8%B2%A1/"/>
    
    <category term="技術指標" scheme="https://blog.init.engineer/categories/%E6%8A%95%E8%B3%87%E7%90%86%E8%B2%A1/%E6%8A%80%E8%A1%93%E6%8C%87%E6%A8%99/"/>
    
    
    <category term="學習筆記" scheme="https://blog.init.engineer/tags/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="指數移動平均線" scheme="https://blog.init.engineer/tags/%E6%8C%87%E6%95%B8%E7%A7%BB%E5%8B%95%E5%B9%B3%E5%9D%87%E7%B7%9A/"/>
    
    <category term="EMA" scheme="https://blog.init.engineer/tags/EMA/"/>
    
    <category term="Exponential Moving Average" scheme="https://blog.init.engineer/tags/Exponential-Moving-Average/"/>
    
  </entry>
  
  <entry>
    <title>【學習筆記】簡單移動平均線 Simple Moving Average</title>
    <link href="https://blog.init.engineer/posts/SimpleMovingAverage/"/>
    <id>https://blog.init.engineer/posts/SimpleMovingAverage/</id>
    <published>2022-02-10T16:00:00.000Z</published>
    <updated>2022-02-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>簡單移動平均線(Simple Moving Average, SMA)</p><h1 id="計算方式"><a href="#計算方式" class="headerlink" title="計算方式"></a>計算方式</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">當日 N SMA = (Day 1 CP + Day 2 CP + ... + Day N CP) / N</span><br><span class="line"></span><br><span class="line">N : 天數</span><br><span class="line">Day N CP : 第 N 天的收盤價</span><br></pre></td></tr></table></figure><h2 id="舉例陽明-2609-111-x2F-02-x2F-18-的-5-SMA"><a href="#舉例陽明-2609-111-x2F-02-x2F-18-的-5-SMA" class="headerlink" title="舉例陽明(2609) 111&#x2F;02&#x2F;18 的 5 SMA"></a>舉例陽明(2609) 111&#x2F;02&#x2F;18 的 5 SMA</h2><p><code>111/02/18</code> 的收盤價 <code>116.50</code><br><code>111/02/17</code> 的收盤價 <code>112.00</code><br><code>111/02/16</code> 的收盤價 <code>112.50</code><br><code>111/02/15</code> 的收盤價 <code>111.00</code><br><code>111/02/14</code> 的收盤價 <code>110.50</code></p><p>以上 <code>5</code> 天的收盤價加起來等於 <code>562.00</code>，並將其除以 <code>5</code> 等於 <code>112.50</code>，因此 <code>111/02/18</code> 的 <code>5 日移動平均</code> 為 <code>112.50</code>。</p><h2 id="舉例陽明-2609-111-x2F-02-x2F-18-的-10-SMA"><a href="#舉例陽明-2609-111-x2F-02-x2F-18-的-10-SMA" class="headerlink" title="舉例陽明(2609) 111&#x2F;02&#x2F;18 的 10 SMA"></a>舉例陽明(2609) 111&#x2F;02&#x2F;18 的 10 SMA</h2><p><code>111/02/18</code> 的收盤價 <code>116.50</code><br><code>111/02/17</code> 的收盤價 <code>112.00</code><br><code>111/02/16</code> 的收盤價 <code>112.50</code><br><code>111/02/15</code> 的收盤價 <code>111.00</code><br><code>111/02/14</code> 的收盤價 <code>110.50</code><br><code>111/02/11</code> 的收盤價 <code>112.00</code><br><code>111/02/10</code> 的收盤價 <code>114.00</code><br><code>111/02/09</code> 的收盤價 <code>112.00</code><br><code>111/02/08</code> 的收盤價 <code>112.50</code><br><code>111/02/07</code> 的收盤價 <code>108.00</code></p><p>以上 <code>10</code> 天的收盤價加起來等於 <code>1,121.00</code>，並將其除以 <code>10</code> 等於 <code>112.10</code>，因此 <code>111/02/18</code> 的 <code>10 日移動平均</code> 為 <code>112.10</code>。</p><h2 id="舉例陽明-2609-111-x2F-02-x2F-18-的-20-SMA"><a href="#舉例陽明-2609-111-x2F-02-x2F-18-的-20-SMA" class="headerlink" title="舉例陽明(2609) 111&#x2F;02&#x2F;18 的 20 SMA"></a>舉例陽明(2609) 111&#x2F;02&#x2F;18 的 20 SMA</h2><p><code>111/02/18</code> 的收盤價 <code>112.00</code><br><code>111/02/17</code> 的收盤價 <code>113.00</code><br><code>111/02/16</code> 的收盤價 <code>113.50</code><br><code>111/02/15</code> 的收盤價 <code>112.00</code><br><code>111/02/14</code> 的收盤價 <code>111.50</code><br><code>111/02/11</code> 的收盤價 <code>114.00</code><br><code>111/02/10</code> 的收盤價 <code>113.50</code><br><code>111/02/09</code> 的收盤價 <code>114.00</code><br><code>111/02/08</code> 的收盤價 <code>109.00</code><br><code>111/02/07</code> 的收盤價 <code>100.50</code><br><code>111/01/26</code> 的收盤價 <code>96.10</code><br><code>111/01/25</code> 的收盤價 <code>99.00</code><br><code>111/01/24</code> 的收盤價 <code>97.00</code><br><code>111/01/21</code> 的收盤價 <code>103.00</code><br><code>111/01/20</code> 的收盤價 <code>104.00</code><br><code>111/01/19</code> 的收盤價 <code>105.00</code><br><code>111/01/18</code> 的收盤價 <code>104.50</code><br><code>111/01/17</code> 的收盤價 <code>106.00</code><br><code>111/01/14</code> 的收盤價 <code>105.00</code><br><code>111/01/13</code> 的收盤價 <code>108.50</code></p><p>以上 <code>20</code> 天的收盤價加起來等於 <code>2,146.10</code>，並將其除以 <code>20</code> 等於 <code>107.31</code>，因此 <code>111/02/18</code> 的 <code>20 日移動平均</code> 為 <code>107.31</code>。</p><h1 id="範例資料"><a href="#範例資料" class="headerlink" title="範例資料"></a>範例資料</h1><table><thead><tr><th align="left">日期</th><th align="right">開盤價</th><th align="right">最高價</th><th align="right">最低價</th><th align="right">收盤價</th><th align="right">成交量</th><th align="right">5SMA</th><th align="right">10SMA</th><th align="right">20SMA</th></tr></thead><tbody><tr><td align="left">111&#x2F;02&#x2F;18</td><td align="right">112.00</td><td align="right">118.00</td><td align="right">111.00</td><td align="right">116.50</td><td align="right">103,926</td><td align="right">112.50</td><td align="right">112.10</td><td align="right">109.56</td></tr><tr><td align="left">111&#x2F;02&#x2F;17</td><td align="right">113.00</td><td align="right">114.50</td><td align="right">111.50</td><td align="right">112.00</td><td align="right">39,731</td><td align="right">111.60</td><td align="right">110.31</td><td align="right">108.93</td></tr><tr><td align="left">111&#x2F;02&#x2F;16</td><td align="right">113.50</td><td align="right">113.50</td><td align="right">112.00</td><td align="right">112.50</td><td align="right">30,104</td><td align="right">112.00</td><td align="right">108.62</td><td align="right">108.62</td></tr><tr><td align="left">111&#x2F;02&#x2F;15</td><td align="right">112.00</td><td align="right">112.50</td><td align="right">110.50</td><td align="right">111.00</td><td align="right">31,536</td><td align="right">111.90</td><td align="right">108.19</td><td align="right">107.36</td></tr><tr><td align="left">111&#x2F;02&#x2F;14</td><td align="right">111.50</td><td align="right">115.50</td><td align="right">110.50</td><td align="right">110.50</td><td align="right">71,168</td><td align="right">112.20</td><td align="right">107.84</td><td align="right">106.16</td></tr><tr><td align="left">111&#x2F;02&#x2F;11</td><td align="right">114.00</td><td align="right">115.00</td><td align="right">112.00</td><td align="right">112.00</td><td align="right">55,575</td><td align="right">111.70</td><td align="right">107.46</td><td align="right">105.51</td></tr><tr><td align="left">111&#x2F;02&#x2F;10</td><td align="right">113.50</td><td align="right">114.50</td><td align="right">111.50</td><td align="right">114.00</td><td align="right">42,037</td><td align="right">109.02</td><td align="right">106.70</td><td align="right">104.71</td></tr><tr><td align="left">111&#x2F;02&#x2F;09</td><td align="right">114.00</td><td align="right">115.50</td><td align="right">111.00</td><td align="right">112.00</td><td align="right">62,258</td><td align="right">105.24</td><td align="right">105.24</td><td align="right">103.96</td></tr><tr><td align="left">111&#x2F;02&#x2F;08</td><td align="right">109.00</td><td align="right">116.50</td><td align="right">108.50</td><td align="right">112.50</td><td align="right">155,773</td><td align="right">103.55</td><td align="right">103.55</td><td align="right">103.31</td></tr><tr><td align="left">111&#x2F;02&#x2F;07</td><td align="right">100.50</td><td align="right">108.00</td><td align="right">100.00</td><td align="right">108.00</td><td align="right">59,599</td><td align="right">100.57</td><td align="right">100.57</td><td align="right">102.81</td></tr><tr><td align="left">111&#x2F;01&#x2F;26</td><td align="right">96.10</td><td align="right">99.90</td><td align="right">96.10</td><td align="right">98.60</td><td align="right">51,052</td><td align="right">96.85</td><td align="right">96.85</td><td align="right">102.51</td></tr><tr><td align="left">111&#x2F;01&#x2F;25</td><td align="right">99.00</td><td align="right">99.10</td><td align="right">95.10</td><td align="right">95.10</td><td align="right">48,479</td><td align="right">95.10</td><td align="right">95.10</td><td align="right">103.45</td></tr><tr><td align="left">111&#x2F;01&#x2F;24</td><td align="right">97.00</td><td align="right">101.00</td><td align="right">96.50</td><td align="right">99.90</td><td align="right">48,844</td><td align="right">102.68</td><td align="right">105.14</td><td align="right">111.45</td></tr><tr><td align="left">111&#x2F;01&#x2F;21</td><td align="right">103.00</td><td align="right">103.50</td><td align="right">99.00</td><td align="right">99.00</td><td align="right">65,444</td><td align="right">103.80</td><td align="right">106.30</td><td align="right">112.58</td></tr><tr><td align="left">111&#x2F;01&#x2F;20</td><td align="right">104.00</td><td align="right">105.50</td><td align="right">103.50</td><td align="right">104.00</td><td align="right">28,239</td><td align="right">105.50</td><td align="right">107.75</td><td align="right">113.75</td></tr><tr><td align="left">111&#x2F;01&#x2F;19</td><td align="right">105.00</td><td align="right">107.50</td><td align="right">103.00</td><td align="right">104.00</td><td align="right">51,633</td><td align="right">105.70</td><td align="right">108.80</td><td align="right">114.75</td></tr><tr><td align="left">111&#x2F;01&#x2F;18</td><td align="right">104.50</td><td align="right">108.00</td><td align="right">104.00</td><td align="right">106.50</td><td align="right">31,750</td><td align="right">106.50</td><td align="right">109.90</td><td align="right">115.83</td></tr><tr><td align="left">111&#x2F;01&#x2F;17</td><td align="right">106.00</td><td align="right">106.50</td><td align="right">104.50</td><td align="right">105.50</td><td align="right">30,165</td><td align="right">107.60</td><td align="right">110.80</td><td align="right">116.60</td></tr><tr><td align="left">111&#x2F;01&#x2F;14</td><td align="right">105.00</td><td align="right">107.50</td><td align="right">103.00</td><td align="right">107.50</td><td align="right">55,764</td><td align="right">108.80</td><td align="right">111.70</td><td align="right">117.50</td></tr><tr><td align="left">111&#x2F;01&#x2F;13</td><td align="right">108.50</td><td align="right">109.50</td><td align="right">105.00</td><td align="right">105.00</td><td align="right">47,851</td><td align="right">110.00</td><td align="right">113.05</td><td align="right">118.23</td></tr><tr><td align="left">111&#x2F;01&#x2F;12</td><td align="right">113.50</td><td align="right">114.00</td><td align="right">107.50</td><td align="right">108.00</td><td align="right">54,098</td><td align="right">111.90</td><td align="right">115.00</td><td align="right">119.10</td></tr><tr><td align="left">111&#x2F;01&#x2F;11</td><td align="right">112.00</td><td align="right">115.00</td><td align="right">110.50</td><td align="right">112.00</td><td align="right">41,157</td><td align="right">113.30</td><td align="right">116.70</td><td align="right">119.70</td></tr><tr><td align="left">111&#x2F;01&#x2F;10</td><td align="right">111.50</td><td align="right">114.50</td><td align="right">109.00</td><td align="right">111.50</td><td align="right">47,052</td><td align="right">114.00</td><td align="right">117.75</td><td align="right">120.48</td></tr><tr><td align="left">111&#x2F;01&#x2F;07</td><td align="right">115.50</td><td align="right">116.00</td><td align="right">111.00</td><td align="right">113.50</td><td align="right">37,537</td><td align="right">114.60</td><td align="right">118.85</td><td align="right">121.10</td></tr><tr><td align="left">111&#x2F;01&#x2F;06</td><td align="right">113.50</td><td align="right">117.00</td><td align="right">113.50</td><td align="right">114.50</td><td align="right">35,949</td><td align="right">116.10</td><td align="right">119.75</td><td align="right">121.85</td></tr><tr><td align="left">111&#x2F;01&#x2F;05</td><td align="right">115.00</td><td align="right">117.00</td><td align="right">113.50</td><td align="right">115.00</td><td align="right">35,370</td><td align="right">118.10</td><td align="right">120.70</td><td align="right">122.48</td></tr><tr><td align="left">111&#x2F;01&#x2F;04</td><td align="right">115.00</td><td align="right">116.00</td><td align="right">113.50</td><td align="right">115.50</td><td align="right">36,842</td><td align="right">120.10</td><td align="right">121.75</td><td align="right">123.05</td></tr><tr><td align="left">111&#x2F;01&#x2F;03</td><td align="right">120.00</td><td align="right">120.50</td><td align="right">113.00</td><td align="right">114.50</td><td align="right">106,847</td><td align="right">121.50</td><td align="right">122.40</td><td align="right">123.55</td></tr></tbody></table><p>範例資料: 陽明(2609) 111&#x2F;02&#x2F;18 ~ 111&#x2F;01&#x2F;03 個股股價行情<br>資料來源: <a href="https://stock.wearn.com/cdata.asp?Year=111&month=02&kind=2609">https://stock.wearn.com/cdata.asp?Year=111&amp;month=02&amp;kind=2609</a></p>]]></content>
    
    
    <summary type="html">簡單移動平均線(Simple Moving Average, SMA)</summary>
    
    
    
    <category term="投資理財" scheme="https://blog.init.engineer/categories/%E6%8A%95%E8%B3%87%E7%90%86%E8%B2%A1/"/>
    
    <category term="技術指標" scheme="https://blog.init.engineer/categories/%E6%8A%95%E8%B3%87%E7%90%86%E8%B2%A1/%E6%8A%80%E8%A1%93%E6%8C%87%E6%A8%99/"/>
    
    
    <category term="學習筆記" scheme="https://blog.init.engineer/tags/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="簡單移動平均線" scheme="https://blog.init.engineer/tags/%E7%B0%A1%E5%96%AE%E7%A7%BB%E5%8B%95%E5%B9%B3%E5%9D%87%E7%B7%9A/"/>
    
    <category term="SMA" scheme="https://blog.init.engineer/tags/SMA/"/>
    
    <category term="Simple Moving Average" scheme="https://blog.init.engineer/tags/Simple-Moving-Average/"/>
    
  </entry>
  
  <entry>
    <title>利用 Python + OpenCV + ADB 實現 Android 模擬器控制，以彈射世界 World Flipper 為例，操作篇</title>
    <link href="https://blog.init.engineer/posts/UsingPythonOpenCvAdb/"/>
    <id>https://blog.init.engineer/posts/UsingPythonOpenCvAdb/</id>
    <published>2021-11-27T16:00:00.000Z</published>
    <updated>2021-11-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h1><ul><li><a href="https://blog.init.engineer/posts/InstallPythonOpenCvAdb/">安裝篇</a></li><li><a href="https://blog.init.engineer/posts/TestingPythonOpenCvAdb/">測試篇</a></li><li><a href="https://blog.init.engineer/posts/UsingPythonOpenCvAdb/">操作篇(目前這篇)</a></li></ul><p>透過前面兩篇(安裝篇、測試篇)文章，我們建立了 Python 的環境、使用了 adb 控制模擬器，以及透過 OpenCV 來抓出需要點擊的物件，接下來我們需要直接實際操作模擬器，並且做出一個可模組化的程式。</p><p><img src="/img/posts/UsingPythonOpenCvAdb/1.png" alt="展示頁面"></p><p>首先我們可以先讓透過 adb 自動擷取模擬器截圖的動作抽離出來，做成一個 <code>screenshot()</code> 的方法，只要執行這個方法，就會自動執行 adb 指令將模擬器截圖並輸出:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">screenshot</span>():</span><br><span class="line">    subprocess.check_output(<span class="string">&#x27;adb shell /system/bin/screencap -p /sdcard/screencap.png&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    subprocess.check_output(<span class="string">&#x27;adb pull /sdcard/screencap.png ./screencap.png&#x27;</span>, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>再來我們可以把透過 OpenCV 程式判斷這件事情抽離出來，做成一個 <code>scan_screenshot(prepared)</code> 的方法，每次只要丟目標物件進去，程式就自動抓取截圖，並且將判斷回傳:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">scan_screenshot</span>(<span class="params">prepared</span>):</span><br><span class="line">    screenshot = cv2.imread(<span class="string">&#x27;./cache/screencap.png&#x27;</span>)</span><br><span class="line">    result = cv2.matchTemplate(screenshot, prepared, cv2.TM_CCORR_NORMED)</span><br><span class="line">    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;screenshot&#x27;</span>: screenshot, <span class="string">&#x27;min_val&#x27;</span>: min_val, <span class="string">&#x27;max_val&#x27;</span>: max_val, <span class="string">&#x27;min_loc&#x27;</span>: min_loc, <span class="string">&#x27;max_loc&#x27;</span>: max_loc&#125;</span><br></pre></td></tr></table></figure><p>最後我們只需要再寫一個自動計算目標物件方位的方法，把 OpenCV 的計算結果丟進去，然後自動算出 x, y 座標:</p><p><img src="/img/posts/UsingPythonOpenCvAdb/2.png" alt="物件與截圖範例"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calculated</span>(<span class="params">result, shape</span>):</span><br><span class="line">    mat_top, mat_left = result[<span class="string">&#x27;max_loc&#x27;</span>]</span><br><span class="line">    prepared_height, prepared_width, prepared_channels = shape</span><br><span class="line"></span><br><span class="line">    x = &#123;</span><br><span class="line">        <span class="string">&#x27;left&#x27;</span>: <span class="built_in">int</span>(mat_top),</span><br><span class="line">        <span class="string">&#x27;center&#x27;</span>: <span class="built_in">int</span>((mat_top + mat_top + prepared_width) / <span class="number">2</span>),</span><br><span class="line">        <span class="string">&#x27;right&#x27;</span>: <span class="built_in">int</span>(mat_top + prepared_width),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    y = &#123;</span><br><span class="line">        <span class="string">&#x27;top&#x27;</span>: <span class="built_in">int</span>(mat_left),</span><br><span class="line">        <span class="string">&#x27;center&#x27;</span>: <span class="built_in">int</span>((mat_left + mat_left + prepared_height) / <span class="number">2</span>),</span><br><span class="line">        <span class="string">&#x27;bottom&#x27;</span>: <span class="built_in">int</span>(mat_left + prepared_height),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;x&#x27;</span>: x,</span><br><span class="line">        <span class="string">&#x27;y&#x27;</span>: y,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接著就是將上面抽離出來的方法並實際應用即可，再這邊舉兩個例子，分別是判斷目標物件並執行點擊，以及判斷目標物件，再進行二次判斷才執行點擊:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 不斷刷新模擬器截圖</span></span><br><span class="line">        screenshot()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 範例一、判斷目標物件並執行點擊</span></span><br><span class="line">        <span class="comment"># 先從圖庫當中，找出你想偵測的圖片</span></span><br><span class="line">        target = cv2.imread(<span class="string">&#x27;./images/XXX.png&#x27;</span>)</span><br><span class="line">        <span class="comment"># 丟去跟畫面做比對</span></span><br><span class="line">        result = scan_screenshot(target, screen)</span><br><span class="line">        <span class="comment"># 判斷畫面是否有跟圖片相符</span></span><br><span class="line">        <span class="keyword">if</span> result[<span class="string">&#x27;max_val&#x27;</span>] &gt; <span class="number">0.9999</span>:</span><br><span class="line">            <span class="comment"># 對模擬器按圖片的中心點位置</span></span><br><span class="line">            points = util.calculated(result, target.shape)</span><br><span class="line">            subprocess.check_output(<span class="string">&#x27;adb shell input tap %d %d&#x27;</span> % (x, y), shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 範例二、判斷目標物件，再進行二次判斷才執行點擊</span></span><br><span class="line">        <span class="comment"># 先從圖庫當中，找出你想偵測的圖片(1)</span></span><br><span class="line">        target = cv2.imread(<span class="string">&#x27;./images/XXX(1).png&#x27;</span>)</span><br><span class="line">        <span class="comment"># 把圖片(1)丟去跟畫面做比對</span></span><br><span class="line">        result = scan_screenshot(target, screen)</span><br><span class="line">        <span class="comment"># 判斷畫面是否有跟圖片相符</span></span><br><span class="line">        <span class="keyword">if</span> result[<span class="string">&#x27;max_val&#x27;</span>] &gt; <span class="number">0.9999</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[偵測] 有正在進行的任務，要繼續進行該任務嗎？&#x27;</span>)</span><br><span class="line">            <span class="comment"># 先從圖庫當中，找出你想偵測的圖片(2)</span></span><br><span class="line">            target = cv2.imread(<span class="string">&#x27;./images/XXX(2).png&#x27;</span>)</span><br><span class="line">            <span class="comment"># 把圖片(2)丟去跟畫面做比對</span></span><br><span class="line">            result = scan_screenshot(target, screen)</span><br><span class="line">            <span class="comment"># 對模擬器按圖片的中心點位置</span></span><br><span class="line">            points = calculated(result, target.shape)</span><br><span class="line">            subprocess.check_output(<span class="string">&#x27;adb shell input tap %d %d&#x27;</span> % (x, y), shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>以目前這樣的程式來講，仍然有一些問題所在，舉例來說透過 adb 對模擬器進行截圖並儲存起來，再透過 OpenCV 去讀取截圖的這個動作，會對硬碟造成大量讀寫的問題發生，這可能會導致硬碟壽命快速凋零，因此針對這樣的問題也有一個解決方案，就是不要直接將截圖儲存，而是讓它直接在程式之間傳送，走的是記憶體而不是硬碟。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">screenshot</span>():</span><br><span class="line">    pipe = subprocess.Popen(<span class="string">&quot;adb shell screencap -p&quot;</span>, stdin=subprocess.PIPE, stdout=subprocess.PIPE, shell=<span class="literal">True</span>)</span><br><span class="line">    image_bytes = pipe.stdout.read().replace(<span class="string">b&#x27;\r\n&#x27;</span>, <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    image = cv2.imdecode(numpy.fromstring(image_bytes, numpy.uint8), cv2.IMREAD_COLOR)</span><br><span class="line">    <span class="keyword">return</span> image</span><br></pre></td></tr></table></figure><p>這樣呼叫 <code>screenshot()</code> 方法就可以直接得到當前模擬器的截圖畫面，就可以直接在 <code>scan_screenshot()</code> 判斷目標物件的環節當中，直接去抓取當前模擬器截圖去取代讀取模擬器截圖的動作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">scan_screenshot</span>(<span class="params">prepared</span>):</span><br><span class="line">    screenshot = screenshot()</span><br><span class="line">    result = cv2.matchTemplate(screenshot, prepared, cv2.TM_CCORR_NORMED)</span><br><span class="line">    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;screenshot&#x27;</span>: screenshot, <span class="string">&#x27;min_val&#x27;</span>: min_val, <span class="string">&#x27;max_val&#x27;</span>: max_val, <span class="string">&#x27;min_loc&#x27;</span>: min_loc, <span class="string">&#x27;max_loc&#x27;</span>: max_loc&#125;</span><br></pre></td></tr></table></figure><p>到這邊利用 Python + OpenCV + ADB 實現 Android 模擬器控制就差不多告一段落，如果更伸下去著墨的話，還可以有很多花樣可以探索，就留給大家去摸索了。</p>]]></content>
    
    
    <summary type="html">最近在研究如何透過 OpenCV 來偵測畫面物件，並透過 ADB 來對 Android 模擬器做控制的動作，不過在此之前需要先做一個聲明，以下研究皆以學習、研究為目的 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="Python 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/Python-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="python" scheme="https://blog.init.engineer/tags/python/"/>
    
    <category term="opencv" scheme="https://blog.init.engineer/tags/opencv/"/>
    
    <category term="adb" scheme="https://blog.init.engineer/tags/adb/"/>
    
    <category term="android" scheme="https://blog.init.engineer/tags/android/"/>
    
    <category term="using" scheme="https://blog.init.engineer/tags/using/"/>
    
  </entry>
  
  <entry>
    <title>利用 Python + OpenCV + ADB 實現 Android 模擬器控制，以彈射世界 World Flipper 為例，測試篇</title>
    <link href="https://blog.init.engineer/posts/TestingPythonOpenCvAdb/"/>
    <id>https://blog.init.engineer/posts/TestingPythonOpenCvAdb/</id>
    <published>2021-11-26T16:00:00.000Z</published>
    <updated>2021-11-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h1><ul><li><a href="https://blog.init.engineer/posts/InstallPythonOpenCvAdb/">安裝篇</a></li><li><a href="https://blog.init.engineer/posts/TestingPythonOpenCvAdb/">測試篇(目前這篇)</a></li><li><a href="https://blog.init.engineer/posts/UsingPythonOpenCvAdb/">操作篇</a></li></ul><p>透過安裝篇的文章，我們已經將 Python、OpenCV、ADB 這些環境處理完畢了，接下來我們需要進行測試，測試 ADB 是否能夠抓取模擬器的螢幕截圖、測試 OpenCV 是否能夠抓取我們所想要的圖片，並且計算其位置、其準確率。</p><h1 id="測試-ADB-截圖"><a href="#測試-ADB-截圖" class="headerlink" title="測試 ADB 截圖"></a>測試 ADB 截圖</h1><p>首先第一步我們需要測試的是「測試 ADB 是否能夠抓取模擬器的螢幕截圖」，這邊我們會需要 <code>import os</code> 引入，並且透過 <code>os.popen</code> 去呼叫 adb 指令來進行模擬器截圖、模擬器輸出圖片的動作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 讓程式持續運作</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 透過 adb 去將模擬器截圖起來儲存於 sdcard 當中</span></span><br><span class="line">        os.system(<span class="string">&#x27;adb shell /system/bin/screencap -p /sdcard/screencap.png&#x27;</span>)</span><br><span class="line">        <span class="comment"># 透過 adb 將模擬器儲存的截圖輸出到專案根目錄底下</span></span><br><span class="line">        os.system(<span class="string">&#x27;adb pull /sdcard/screencap.png ./screencap.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>不過我們會發現終端機不斷地輸出訊息如下:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/sdcard/screencap.png: 1 file pulled, 0 skipped. 38.9 MB/s (401994 bytes in 0.010s)</span><br><span class="line">/sdcard/screencap.png: 1 file pulled, 0 skipped. 47.1 MB/s (468572 bytes in 0.009s)</span><br><span class="line">/sdcard/screencap.png: 1 file pulled, 0 skipped. 41.2 MB/s (469204 bytes in 0.011s)</span><br><span class="line">/sdcard/screencap.png: 1 file pulled, 0 skipped. 22.9 MB/s (467375 bytes in 0.019s)</span><br><span class="line">/sdcard/screencap.png: 1 file pulled, 0 skipped. 56.3 MB/s (468928 bytes in 0.008s)</span><br><span class="line">/sdcard/screencap.png: 1 file pulled, 0 skipped. 48.3 MB/s (468177 bytes in 0.009s)</span><br><span class="line">/sdcard/screencap.png: 1 file pulled, 0 skipped. 46.9 MB/s (468718 bytes in 0.010s)</span><br><span class="line">/sdcard/screencap.png: 1 file pulled, 0 skipped. 53.9 MB/s (468843 bytes in 0.008s)</span><br><span class="line">/sdcard/screencap.png: 1 file pulled, 0 skipped. 55.6 MB/s (468152 bytes in 0.008s)</span><br><span class="line">/sdcard/screencap.png: 1 file pulled, 0 skipped. 41.6 MB/s (468735 bytes in 0.011s)</span><br></pre></td></tr></table></figure><p>如果我們希望系統不要輸出這些資訊，那我們就要換另一種寫法，使用 <code>subprocess</code> 的 <code>check_output</code> 來呼叫 adb 指令。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 讓程式持續運作</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 透過 adb 去將模擬器截圖起來儲存於 sdcard 當中</span></span><br><span class="line">        subprocess.check_output(<span class="string">&#x27;adb shell /system/bin/screencap -p /sdcard/screencap.png&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 透過 adb 將模擬器儲存的截圖輸出到專案根目錄底下</span></span><br><span class="line">        subprocess.check_output(<span class="string">&#x27;adb pull /sdcard/screencap.png ./screencap.png&#x27;</span>, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>這樣我們就可以在根目錄底下獲得 <code>screencap.png</code> 這個螢幕截圖了，而且根據程式持續運作，這張截圖會不斷更新模擬器最新的畫面，既然我們現在已經能將模擬器實時截圖並輸出到專案的根目錄當中了，那麼接下來我們需要測試 OpenCV 能不能偵測我們想要的目標物件，並且將目標物件透過畫框的方式繪製出範圍。</p><h1 id="測試-OpenCV-偵測物件"><a href="#測試-OpenCV-偵測物件" class="headerlink" title="測試 OpenCV 偵測物件"></a>測試 OpenCV 偵測物件</h1><p>首先我們需要有一個主要的螢幕截圖，這裡我們稱做 <code>screencap.png</code>，以及我們的目標 <code>prepared.png</code>，而我們希望達成的事情是透過 OpenCV 去找尋 <code>screencap.png</code> 當中有沒有符合 <code>prepared.png</code> 的地方，其座標、相符率有多少。</p><p><img src="/img/posts/TestingPythonOpenCvAdb/1.png" alt="物件與截圖範例"></p><p>首先我們需要 <code>import cv2</code> 引入，然後透過 <code>cv2.imread</code> 來載入 <code>screencap.png</code> 螢幕截圖以及載入 <code>prepared.png</code> 目標物件，再來透過 <code>cv2.matchTemplate</code> 來計算 <code>screencap.png</code> 螢幕截圖當中，與 <code>prepared.png</code> 目標物件有多少相符率，以及其座標位置，再來透過 <code>cv2.rectangle</code> 來繪製目標物件的位置及大小，最後以 <code>cv2.imwrite</code> 的方式來輸出圖片並儲存為 <code>output.png</code>，整個流程到處都會使用到 <code>cv2</code> 的功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 讓程式持續運作</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 螢幕截圖</span></span><br><span class="line">        screenshot = cv2.imread(<span class="string">&#x27;./screencap.png&#x27;</span>)</span><br><span class="line">        <span class="comment"># 目標取樣</span></span><br><span class="line">        prepared = cv2.imread(<span class="string">&#x27;./prepared.png&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># matchTemplate(image, templ, method[, result])</span></span><br><span class="line">        <span class="comment">#   - image</span></span><br><span class="line">        <span class="comment">#       - 被尋找的圖片，必須為 8-bit or 32-bit</span></span><br><span class="line">        <span class="comment">#   - templ</span></span><br><span class="line">        <span class="comment">#       - 尋找的物品圖片，size 不能大於 image，且格式需一致</span></span><br><span class="line">        <span class="comment">#   - method</span></span><br><span class="line">        <span class="comment">#       - 比對的方法</span></span><br><span class="line">        <span class="comment">#           - TM_SQDIFF         | 平方差，越小越相似</span></span><br><span class="line">        <span class="comment">#           - TM_SQDIFF_NORMED  | 正規化平方差，越小越相似</span></span><br><span class="line">        <span class="comment">#           - TM_CCORR          | 相關係數，越大越相似</span></span><br><span class="line">        <span class="comment">#           - TM_CCORR_NORMED   | 正規化相關係數，越大越相似</span></span><br><span class="line">        <span class="comment">#           - TM_CCOEFF         | 去掉直流成份的相關係數，越大越相似</span></span><br><span class="line">        <span class="comment">#           - TM_CCOEFF_NORMED  | 正規化 去掉直流成份的相關係數</span></span><br><span class="line">        <span class="comment">#   - result</span></span><br><span class="line">        <span class="comment">#       - 比較的結果，格式為 numpy.ndarray (dtype=float32)</span></span><br><span class="line">        result = cv2.matchTemplate(screenshot, prepared, cv2.TM_CCORR_NORMED)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 取得搜尋結果最大值、最小值</span></span><br><span class="line">        <span class="comment"># 計算矩陣 Mat 中最大值、最小值、返回最大最小的索引</span></span><br><span class="line">        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># TM_CCORR_NORMED 最大值</span></span><br><span class="line">        mat_top, mat_left = max_loc</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 取得目標取樣的高度及寬度</span></span><br><span class="line">        <span class="comment"># image.shape = (height, width, channels)</span></span><br><span class="line">        prepared_height, prepared_width, prepared_channels = prepared.shape</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 取得需要繪製終點的右下位置(左上 + 高, 左上 + 寬)</span></span><br><span class="line">        bottom_right = (mat_top + prepared_width, mat_left + prepared_height)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 繪製長方形(左上 + 高, 左上 + 寬)</span></span><br><span class="line">        <span class="comment"># rectangle(繪製物件, 繪製的起始位置(x, y), 繪製的終點位置(x, y), 繪製顏色(RGB), 線條寬度)</span></span><br><span class="line">        cv2.rectangle(screenshot, (mat_top, mat_left), bottom_right, (<span class="number">101</span>, <span class="number">67</span>, <span class="number">196</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 輸出圖片結果</span></span><br><span class="line">        cv2.imwrite(<span class="string">&#x27;./output.png&#x27;</span>, screenshot)</span><br></pre></td></tr></table></figure><p>透過這樣的程式碼，我們可以獲得一個非常成功的輸出結果。</p><p><img src="/img/posts/TestingPythonOpenCvAdb/2.png" alt="輸出後的結果"></p><p>但目前這樣有個缺點，在畫面有我們所想找的目標物件時，OpenCV 可以精確地找到目標物件的位置，但如果目前畫面沒有目標物件時，OpenCV 仍然會找出相似度最高的物件，這會導致我們的程式一直在判斷錯誤的地方執行觸發，直到有正確目標物件出現時才能觸發正確的事件，為了避免這樣的情況發生，我們必須去比對 <code>max_val</code> 這項數值，這項數值意旨目標物件的相似率，所以我們可以這樣設計，先讓 OpenCV 去計算目標物件，然後判斷 <code>max_val</code> 這項數值有沒有大於一定的百分比，如果有才進行動作，並且結合前面 adb 擷取螢幕截圖的部份的話，我們就可以寫出一個實時監控的程式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 讓程式持續運作</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        subprocess.check_output(<span class="string">&#x27;adb shell /system/bin/screencap -p /sdcard/screencap.png&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        subprocess.check_output(<span class="string">&#x27;adb pull /sdcard/screencap.png ./screencap.png&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        screenshot = cv2.imread(<span class="string">&#x27;./screencap.png&#x27;</span>)</span><br><span class="line">        prepared = cv2.imread(<span class="string">&#x27;./prepared.png&#x27;</span>)</span><br><span class="line">        result = cv2.matchTemplate(screenshot, prepared, cv2.TM_CCORR_NORMED)</span><br><span class="line">        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> max_val &gt;= <span class="number">0.99</span>:</span><br><span class="line">            mat_top, mat_left = max_loc</span><br><span class="line">            prepared_height, prepared_width, prepared_channels = prepared.shape</span><br><span class="line">            bottom_right = (mat_top + prepared_width, mat_left + prepared_height)</span><br><span class="line">            cv2.rectangle(screenshot, (mat_top, mat_left), bottom_right, (<span class="number">101</span>, <span class="number">67</span>, <span class="number">196</span>), <span class="number">2</span>)</span><br><span class="line">            cv2.imwrite(<span class="string">&#x27;./output.png&#x27;</span>, screenshot)</span><br></pre></td></tr></table></figure><p>到這邊為止，測試篇的內容就差不多了，我們測試了 adb 對模擬器的控制，以及 OpenCV 去判斷截圖的偵測，下一篇將講述如何結合 OpenCV 並透過 adb 去控制模擬器，做出相對應的動作。</p><p>下一篇文章：<a href="https://blog.init.engineer/posts/UsingPythonOpenCvAdb/">操作篇</a></p>]]></content>
    
    
    <summary type="html">透過安裝篇的文章，我們已經將 Python、OpenCV、ADB 這些環境處理完畢了，接下來我們需要進行測試，測試 ADB 是否能夠抓取模擬器的螢幕截圖、測試 OpenCV 是否能夠抓取我們所想要的圖片，並且計算其位置、其準確率 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="Python 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/Python-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="python" scheme="https://blog.init.engineer/tags/python/"/>
    
    <category term="opencv" scheme="https://blog.init.engineer/tags/opencv/"/>
    
    <category term="adb" scheme="https://blog.init.engineer/tags/adb/"/>
    
    <category term="android" scheme="https://blog.init.engineer/tags/android/"/>
    
    <category term="testing" scheme="https://blog.init.engineer/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>利用 Python + OpenCV + ADB 實現 Android 模擬器控制，以彈射世界 World Flipper 為例，安裝篇</title>
    <link href="https://blog.init.engineer/posts/InstallPythonOpenCvAdb/"/>
    <id>https://blog.init.engineer/posts/InstallPythonOpenCvAdb/</id>
    <published>2021-11-25T16:00:00.000Z</published>
    <updated>2021-11-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h1><ul><li><a href="https://blog.init.engineer/posts/InstallPythonOpenCvAdb/">安裝篇(目前這篇)</a></li><li><a href="https://blog.init.engineer/posts/TestingPythonOpenCvAdb/">測試篇</a></li><li><a href="https://blog.init.engineer/posts/UsingPythonOpenCvAdb/">操作篇</a></li></ul><p>最近在研究如何透過 <code>OpenCV</code> 來偵測畫面物件，並透過 <code>ADB</code> 來對 Android 模擬器做控制的動作，不過在此之前需要先做一個聲明，以下研究皆以學習、研究為目的。</p><h1 id="ADB-Android-Debug-Bridge"><a href="#ADB-Android-Debug-Bridge" class="headerlink" title="ADB(Android Debug Bridge)"></a>ADB(Android Debug Bridge)</h1><p>對於 Android 開發人員而言 ADB(Android Debug Bridge) 這項工具一定不陌生，是 Android 的開發工具之一，透過 USB 或者 TCP 連接 Android 設備，並對其設備做出控制的動作，像試列出可用的裝置、安裝 APK 檔案、在 Android 系統上執行命令或從模擬器或裝置擷取檔案。</p><p>ADB 的詳細資訊可以參考 Android 的官方文件：</p><ul><li><a href="https://developer.android.com/studio/command-line/adb">Android Debug Bridge (adb) - Android Developers</a></li></ul><p>因此我們需要先安裝 Android SDK Platform Tools，</p><ol><li>下載 <a href="https://developer.android.com/studio/releases/platform-tools">Android SDK Platform Tools</a></li><li>丟到任意地方，例如根目錄(C:)當中</li><li>將其設定為環境變數，<code>系統</code> -&gt; <code>進階系統設定</code> -&gt; <code>環境變數(N)</code> -&gt; <code>Path</code> -&gt; <code>編輯(I)...</code> -&gt; <code>新增(N)</code> -&gt; <code>貼上 platform-tools 的路徑</code> -&gt; <code>確定</code></li><li>打開 CMD(命令提示字元) 測試看看能不能抓到 adb，直接輸入 <code>adb</code> 理論上應該可以看到下面這樣的輸出:</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\KanTai&gt;adb</span><br><span class="line">Android Debug Bridge version 1.0.41</span><br><span class="line">Version 31.0.3-7562133</span><br><span class="line">Installed as C:\platform-tools\adb.exe</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>接下來我們需要測試 ADB 是否能夠正常抓到 Android 模擬器，所以試試看 <code>adb devices</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\KanTai&gt;adb devices</span><br><span class="line">* daemon not running; starting now at tcp:5037</span><br><span class="line">* daemon started successfully</span><br><span class="line">List of devices attached</span><br><span class="line">emulator-5554   device</span><br></pre></td></tr></table></figure><p>可以看到在 <code>List of devices</code> 當中有抓到 <code>emulator-5554</code> 這個裝置，這代表我們 ADB 的部分已經設置完畢了，我們可以透過相關指令來對模擬器做出控制的動作，接下來我們需要準備 <code>Python</code> 以及 <code>OpenCV</code> 這兩樣東西，首先我們需要安裝 <code>Python</code>。</p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><blockquote><p>Python 是一種廣泛使用的直譯式、進階和通用的程式語言。Python 支援多種程式設計範式，包括函數式、指令式、結構化、物件導向和反射式程式。它擁有動態型別系統和垃圾回收功能，能夠自動管理記憶體使用，並且其本身擁有一個巨大而廣泛的標準庫。 </p><p>取自於 <a href="https://zh.wikipedia.org/zh-tw/Python">維基百科</a></p></blockquote><ul><li><a href="https://www.python.org/">Python 官網</a></li><li><a href="https://www.python.org/downloads">Python 下載</a></li></ul><p>另外為了能夠撰寫 <code>Python</code> 的程式，我們需要有一個程式語言編輯器，在這邊我會推薦 <code>VSCode(Visual Studio Code)</code>，</p><blockquote><p>Visual Studio Code 是一款由微軟開發且跨平台的免費原始碼編輯器。該軟體支援語法突顯、代碼自動補全、代碼重構功能，並且內建了命令列工具和 Git 版本控制系統。使用者可以更改主題和鍵盤捷徑實現個性化設定，也可以通過內建的擴充程式商店安裝擴充以拓展軟體功能。</p><p>取自於 <a href="https://zh.wikipedia.org/zh-tw/Visual_Studio_Code">維基百科</a></p></blockquote><ul><li><a href="https://code.visualstudio.com/">Visual Studio Code 官網</a></li><li><a href="https://code.visualstudio.com/download">Visual Studio Code 下載</a></li></ul><p>接著我們需要嘗試看看能不能直接撰寫 <code>Python</code> 程式，我們可以透過 <code>VSCode</code> 新增一個 <code>index.py</code> 檔案，並且寫一個簡單的 Hello World 程式碼來直接運行:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br></pre></td></tr></table></figure><p>理論上我們直接運行後，可以獲得 <code>Hello World</code> 的輸出，到這邊為止 <code>Python</code> 的準備就已經進行得差不多了，接下來只要準備最後一個項目，也就是 <code>OpenCV</code> 以後，就可以開始嘗試撰寫控制 Android 模擬器的程式。</p><p><img src="/img/posts/InstallPythonOpenCvAdb/1.png" alt="測試 Python"></p><h1 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h1><p><code>OpenCV(Open Source Computer Vision Library)</code> 是一個跨平台的電腦視覺套件，也是我們這次練習主要的套件，我們需要透過 <code>OpenCV</code> 來將目標物件與螢幕截圖做比對，並計算出相似區塊、相似度等重要數值。</p><p>為了使用 <code>OpenCV</code> 我們需要先安裝它，而安裝它的方式有兩種，一種是直接透過 <code>pip</code> 來對其安裝，直接在 CMD(命令提示字元) 當中輸入並執行 <code>pip install opencv-python</code> 即可，另外一種方式是在專案當中新增一個 <code>requirements.txt</code> 文件，並將專案會使用的套件寫到這份文件當中，只要輸入並執行 <code>pip install -r requirements.txt</code> 這項指令，就可以將複數套件一次安裝齊全。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接安裝 OpenCV Python</span></span><br><span class="line">pip install opencv-python</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">透過 requirements.txt 來安裝相依套件</span></span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p><code>requirements.txt</code> 檔案的內容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opencv-python</span><br></pre></td></tr></table></figure><p>到這邊為止，安裝篇的內容就進行得差不多了，接下來我們會進入測試的環節，測試 ADB 是否能夠抓取模擬器的螢幕截圖、測試 OpenCV 是否能夠抓取我們所想要的圖片，並且計算其位置、其準確率。</p><p>下一篇文章：<a href="https://blog.init.engineer/posts/TestingPythonOpenCvAdb/">測試篇</a></p>]]></content>
    
    
    <summary type="html">最近在研究如何透過 OpenCV 來偵測畫面物件，並透過 ADB 來對 Android 模擬器做控制的動作，不過在此之前需要先做一個聲明，以下研究皆以學習、研究為目的 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="Python 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/Python-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="python" scheme="https://blog.init.engineer/tags/python/"/>
    
    <category term="opencv" scheme="https://blog.init.engineer/tags/opencv/"/>
    
    <category term="adb" scheme="https://blog.init.engineer/tags/adb/"/>
    
    <category term="android" scheme="https://blog.init.engineer/tags/android/"/>
    
    <category term="install" scheme="https://blog.init.engineer/tags/install/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Laravel 上的 Livewire 當中使用 VueJS</title>
    <link href="https://blog.init.engineer/posts/LaravelLivewireImportVue/"/>
    <id>https://blog.init.engineer/posts/LaravelLivewireImportVue/</id>
    <published>2021-09-02T16:00:00.000Z</published>
    <updated>2021-09-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Laravel 當中有個讓前後端無痛溝通的技術叫做 <a href="https://laravel-livewire.com/">Livewire</a>，它可以讓你輕鬆建立起單頁應用程式(Single Page Application, SPA)，但它也有個小問題，就是如果你在 Livewire 當中使用 Vue Component 元件的話，那在 Livewire 第一次渲染時，Livewire 可以正常渲染你的 Vue 元件，但在你執行 Livewire 的搜尋、排序或分頁 Pagination 功能後，Vue 元件將會失效。</p><p><img src="/img/posts/LaravelLivewireImportVue/1.jpg" alt="渲染畫面"><br>Livewire 頁面載入後，第一次渲染畫面</p><p><img src="/img/posts/LaravelLivewireImportVue/2.jpg" alt="搜尋結果"><br>Livewire 執行排序後，原本的 Vue 元件將失效</p><p>這是因為 Livewire 的運作模式會改變 DOM 的結構，造成 JavaScript 的失效，而 Vue 是使用 Virtual DOM 結構，是以 JavaScript 物件模擬特定 DOM 結構而產生的樹狀結構，因此當 Livewire 運作時，Vue 的 Virtual DOM 並不會因此跟著變更，才會導致 Livewire 的元件是正常顯示的，而 Vue 元件則停止運作。</p><blockquote><p>The reason I ask is because, the way Livewire works, it breaks JavaScript libraries when Livewire changes DOM elements.<br><a href="https://github.com/livewire/livewire/discussions/1949#discussioncomment-120277">https://github.com/livewire/livewire/discussions/1949#discussioncomment-120277</a></p></blockquote><h1 id="解決方案"><a href="#解決方案" class="headerlink" title="解決方案"></a>解決方案</h1><p>目前這項問題的解決方案是使用 <a href="https://github.com/livewire/vue">Livewire VueJS Support Plugin</a> 這個套件，它可以允許你在同一個頁面下使用 Livewire 並且不影響 Vue 元件的運行。</p><p>你可以透過 <code>CDN</code> 的方式去引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    ...</span><br><span class="line">    @livewireScripts</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/livewire/vue@v0.3.x/dist/livewire-vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者是 <code>NPM</code> 的方式去安裝套件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install livewire-vue --save-dev</span><br></pre></td></tr></table></figure><p>最後在你的 package 當中導入它</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;livewire-vue&#x27;</span></span><br><span class="line"><span class="comment">// Or.</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;livewire-vue&#x27;</span>)</span><br></pre></td></tr></table></figure><p>而我選擇的方式是在我的 <code>App.js</code> 當中去引用 Vue 的同時，也去引入 <code>livewire-vue</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;livewire-vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">Vue</span> = <span class="title class_">Vue</span>;</span><br></pre></td></tr></table></figure><p>但切記引入 <code>livewire-vue</code> 的同時，還需要去 script 當中去引入 <code>@livewireScripts</code>，並且要注意到 script 的引入順序會影響到 <code>livewire-vue</code>，如果你有其他 script 需要引入，那麼 <code>livewire-vue</code> 應該要被引入在最前面的位置，範例如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    ...</span><br><span class="line">    @stack(&#x27;before-scripts&#x27;)</span><br><span class="line">    @livewireScripts()</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; mix(&#x27;js/manifest.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; mix(&#x27;js/vendor.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; mix(&#x27;js/frontend.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    @stack(&#x27;after-scripts&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另外你可能會遇到 Livewire 未定義的問題</p><blockquote><p>Uncaught ReferenceError: Livewire is not defined<br>Uncaught Livewire Vue Plugin: window.livewire is undefined. Make sure @livewireScripts is placed above this script include<br><a href="https://github.com/livewire/livewire/issues/2339">https://github.com/livewire/livewire/issues/2339</a></p></blockquote><p>如果您希望 JavaScript Assets 由您的 Web 伺服器提供，而不是通過 Laravel 提供服務，請使用 <code>livewire:publish</code> 命令：<br>這個問題可以透過將 JavaScript Assets 由你的 Web 伺服器提供，而不是透過 Laravel 來提供，你只需要使用 <code>livewire:publish</code> 來將 Assets 產生於 <code>public/verdon</code> 之下即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan livewire:publish --assets</span><br></pre></td></tr></table></figure><ul><li><a href="https://laravel-livewire.com/docs/2.x/installation">Publishing Frontend Assets</a></li></ul><p>不過到這邊為止，也僅能解決 Livewire 在執行搜尋、排序的情況下，不去影響 Vue 元件的運行，但分頁 Pagination 的部分依舊會導致 Vue 元件無法正常運作，在 Livewire VueJS Support Plugin 的 Issues 當中也有人提到這點，關於 Livewire 在分頁 Pagination 之後 VueJS 無法載入或執行的問題，但這項問題目前仍然沒有解決。</p><blockquote><p><a href="https://github.com/livewire/vue/issues/26">https://github.com/livewire/vue/issues/26</a></p></blockquote><p>有人提到 Livewire 與 VueJS 之間不是一個適合的搭配，如果強制在 Livewire 當中使用 Vue 元件，這有違背 Livewire 的運作模式，在這情況之下，Vue 元件的執行或 DOM Tree 方面仍然存在許多問題，對此 Livewire 本身也有推薦指定的頁面互動框架，那便是 <a href="https://laravel-livewire.com/docs/2.x/alpine-js">AlpineJS</a>。</p><h1 id="個人觀感"><a href="#個人觀感" class="headerlink" title="個人觀感"></a>個人觀感</h1><p>Livewire 本身模糊化了前端與後端之間的界線，會需要解決這項問題，很大一個成分是如果有前端工程師與後端工程師的情況下，雙方如何共同合作，生產出一個具有交互式的單頁應用程式，最好的情況下是前端會需要學習 AlpineJS 如何使用，這情況下會是最佳解，否則後端工程師可能會需要屈就協助撰寫，但這就會導致前後端工作分配不平均的問題，如果今天後端是選擇使用 Laravel 的話，而前端是個菜菜的 Vue 前端工程師，那專案的進展可能會很辛苦，要嘛後端扛起 Livewire + Alpine，後端兼職前端，只是這樣前端工程師就真的不曉得要拿來幹嘛了，要麻前端努力一點，去學習一下 AlpineJS 吧。</p>]]></content>
    
    
    <summary type="html">在 Laravel 當中有個讓前後端無痛溝通的技術叫做 Livewire，它可以讓你輕鬆建立起單頁應用程式，但它也有個小問題 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="Laravel 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/Laravel-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="laravel" scheme="https://blog.init.engineer/tags/laravel/"/>
    
    <category term="livewire" scheme="https://blog.init.engineer/tags/livewire/"/>
    
    <category term="vue" scheme="https://blog.init.engineer/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>（偽教學）乾太教我之（好讀版）如何使用 PHP 在網頁上顯示文字</title>
    <link href="https://blog.init.engineer/posts/FackPHPTeaching1/"/>
    <id>https://blog.init.engineer/posts/FackPHPTeaching1/</id>
    <published>2021-08-28T16:00:00.000Z</published>
    <updated>2021-08-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>【乾太教我之（好讀版）<br>如何使用 PHP 在網頁上顯示文字】</p><p>這個方法是我以前還在讀書時，看到一位前輩的做法，由於太過於印象深刻了，所以拿來當作第一次「乾太教我」的教材。</p><p>先備知識：略懂 <code>HTML</code> 與 <code>Java 的 Script</code></p><p>首先我們要知道 <code>PHP</code> 的副檔名為 <code>.php</code>，但是你把副檔名改成 <code>.php</code> 直接丟到瀏覽器上並不會運行，通常你需要有個伺服器負責去執行它，像是 <code>Apache</code> 或 <code>Nginx</code> 之類的，有了這些之後，我們就可以開始寫 <code>PHP</code> 了！</p><p>在網頁當中為了插入 <code>PHP</code> 的片段，我們需要在開始的地方寫 <code>&lt;?php</code> 來作為宣告的開始，並且使用 <code>?&gt;</code> 來作為結束，好的，到這邊你已經學會如何安插 <code>PHP</code> 到你的網頁應用程式上了，非常棒！</p><p>為了做到網頁上的互動，所以我們簡單舉個倒數計時器的例子，因為會需要使用 Java 的 Script 來顯示，但為了善用 <code>PHP</code> 所以我們要將 <code>alert</code> 包起來，就像這樣</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;alert(&quot;倒數計時: &quot; + &#x27;</span> . <span class="variable">$i</span> . <span class="string">&#x27;+ &quot; 秒鐘&quot;)&lt;/script&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>有點複雜嗎？我也這麼覺得，不愧是大前輩寫的。</p><p>在來為了讓 <code>$i</code> 這個東西變成一個變數去倒數計時，我們需要在此之前去宣告 <code>&lt;?php $i = 5; ?&gt;</code> 這個變數，以 5 秒鐘為例子。</p><p>然後為了讓這個倒數計時器能夠倒數，所以我們改使用 for 迴圈來跑，因此就變成這樣</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">5</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;alert(&quot;倒數計時: &quot; + &#x27;</span> . <span class="number">5</span> - <span class="variable">$i</span> . <span class="string">&#x27;+ &quot; 秒鐘&quot;)&lt;/script&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可是這樣寫完，執行下去它會瞬間跑完，為了讓它能夠每秒暫停，所以我們需要在 <code>for</code> 迴圈當中加入 <code>sleep(1)</code> 讓它每秒暫停 1 秒，最後會變成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">5</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;alert(&quot;倒數計時: &quot; + &#x27;</span> . <span class="number">5</span> - <span class="variable">$i</span> . <span class="string">&#x27;+ &quot; 秒鐘&quot;)&lt;/script&gt;&#x27;</span>;</span><br><span class="line">        <span class="title function_ invoke__">sleep</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>恭喜你使用 <code>PHP</code> 寫出了一個簡易的倒數計時器了！給自己鼓掌鼓掌吧！</p><p>以上是當我被人說很電、佬、教嗎之類的時候，有時候會回想到以前被人教的回憶，因為這做法還蠻經典的，所以拿出來分享給大家。</p><p>喜歡的話請記得按讚訂閱開啟小鈴鐺，並且分享給你每～一位朋友，每週不固定分享有趣的開發大小事，我們下週見，掰逼！</p>]]></content>
    
    
    <summary type="html">這個方法是我以前還在讀書時，看到一位前輩的做法，由於太過於印象深刻了，所以拿來當作第一次「乾太教我」的教材。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="php" scheme="https://blog.init.engineer/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>如何開出一份好的職缺？</title>
    <link href="https://blog.init.engineer/posts/HowToWriteAGoodJobVacancy/"/>
    <id>https://blog.init.engineer/posts/HowToWriteAGoodJobVacancy/</id>
    <published>2021-06-08T16:00:00.000Z</published>
    <updated>2021-06-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/posts/HowToWriteAGoodJobVacancy/1.png" alt="版友私訊"></p><p>前幾天收到了版友私訊請教徵才相關問題，不過我沒有 HR 這方面的經驗，也沒有開過職缺這件事，所以在這方面可能沒辦法提供甚麼好的建言 QQ 但身為一個後端開發者，看過不少相關的職缺，也做過幾份工作，或許我可以分享一下我自己在找工作時，喜歡看到甚麼樣的職缺。</p><p>我會建議至少先跟公司內的工程師或主管聊過會比較妥當，至少先了解公司內所採用的技術有哪些，你可以搭配下面的「2021 年成為 Web 開發人員的路線圖」當中的「後端 Back-end 路線圖」，把聽到的關鍵字都圈起來，稍作整理就是很好的職缺條件要求了，如果今天換成是前端徵才、DevOps 徵才，就換相對應的路線圖依樣畫葫蘆。</p><p>2021 年成為 Web 開發人員的路線圖<br>👉 <a href="https://github.com/goodjack/developer-roadmap-chinese">https://github.com/goodjack/developer-roadmap-chinese</a></p><p>當你把一些資訊準備充足了以後，接下來就是撰寫一份吸引人的職缺了，大致上會有公司介紹、制度、工作內容、薪資、條件及福利，這邊我歸納了可以嘗試的做法，以及不太建議的做法來提供參考。</p><h2 id="0️⃣-公司介紹"><a href="#0️⃣-公司介紹" class="headerlink" title="0️⃣ - 公司介紹"></a>0️⃣ - 公司介紹</h2><p>向求職者介紹公司在做甚麼是一件很重要的事，這可以讓我能夠想像未來我在工作時的樣貌，就有點像事你在尋找你的晚餐，有些店的菜單是直接把餐點的圖片亮出來給你看，而有些店的菜單只有餐點名稱其餘都沒有，這兩者之間是差很大的。<br>(✔️可以嘗試)<br>    &gt; Velodash 是一家專注於戶外活動安全解決方案的新創公司。<br>    &gt; 我們要解決戶外活動主辦者在管理活動中遇到的種種問題，像是整合最新活動內容，提供路線規劃，即時事件回報，和任務指派。<br>    &gt; 目前 Velodash 已經在台灣，日本和新加坡取得一定知名度，也在 2018 新加坡國慶騎乘被指定為官方 app。<br>    &gt; 2019 獲得國內與海外投資，因此我們要加速往海外市場發展，把 Velodash 推向日本和歐美，歡迎加入 Velodash！<br>(❌不太建議)<br>    &gt; 我們有專業的工程團隊，致力於高品質程式碼。<br>    &gt; 誠摯的歡迎您加入我們的團隊！<br>在這邊感謝瓜瓜願意提供他們公司的介紹，作為本次的優秀範例。</p><h2 id="1️⃣-公司制度"><a href="#1️⃣-公司制度" class="headerlink" title="1️⃣ - 公司制度"></a>1️⃣ - 公司制度</h2><p>介紹完公司，也需要提到公司制度的方面，你可以提到上班時段、公司提供那些法定項目。<br>(✔️可以嘗試)<br>    &gt; 上班時間 09:00 - 18:00 中間休息 1 個小時<br>    &gt; 有 1 個小時的時間可彈性調整，晚點到就晚點下班<br>(❌不太建議)<br>    &gt; 採責任制<br>    &gt; 上班時間依公司規定<br>另外我會建議把一些法定項目歸納在這邊，不要把法定項目拿去公司福利。</p><h2 id="2️⃣-工作內容"><a href="#2️⃣-工作內容" class="headerlink" title="2️⃣ - 工作內容"></a>2️⃣ - 工作內容</h2><p>如果我錄取了這間公司，我平常需要做的事情是甚麼？我的工作範疇到哪邊？我可能會需要跟誰合作？<br>(✔️可以嘗試)<br>    &gt; 有時候會需要協助解決業務端的技術障礙<br>    &gt; 你會需要與前端討論並開發系統 API 的資料格式<br>    &gt; 協助產品以及設計師在技術上的可行性<br>    &gt; 平常主要負責後端程式開發、資料庫設計及測試<br>(❌不太建議)<br>    &gt; 公司現有系統維護<br>    &gt; 專案開發<br>    &gt; 抱持充滿熱情<br>    &gt; 展現你的創造力<br>如果可以熱情，誰想要冷淡。</p><h2 id="3️⃣-條件要求"><a href="#3️⃣-條件要求" class="headerlink" title="3️⃣ - 條件要求"></a>3️⃣ - 條件要求</h2><p>你可以透過上面的「2021 年成為 Web 開發人員的路線圖」去列出這份職缺會需要的技術項目有哪些，列出你們必須需要的技能即可，舉例來說「公司需要 Laravel 的後端開發人員」，那麼正確與錯誤的範例如下：<br>(✔️可以嘗試)<br>    &gt; 使用 php 與 Laravel 框架開發網站。<br>    &gt; 使用或架設過 Nginx 服務的經驗。<br>(❌不太建議)<br>    &gt; 擁有開發網站的能力，如 php、C#、Java ... 等。<br>    &gt; 擁有架設網站的能力，如 IIS、Apache、Nginx、Tomcat ... 等。<br>    &gt; 擁有前端設計、開發的能力。<br>明確的指出公司正在使用的技術很重要，你才能找到你需要的人才，除非今天是從頭開始，選擇任何技術都沒關係，那就無妨。<br>然後真的不要寫些與職缺偏差太遠的技能，像是職缺是後端，條件要求卻希望擁有設計能力，這就不太建議了。</p><h2 id="4️⃣-公司福利"><a href="#4️⃣-公司福利" class="headerlink" title="4️⃣ - 公司福利"></a>4️⃣ - 公司福利</h2><p>有多少寫多少，你可以告訴我加入後公司會給我甚麼？在平常工作時公司又會提供甚麼？或是甚麼特別的福利？<br>(✔️可以嘗試)<br>    &gt; 工作裝備: 加入公司會提供你一台 MacBook Pro 13 吋 M1 版本哦！<br>    &gt; 平常工作: 我們備有吃不完的零食櫃、午休躺著睡覺區<br>    &gt; 學習進修: 提供持續成長的機會，無論是研討會或課程學習<br>(❌不太建議)<br>    &gt; 享有勞保、健保<br>    &gt; 加入滿 6 個月即享特休 3 日<br>    &gt; 勞退提撥金<br>真的不要告訴我加入公司會享有勞健保，你可以一些法定應給的東西放到公司制度，但不要放到公司福利，因為這只會顯得你這間公司除此之外沒有其他福利可言。</p><h2 id="5️⃣-薪資範圍"><a href="#5️⃣-薪資範圍" class="headerlink" title="5️⃣ - 薪資範圍"></a>5️⃣ - 薪資範圍</h2><p>薪資的範圍是多少？以及保障年薪幾個月？這應該是基本上都會附的，如果可以提供調薪制度或說明其他薪資成長的方案，會讓我覺得你這份職缺不只讓我看到了現在，也彷彿可以看到未來。<br>(✔️可以嘗試)<br>    &gt; NT$ 60,000 ~ 80,000 月薪，保障年薪 14 個月。<br>(❌不太建議)<br>    &gt; 待遇面議<br>真的不要告訴我薪資面談，這會讓我覺得不想跟你談。</p><h2 id="6️⃣-其他"><a href="#6️⃣-其他" class="headerlink" title="6️⃣ - 其他"></a>6️⃣ - 其他</h2><p>最後是我自己在找工作時，我會做的一些事情，如果我對一間公司的職缺有興趣，我會去社交媒體上去找這間公司的員工，看看他們日常生活有沒有提及公司，通常這些能夠真實反應這間公司的福利是不是真的，舉例來說我有一個朋友他曾經在自己的河道上發噗說上班打魔物獵人會不會很過分，這讓我對他公司很感興趣，最後我去面試他公司時，打開公司大門第一眼看到的是他坐在門口看著大螢幕打極貝希摩斯，早知道我也帶 PS4 去面試，面試完直接在公司上紅盾上紅刀 GP 防禦超解輸出就是傷害。</p><p>嗯 ... 大概4醬汁ㄅ ( • ̀ω•́ )</p>]]></content>
    
    
    <summary type="html">身為一個後端開發者，看過不少相關的職缺，也做過幾份工作，或許我可以分享一下我自己在找工作時，喜歡看到甚麼樣的職缺。</summary>
    
    
    
    <category term="經驗分享" scheme="https://blog.init.engineer/categories/%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="職缺" scheme="https://blog.init.engineer/tags/%E8%81%B7%E7%BC%BA/"/>
    
  </entry>
  
  <entry>
    <title>純靠北工程師 2020 發燒排行榜</title>
    <link href="https://blog.init.engineer/posts/InitEngineer2020Top/"/>
    <id>https://blog.init.engineer/posts/InitEngineer2020Top/</id>
    <published>2021-03-26T16:00:00.000Z</published>
    <updated>2021-03-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>又到了一年一度，回顧去年發燒文章的時間了，究竟 2020 年的<a href="https://init.engineer/">純靠北工程師</a>有哪些令人噴飯，抑或者是讓人非常有感觸的文章呢？這邊把所有文章的討論度、互動指數、按讚及分享，各項指數加權後，依序排名排列出來，馬上就讓我們來看看吧！</p><p>你問說為什麼我有這些資料？拜託我版主欸，平台、服務、程式都我的，怎麼會沒有這些資料 😎</p><hr><h1 id="第-1-名-讓我們跟-Internet-Explorer-說掰掰"><a href="#第-1-名-讓我們跟-Internet-Explorer-說掰掰" class="headerlink" title="第 1 名 讓我們跟 Internet Explorer 說掰掰"></a>第 1 名 讓我們跟 Internet Explorer 說掰掰</h1><p>文章連結: <a href="https://init.engineer/cards/show/5050">#純靠北工程師3wa</a><br>Internet Explorer 也就是俗稱的 IE 瀏覽器，在 1995 年的時候發布，隨著網頁瀏覽器這塊大餅逐漸重要，微軟索性直接把 IE 瀏覽器預載在作業系統當中，使得當初整個市場都是使用 IE 瀏覽器，但隨著科技的進步，微軟推出了更好的 Edge 瀏覽器後，在現代似乎是個笑柄的 IE 瀏覽器好像就沒有存在的必要性了，最終微軟宣布停止支援 IE 正式宣告其壽終正寢，但在安息之前也不忘秀一波 IE 獨有的特色？</p><ul><li><a href="https://zh.wikipedia.org/zh-tw/Internet_Explorer">維基百科: Internet Explorer</a></li></ul><p><img src="/img/posts/InitEngineer2020Top/1.jpg" alt="1.jpg"></p><h1 id="第-2-名-下地獄之後，還要再當一次工程師"><a href="#第-2-名-下地獄之後，還要再當一次工程師" class="headerlink" title="第 2 名 下地獄之後，還要再當一次工程師"></a>第 2 名 下地獄之後，還要再當一次工程師</h1><p>文章連結: <a href="https://init.engineer/cards/show/5073">#純靠北工程師3wx</a><br>如果在地獄也有一個世界，那麼近年下地獄的工程師，是不是要幫閻羅王寫後台管理系統？讓地獄跟上 e 化時代。<br><a href="https://www.facebook.com/grayzerba">作者: 灰色的斑馬</a><br><img src="/img/posts/InitEngineer2020Top/2.jpeg" alt="2.jpeg"></p><h1 id="第-3-名-這案子已經完成了-90-，接下來就交給你收尾了"><a href="#第-3-名-這案子已經完成了-90-，接下來就交給你收尾了" class="headerlink" title="第 3 名 這案子已經完成了 90%，接下來就交給你收尾了"></a>第 3 名 這案子已經完成了 90%，接下來就交給你收尾了</h1><p>文章連結: <a href="https://init.engineer/cards/show/5222">#純靠北工程師412</a><br>吉卜力工作室在 2020 年 09 月 18 日的時候，免費釋出 8 部動畫、400 張高解析度的場景畫面，讓大家免費下載使用，提供大家隨意在常識範圍內使用它，因此就有不少網友開始發揮創意。</p><ul><li><a href="https://www.ghibli.jp/info/013344">今月から、スタジオジブリ作品の場面写真の提供を開始します</a></li></ul><p><img src="/img/posts/InitEngineer2020Top/3.jpg" alt="3.jpg"></p><h2 id="第-4-名-下地獄之後，除了當工程師，指定瀏覽器居然還是-Internet-Explorer！"><a href="#第-4-名-下地獄之後，除了當工程師，指定瀏覽器居然還是-Internet-Explorer！" class="headerlink" title="第 4 名 下地獄之後，除了當工程師，指定瀏覽器居然還是 Internet Explorer！"></a>第 4 名 下地獄之後，除了當工程師，指定瀏覽器居然還是 Internet Explorer！</h2><p>文章連結: <a href="https://init.engineer/cards/show/5089">#純靠北工程師3xd</a><br>再把「下地獄之後，還要再當一次工程師」話題延伸下去，如果工程師下地獄後要開發後台管理系統，那可以選擇的瀏覽器是不是就只有 Internet Explorer 瀏覽器可以選擇？對於工程師來說，最痛恨的便是 IE 瀏覽器了，尤其是以往政府標案可能會因公務人員的電腦過於老舊，因此網頁開發上必須支援 Internet Explorer 6 或者是 Internet Explorer 8，所幸現在政府規範了「政府網站服務應優先採用新版 HTML 標準(如 HTML5)，並具備跨瀏覽器相容性」，終於不用忍受那語法不支援的痛苦開發了。</p><ul><li><a href="https://www.facebook.com/itdogcom">作者: DOG COM</a></li><li><a href="https://www.webguide.nat.gov.tw/News_Content.aspx?n=6&sms=8456&s=3046">政府網站服務應優先採用新版 HTML 標準(如 HTML5)，並具備跨瀏覽器相容性</a></li></ul><p><img src="/img/posts/InitEngineer2020Top/4.jpeg" alt="4.jpeg"></p><h2 id="第-5-名-下班後的-Side-Project"><a href="#第-5-名-下班後的-Side-Project" class="headerlink" title="第 5 名 下班後的 Side Project"></a>第 5 名 下班後的 Side Project</h2><p>文章連結: <a href="https://init.engineer/cards/show/5619">#純靠北工程師4c3</a><br><img src="/img/posts/InitEngineer2020Top/5.jpeg" alt="5.jpeg"></p><h2 id="第-6-名-唐鳳小時候的故事"><a href="#第-6-名-唐鳳小時候的故事" class="headerlink" title="第 6 名 唐鳳小時候的故事"></a>第 6 名 唐鳳小時候的故事</h2><p>文章連結: <a href="https://init.engineer/cards/show/3832">#純靠北工程師2yg</a><br>一般邏輯上而言，手最多可以數到 10 根手指頭，但如果跳脫這個數手指的邏輯，而是把手指頭當作 0 與 1 二進位表示方式的話，那麼你就可以靠 10 根手指頭屬到 1,023 這樣的數字了。</p><ul><li><a href="https://zh.wikipedia.org/zh-tw/%E5%94%90%E9%B3%B3">維基百科: 唐鳳</a></li><li><a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6">維基百科: 二進位</a></li></ul><p><img src="/img/posts/InitEngineer2020Top/6.jpeg" alt="6.jpeg"></p><h2 id="第-7-名-Side-Project-之道，老婆為你撐腰"><a href="#第-7-名-Side-Project-之道，老婆為你撐腰" class="headerlink" title="第 7 名 Side Project 之道，老婆為你撐腰"></a>第 7 名 Side Project 之道，老婆為你撐腰</h2><p>文章連結: <a href="https://init.engineer/cards/show/3421">#純靠北工程師2n1</a><br><a href="https://init.engineer/cards/show/3397">#純靠北工程師2md 誰再說工程師一定要跑社群寫 Side Project，我一定打他！</a><br><img src="/img/posts/InitEngineer2020Top/7.jpeg" alt="7.jpeg"></p><h2 id="第-8-名-流言終結者工程師-格蘭·今原-享受-49-歲"><a href="#第-8-名-流言終結者工程師-格蘭·今原-享受-49-歲" class="headerlink" title="第 8 名 流言終結者工程師 格蘭·今原 享受 49 歲"></a>第 8 名 流言終結者工程師 格蘭·今原 享受 49 歲</h2><p>文章連結: <a href="https://init.engineer/cards/show/4857">#純靠北工程師3qx</a><br>格蘭·今原（英語：Grant Masaru Imahara，1970 年 10 月 23 日－2020 年 7 月 13 日），日本名今原真申（日語：今原 真申／いまはら まさる Imahara Masaru），是一位美籍日裔電子工程師、機器人專家和電視主持人，因參與探索頻道著名的科普電視節目《流言終結者》而出名，美國時間 2020 年 7 月 13 日，格蘭因腦動脈瘤突發而逝世，享年 49 歲。</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E6%A0%BC%E8%98%AD%C2%B7%E4%BB%8A%E5%8E%9F">維基百科: 格蘭·今原</a></li></ul><p><img src="/img/posts/InitEngineer2020Top/8.png" alt="8.png"></p><h2 id="第-9-名-當你寫出來的程式一團糟但他還可以運作"><a href="#第-9-名-當你寫出來的程式一團糟但他還可以運作" class="headerlink" title="第 9 名 當你寫出來的程式一團糟但他還可以運作"></a>第 9 名 當你寫出來的程式一團糟但他還可以運作</h2><p>文章連結: <a href="https://init.engineer/cards/show/3669">#純靠北工程師2tx</a><br><img src="/img/posts/InitEngineer2020Top/9.png" alt="9.png"></p><h2 id="第-10-名-使用者的完美體驗"><a href="#第-10-名-使用者的完美體驗" class="headerlink" title="第 10 名 使用者的完美體驗"></a>第 10 名 使用者的完美體驗</h2><p>文章連結: <a href="https://init.engineer/cards/show/5277">#純靠北工程師42l</a><br><img src="/img/posts/InitEngineer2020Top/10.jpeg" alt="10.jpeg"></p><hr><h3 id="第-11-名-Stack-Overflow-是不是一種購物網站？"><a href="#第-11-名-Stack-Overflow-是不是一種購物網站？" class="headerlink" title="第 11 名 Stack Overflow 是不是一種購物網站？"></a><a href="https://init.engineer/cards/show/5567">第 11 名 Stack Overflow 是不是一種購物網站？</a></h3><h3 id="第-12-名-功夫不好不要回頭改-Code"><a href="#第-12-名-功夫不好不要回頭改-Code" class="headerlink" title="第 12 名 功夫不好不要回頭改 Code"></a><a href="https://init.engineer/cards/show/4060">第 12 名 功夫不好不要回頭改 Code</a></h3><h3 id="第-13-名-邏輯駭客是你？"><a href="#第-13-名-邏輯駭客是你？" class="headerlink" title="第 13 名 邏輯駭客是你？"></a><a href="https://init.engineer/cards/show/3852">第 13 名 邏輯駭客是你？</a></h3><h3 id="第-14-名-如何在硬體上實踐-if-else-判斷式？"><a href="#第-14-名-如何在硬體上實踐-if-else-判斷式？" class="headerlink" title="第 14 名 如何在硬體上實踐 if else 判斷式？"></a><a href="https://init.engineer/cards/show/4058">第 14 名 如何在硬體上實踐 if else 判斷式？</a></h3><h3 id="第-15-名-工程師除了要有專業技能，現在還要點社交技能了"><a href="#第-15-名-工程師除了要有專業技能，現在還要點社交技能了" class="headerlink" title="第 15 名 工程師除了要有專業技能，現在還要點社交技能了"></a><a href="https://init.engineer/cards/show/5069">第 15 名 工程師除了要有專業技能，現在還要點社交技能了</a></h3><h3 id="第-16-名-Rockstar-工程師是你？"><a href="#第-16-名-Rockstar-工程師是你？" class="headerlink" title="第 16 名 Rockstar 工程師是你？"></a><a href="https://init.engineer/cards/show/3689">第 16 名 Rockstar 工程師是你？</a></h3><h3 id="第-17-名-這個功能我急著要，但這個功能先不上線"><a href="#第-17-名-這個功能我急著要，但這個功能先不上線" class="headerlink" title="第 17 名 這個功能我急著要，但這個功能先不上線"></a><a href="https://init.engineer/cards/show/5211">第 17 名 這個功能我急著要，但這個功能先不上線</a></h3><h3 id="第-18-名-從技術研討會的講者頭像照片，就能看出講者的資歷了"><a href="#第-18-名-從技術研討會的講者頭像照片，就能看出講者的資歷了" class="headerlink" title="第 18 名 從技術研討會的講者頭像照片，就能看出講者的資歷了"></a><a href="https://init.engineer/cards/show/5311">第 18 名 從技術研討會的講者頭像照片，就能看出講者的資歷了</a></h3><h3 id="第-19-名-請問下列選項中，誰能帶領公司成功數位轉型？"><a href="#第-19-名-請問下列選項中，誰能帶領公司成功數位轉型？" class="headerlink" title="第 19 名 請問下列選項中，誰能帶領公司成功數位轉型？"></a><a href="https://init.engineer/cards/show/5015">第 19 名 請問下列選項中，誰能帶領公司成功數位轉型？</a></h3><h3 id="第-20-名-這麼急著上線會出事的啊！"><a href="#第-20-名-這麼急著上線會出事的啊！" class="headerlink" title="第 20 名 這麼急著上線會出事的啊！"></a><a href="https://init.engineer/cards/show/5659">第 20 名 這麼急著上線會出事的啊！</a></h3><hr><p>喜歡這些文章嗎？歡迎轉載，麻煩記得附註出處。</p><p>官方網站: <a href="https://init.engineer/">init.engineer</a></p><p>另外歡迎加入我們的「<a href="https://discord.com/invite/pRuFQPC">Discord 頻道</a>」來跟我們聊聊天哦！</p><p>純靠北工程師 2021 發燒排行榜，我們明年見！</p>]]></content>
    
    
    <summary type="html">又到了一年一度，回顧去年發燒文章的時間了，究竟 2020 年的「純靠北工程師」有哪些令人噴飯，抑或者是讓人非常有感觸的文章呢？</summary>
    
    
    
    <category term="開發日誌" scheme="https://blog.init.engineer/categories/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/"/>
    
    <category term="純靠北工程師" scheme="https://blog.init.engineer/categories/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/%E7%B4%94%E9%9D%A0%E5%8C%97%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    
    <category term="開發日誌" scheme="https://blog.init.engineer/tags/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/"/>
    
    <category term="純靠北工程師" scheme="https://blog.init.engineer/tags/%E7%B4%94%E9%9D%A0%E5%8C%97%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
  </entry>
  
  <entry>
    <title>《純靠北開發日誌》改善文章內容的彙整</title>
    <link href="https://blog.init.engineer/posts/InitEngineerDevelopment20201111/"/>
    <id>https://blog.init.engineer/posts/InitEngineerDevelopment20201111/</id>
    <published>2020-11-10T16:00:00.000Z</published>
    <updated>2020-11-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天正在開發 <code>v4.0</code> 發現舊版本一個很有趣的地方，版友們會到<a href="https://kaobei.engineer/">純靠北工程師</a>平台上發表文章，發表文章之後會透過審核系統審核，最後發表到各大社群平台當中，但每個社群平台所能容忍的文字數量各自不同，像是 Facebook 就沒甚麼文字限制，而 Twitter 就有英文 280 字或是中文 140 字的限制，而 Plurk 則是 360 字，這個在之前發表文章的方法中就有註記這個訊息。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注意: Plurk 的內容如果超過中英文 360 字的話，多餘的內容將會被 Plurk 自動忽略。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注意: Twitter 的內容如果超過英文 280 字或是中文 140 字的話，多餘的內容將會被 Twitter 自動忽略。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>所以為了讓文章發表到 Facebook 的時候，文章內容可以用比較可控的方式來彙整，我寫了一個 <code>buildContent</code> 的方法，只需要把版友的文章內容丟進去，然後一些需要設定的參數丟進去，這個方法就會回傳我所想要的內文給我。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $content</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildContent</span>(<span class="params"><span class="variable">$content</span> = <span class="string">&#x27;&#x27;</span>, <span class="keyword">array</span> <span class="variable">$options</span> = []</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;#純靠北工程師&#x27;</span> . <span class="title function_ invoke__">base_convert</span>(<span class="variable">$options</span>[<span class="string">&#x27;id&#x27;</span>], <span class="number">10</span>, <span class="number">36</span>) . <span class="string">&quot;\n\r----------\n\r&quot;</span> .</span><br><span class="line">        <span class="variable">$content</span> . <span class="string">&quot;\n\r----------\n\r&quot;</span> .</span><br><span class="line">        <span class="string">&#x27;🗳️ [群眾審核] &#x27;</span> . <span class="title function_ invoke__">route</span>(<span class="string">&#x27;frontend.social.cards.review&#x27;</span>) . <span class="string">&quot;\n\r&quot;</span> .</span><br><span class="line">        <span class="string">&#x27;👉 [GitHub Repo] https://github.com/init-engineer/init.engineer&#x27;</span> . <span class="string">&quot;\n\r&quot;</span> .</span><br><span class="line">        <span class="string">&#x27;📢 [匿名發文] &#x27;</span> . <span class="title function_ invoke__">route</span>(<span class="string">&#x27;frontend.social.cards.create&#x27;</span>) . <span class="string">&quot;\n\r&quot;</span> .</span><br><span class="line">        <span class="string">&#x27;🥙 [全平台留言] &#x27;</span> . <span class="title function_ invoke__">route</span>(<span class="string">&#x27;frontend.social.cards.show&#x27;</span>, [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="variable">$options</span>[<span class="string">&#x27;id&#x27;</span>]]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果文章要發表到 Plurk 或者 Twitter 的時候，因為他們各自有文字上的限制，所以 <code>buildContent</code> 這個方法需要複製貼上到相對應的 Service 當中，稍加改變一下運作內容，需要加上內文的限制，有多餘的就要刪掉以 <code>...</code> 來代替。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $content</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildContent</span>(<span class="params"><span class="variable">$content</span> = <span class="string">&#x27;&#x27;</span>, <span class="keyword">array</span> <span class="variable">$options</span> = []</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$_content</span> = (<span class="title function_ invoke__">mb_strlen</span>(<span class="variable">$content</span>, <span class="string">&#x27;utf-8&#x27;</span>) &gt; <span class="number">100</span>) ? <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$content</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="string">&#x27;utf-8&#x27;</span>) . <span class="string">&#x27; ...&#x27;</span> : <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$options</span>[<span class="string">&#x27;image_url&#x27;</span>] . <span class="string">&quot;\n\r&quot;</span> .</span><br><span class="line">        <span class="string">&#x27;#純靠北工程師&#x27;</span> . <span class="title function_ invoke__">base_convert</span>(<span class="variable">$options</span>[<span class="string">&#x27;id&#x27;</span>], <span class="number">10</span>, <span class="number">36</span>) . <span class="string">&quot;\n\r----------\n\r&quot;</span> .</span><br><span class="line">        <span class="variable">$_content</span> . <span class="string">&quot;\n\r----------\n\r&quot;</span> .</span><br><span class="line">        <span class="string">&#x27;🗳️ [群眾審核] &#x27;</span> . <span class="title function_ invoke__">route</span>(<span class="string">&#x27;frontend.social.cards.review&#x27;</span>) . <span class="string">&#x27;?&#x27;</span> . <span class="title class_">Str</span>::<span class="title function_ invoke__">random</span>(<span class="number">4</span>) . <span class="string">&quot;\n\r&quot;</span> .</span><br><span class="line">        <span class="string">&#x27;👉 [GitHub Repo] https://github.com/init-engineer/init.engineer&#x27;</span> . <span class="string">&#x27;?&#x27;</span> . <span class="title class_">Str</span>::<span class="title function_ invoke__">random</span>(<span class="number">4</span>) . <span class="string">&quot;\n\r&quot;</span> .</span><br><span class="line">        <span class="string">&#x27;📢 [匿名發文] &#x27;</span> . <span class="title function_ invoke__">route</span>(<span class="string">&#x27;frontend.social.cards.create&#x27;</span>) . <span class="string">&#x27;?&#x27;</span> . <span class="title class_">Str</span>::<span class="title function_ invoke__">random</span>(<span class="number">4</span>) . <span class="string">&quot;\n\r&quot;</span> .</span><br><span class="line">        <span class="string">&#x27;🥙 [全平台留言] &#x27;</span> . <span class="title function_ invoke__">route</span>(<span class="string">&#x27;frontend.social.cards.show&#x27;</span>, [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="variable">$options</span>[<span class="string">&#x27;id&#x27;</span>]]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前的 <code>buildContent</code> 方法可以完成我所希望達到的效果，但是它會存在於每個平台 Service 當中，而每個 Service 的 <code>buildContent</code> 皆大同小異，只有字數的功能上不太一樣，如果未來我希望安插其他內容、移除多餘的內容，那我就必須在每個 Service 都修改，這段方法耦合性太高了，因此在 <code>v4.0</code> 決定將它抽離出來，並以流暢介面(Fluent Interface)的方式去實踐。</p><h3 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h3><ul><li><a href="/FluentInterface">【PHP 設計模式】流暢介面 Fluent Interface</a></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class ContentFluent.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContentFluent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// Code ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來開始思考，如果文章內容的結構會有頭(Header)、身(Body)、尾(Footer)，頭(Header)的部分不外乎就是要處理 <code>#純靠北工程師&#123;id&#125;</code> 這段內容，而身(Body)的部分單純只要顯示使用者所發表的內文，但必須另外提供內容最大上限(limit)的設定，最後尾(Footer)的部分則是需要設定各種超連結，因此根據這些特性下去設計了 <code>header</code>、<code>body</code>、<code>footer</code> 這三個方法，並且去設定相對應的參數，最後回傳整個類別。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class ContentFluent.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContentFluent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$id</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> <span class="variable">$content</span> = <span class="string">&#x27;Undefined&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$limit</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">array</span> <span class="variable">$footerOption</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">header</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$id</span> = <span class="number">0</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;id = <span class="variable">$id</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int    $limit</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">body</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$content</span>, <span class="keyword">int</span> <span class="variable">$limit</span> = <span class="number">0</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content = <span class="variable">$content</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;limit = <span class="variable">$limit</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $option = []</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">footer</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$option</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;footerOption = <span class="variable">$option</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當內文格式設定完畢後，需要提供一個結尾獲得結果的方法，因此把彙整的邏輯寫在 <code>get()</code> 當中，開始把先前所設定的資料一個接一個的組合起來。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$response</span> = <span class="string">&quot;#&quot;</span> . <span class="title function_ invoke__">app_name</span>() . <span class="title function_ invoke__">base_convert</span>(<span class="variable">$this</span>-&gt;id, <span class="number">10</span>, <span class="number">36</span>) . <span class="string">&quot;\n\r----------\n\r&quot;</span>;</span><br><span class="line">    <span class="variable">$content</span> = (<span class="variable language_">$this</span>-&gt;limit != <span class="number">0</span> &amp;&amp; <span class="title function_ invoke__">mb_strlen</span>(<span class="variable">$this</span>-&gt;content, <span class="string">&#x27;utf-8&#x27;</span>) &gt; <span class="variable language_">$this</span>-&gt;limit) ? <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$this</span>-&gt;content, <span class="number">0</span>, <span class="variable">$this</span>-&gt;limit, <span class="string">&#x27;utf-8&#x27;</span>) . <span class="string">&#x27; ...&#x27;</span> : <span class="variable language_">$this</span>-&gt;content;</span><br><span class="line">    <span class="variable">$response</span> = <span class="variable">$response</span> . <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;footerOption[<span class="string">&#x27;review&#x27;</span>]) &amp;&amp; <span class="variable language_">$this</span>-&gt;footerOption[<span class="string">&#x27;review&#x27;</span>]) <span class="variable">$response</span> = <span class="variable">$response</span> . <span class="string">&quot;🗳️ [群眾審核] &quot;</span> . <span class="title function_ invoke__">route</span>(<span class="string">&#x27;frontend.social.cards.review&#x27;</span>) . <span class="string">&quot;\n\r&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;footerOption[<span class="string">&#x27;github&#x27;</span>]) &amp;&amp; <span class="variable language_">$this</span>-&gt;footerOption[<span class="string">&#x27;github&#x27;</span>]) <span class="variable">$response</span> = <span class="variable">$response</span> . <span class="string">&quot;👉 [GitHub Repo] https://github.com/init-engineer/init.engineer&quot;</span> . <span class="string">&quot;\n\r&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;footerOption[<span class="string">&#x27;publish&#x27;</span>]) &amp;&amp; <span class="variable language_">$this</span>-&gt;footerOption[<span class="string">&#x27;publish&#x27;</span>]) <span class="variable">$response</span> = <span class="variable">$response</span> . <span class="string">&quot;📢 [匿名發文] &quot;</span> . <span class="title function_ invoke__">route</span>(<span class="string">&#x27;frontend.social.cards.create&#x27;</span>) . <span class="string">&quot;\n\r&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;footerOption[<span class="string">&#x27;show&#x27;</span>]) &amp;&amp; <span class="variable language_">$this</span>-&gt;footerOption[<span class="string">&#x27;show&#x27;</span>]) <span class="variable">$response</span> = <span class="variable">$response</span> . <span class="string">&quot;🥙 [全平台留言] &quot;</span> . <span class="title function_ invoke__">route</span>(<span class="string">&#x27;frontend.social.cards.show&#x27;</span>, [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="variable">$this</span>-&gt;id]) . <span class="string">&quot;\n\r&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$response</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後在發表文章到社群平台時，就只需要透過 <code>Container</code> 來獲得 <code>ContentFluent</code> 類別，並且直接 <code>header</code>、<code>body</code>、<code>footer</code> 逐一設定，並直接 <code>get</code> 出來，整個程式碼都變漂亮了，也解決了耦合性的問題。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$contentFluent</span> = <span class="title class_">Container</span>::<span class="title function_ invoke__">getInstance</span>()-&gt;<span class="title function_ invoke__">make</span>(<span class="title class_">ContentFluent</span>::<span class="variable language_">class</span>);</span><br><span class="line"><span class="variable">$message</span> = <span class="variable">$contentFluent</span></span><br><span class="line">    -&gt;<span class="title function_ invoke__">header</span>(<span class="variable">$cards</span>-&gt;id)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">body</span>(<span class="variable">$cards</span>-&gt;content)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">footer</span>(<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;review&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;github&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;publish&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;show&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">    ))</span><br><span class="line">    -&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天正在開發 &lt;code&gt;v4.0&lt;/code&gt; 發現舊版本一個很有趣的地方，版友們會到&lt;a href=&quot;https://kaobei.engineer/&quot;&gt;純靠北工程師&lt;/a&gt;平台上發表文章，發表文章之後會透過審核系統審核，最後發表到各大社群平台當中，但每個社群平台所能容</summary>
      
    
    
    
    <category term="開發日誌" scheme="https://blog.init.engineer/categories/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/"/>
    
    <category term="純靠北工程師" scheme="https://blog.init.engineer/categories/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/%E7%B4%94%E9%9D%A0%E5%8C%97%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    
    <category term="開發日誌" scheme="https://blog.init.engineer/tags/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/"/>
    
    <category term="純靠北工程師" scheme="https://blog.init.engineer/tags/%E7%B4%94%E9%9D%A0%E5%8C%97%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
  </entry>
  
  <entry>
    <title>《純靠北開發日誌》將專案砍掉重練有甚麼意義？</title>
    <link href="https://blog.init.engineer/posts/InitEngineerDevelopment20201107/"/>
    <id>https://blog.init.engineer/posts/InitEngineerDevelopment20201107/</id>
    <published>2020-11-06T16:00:00.000Z</published>
    <updated>2020-11-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>接下來會有一大段時間完全投入在純靠北工程師上，所以稍微紀錄一下 <code>v4.0</code> 的一些方向與構思，之後每當值得討論的議題到一定的量，就會將議題稍加整理並撰寫成文章發表。</p><hr><h2 id="第四次砍掉重寫"><a href="#第四次砍掉重寫" class="headerlink" title="第四次砍掉重寫"></a>第四次砍掉重寫</h2><p>相信大多數人都並不曉得我純靠北版號第一個數字代表的是甚麼意思，甚至連純靠北其實有版本號這件事情都不知道，在軟體版本號命名風格當中，第一個數字意味著軟體經過了重大更新，而我不一樣，因為這是 Side Project，所以要重大更新就砍掉重練吧！不過這招也僅限使用於 Side Project，你可以在 Side Project 實踐你各種大膽的想法，如果發生了甚麼意想不到的錯誤，你就只需要趕快修一修就好了，或者摸摸鼻子趕快回去上一個版本，但在商案上就可能不太適用了，因為商案的使用者是有付錢給公司的，你會很難給使用者一個交代。</p><p>為什麼要近乎砍掉重寫呢？如果一份專案它全部都是由你來寫的，而它已經營運了幾年，你現在回過頭來看它，儘管它目前正常營運當中，但你會有種「我好像可以寫得更好」的想法，因為你的能力可能在這幾年當中又進步了，可是又會想到如果重寫這個，那個也要跟著重寫，而這種東修一塊、西修一塊的做法，我認為很容易產生意想不到的漏洞，如果你就是整個打掉重寫，那麼整個系統全部的範圍你都需要親自思考過、寫過，就不會有你改了這塊，卻沒想到那塊的問題發生。</p><h3 id="額外補充-版本號"><a href="#額外補充-版本號" class="headerlink" title="額外補充 - 版本號"></a>額外補充 - 版本號</h3><p>一般來說版本編號格式是 <code>[主版本號].[次版本號].[修訂版本號]</code>，而每個編號遞增的時機如下：</p><ul><li>主版本號：軟體有重大更新的時候遞增，重大更新通常是指功能與介面都有大幅度變動的時候。</li><li>次版本號：軟體發佈新功能，但是並不會大幅影響到整個軟體的時候遞增。</li><li>修訂版本號：通常是在軟體有 bug，發布 bug 的修正版時遞增。</li></ul><blockquote><p>詳細教學可以閱讀 <a href="https://www.slmt.tw/blog/2015/07/19/version-number-naming-convention">SLMT&#39;s Blog - 版本編號的命名規則</a> 這篇文章，額外補充的內容都取自於這篇文章，裡面解說得非常詳盡。</p></blockquote><hr><h2 id="砍掉重練的風險與防範"><a href="#砍掉重練的風險與防範" class="headerlink" title="砍掉重練的風險與防範"></a>砍掉重練的風險與防範</h2><p>那麼這樣的決定，會不會有甚麼風險呢？事實上是有的，歷經數次的砍掉重練，有不少需要注意的點，像是資料庫有沒有要重新規劃？你網頁服務的路由會不會變更？</p><p><img src="/img/posts/InitEngineerDevelopment20201107/1.png" alt="1.png"></p><h3 id="修改資料庫架構，而發生新舊資料轉移的問題"><a href="#修改資料庫架構，而發生新舊資料轉移的問題" class="headerlink" title="修改資料庫架構，而發生新舊資料轉移的問題"></a>修改資料庫架構，而發生新舊資料轉移的問題</h3><p>通常砍掉重練的過程中，除了程式以外，還會考慮到資料流的問題，你可能會為了解決營運所產生出來的問題，像是原本設計在理論上每筆資料都很重要，但實際營運後發現某項資料是多餘的，甚至某些資料應該被刪除或它被放到不該放的地方，為了解決這些經營運後才發現的問題，因此而重新設計資料表的結構，這時你將面臨舊有資料如何保留，並且轉換為新結構格式的問題。</p><p>在於資料的轉移，原先資料庫的架構可能會在新版本當中重新設計，為了符合新的設計，同時不能遺棄舊有的資料，你會需要做資料轉移，而且這段過程不能出任何一點差錯，這是我覺得砍掉重練最困難也最需要謹慎處理的地方，尤其是當你的資料量開始龐大之後，所以再對於新舊資料轉移的問題，最後摸索出了較為穩定的流程，假使現在你擁有舊資料，並且已經將新的資料庫結構定義好了，那麼我八九不離十會照著這個流程來進行：</p><ol><li>建立兩個資料庫，一個是舊的資料庫結構，一個是新的資料庫結構。</li><li>模擬一套舊結構的假資料，並且存在舊的資料庫結構，資料量不需要太大，但盡可能模擬所有資料狀態。</li><li>根據舊結構的假資料，下去推論這些假資料如果轉移成新結構，新結構的假資料應該有的樣子，不需要儲存於新的資料庫結構。</li><li>以你覺得熟練的程式語言，去寫驗證程式，驗證新的資料庫結構內的資料，這邊幾乎就是把前步驟的資料複製貼到程式碼當中，並且把新的資料庫結構資料抓出來判斷是否相等。</li><li>無論是 SQL 或其他語言都可以，寫一套轉換的程式集來去把舊資料抓出來並轉換成新資料儲存於新的資料庫結構。</li><li>執行你第四個步驟所寫的驗證程式，以確保轉換完後的資料是你所想的樣子。</li></ol><p>完成上面的步驟後，基本上你已經有十足的信心去肯定你的轉換程式八九不離十是正確的，接下來只差執行轉移的步驟，基本上還是會有一些需要注意的要點需要謹慎：</p><ol><li>完整備份你舊的資料庫，無論如何就是求個可以回頭的安心。</li><li>千萬不要直接把新資料庫覆蓋舊資料庫，你應該另起一個資料庫去存放轉移後的結果，當新服務運行一段時間之後，再回頭來考慮是否該刪除。</li></ol><p><img src="/img/posts/InitEngineerDevelopment20201107/2.png" alt="2.png"></p><h3 id="更新網頁的路由，而導致流量暴跌"><a href="#更新網頁的路由，而導致流量暴跌" class="headerlink" title="更新網頁的路由，而導致流量暴跌"></a>更新網頁的路由，而導致流量暴跌</h3><p>有時候你會發現你以前設計的路由，在新的結構下似乎可以更為簡短，甚至路徑可以寫得更有意義，但如果你想要更新路由，那麼你可能會面臨流量會不會因此而暴跌的問題，這是個很有趣的問題，目前這個部落格在以前每篇文章的路徑如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.init.engineer/&#123;年&#125;/&#123;月&#125;/&#123;日&#125;/&#123;文章檔名&#125;</span><br></pre></td></tr></table></figure><p>有一次將整個部落格的樣式改寫，連文章路徑也一起更新成新的結構：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.init.engineer/&#123;文章檔名&#125;</span><br></pre></td></tr></table></figure><p>原本部落格每個月的流量從數萬直接消失了九成以上，你沒有看錯，並不是剩下九成，而是消失了九成，每個月的觀看人數只有數百人，而且這個狀況持續了一年以上，直到最近才恢復到每個月幾千人，這個流量是你從剛開始起步慢慢累積上來的，當你更新重要的路由之後，幾乎就是把所有的流量清空，整個網站從頭開始。</p><p>面對這個狀況，這是必須避免的，你必須將同一個服務支援到你的舊路徑以及新路徑，你可以建立新的路徑，並且要記得保留舊的路徑，或者讓舊路徑自動轉址到新路徑上，這件事情是小事，但絕對不能發生，因為一旦發生就算回頭也來不及了，失去的流量將會要重新累積。</p><hr><h2 id="最後，喝杯咖啡？"><a href="#最後，喝杯咖啡？" class="headerlink" title="最後，喝杯咖啡？"></a>最後，喝杯咖啡？</h2><p>這是 <code>v4.0</code> 準備動工時，所想到的一些想法、經驗回顧，之後開發上可能會遇到些有趣的東西，或者開發上的思維，也會透過開發日誌的方式來記錄下來，如果你覺得這很有趣想支持的話，<code>歡迎請乾太喝杯咖啡哦 O_&lt;</code></p><p>如果你有甚麼想問、想了解、想探討的議題，也歡迎透過<a href="https://www.facebook.com/init.kobeengineer">《純靠北工程師 Facebook 正式機 粉絲團》</a>來發問。</p><div style="padding: 2rem;">    <style>        a.animated-button:link, a.animated-button:visited {            position: relative;            display: block;            margin: 30px auto 0;            padding: 14px 15px;            color: #000;            font-size:14px;            font-weight: bold;            text-align: center;            text-decoration: none;            text-transform: uppercase;            overflow: hidden;            letter-spacing: .08em;            border-radius: 0;            text-shadow: 0 0 1px rgba(0, 0, 0, 0.2), 0 1px 0 rgba(0, 0, 0, 0.2);            -webkit-transition: all 1s ease;            -moz-transition: all 1s ease;            -o-transition: all 1s ease;            transition: all 1s ease;        }        a.animated-button:link:after, a.animated-button:visited:after {            content: "";            position: absolute;            color: #fff;            height: 0%;            left: 50%;            top: 50%;            width: 150%;            z-index: -1;            -webkit-transition: all 0.75s ease 0s;            -moz-transition: all 0.75s ease 0s;            -o-transition: all 0.75s ease 0s;            transition: all 0.75s ease 0s;        }        a.animated-button:link:hover, a.animated-button:visited:hover {            color: #FFF;            text-shadow: none;        }        a.animated-button:link:hover:after, a.animated-button:visited:hover:after {            height: 450%;        }        a.animated-button:link, a.animated-button:visited {            position: relative;            display: block;            margin: 30px auto 0;            padding: 14px 15px;            color: #000;            font-size:14px;            border-radius: 0;            font-weight: bold;            text-align: center;            text-decoration: none;            text-transform: uppercase;            overflow: hidden;            letter-spacing: .08em;            text-shadow: 0 0 1px rgba(0, 0, 0, 0.2), 0 1px 0 rgba(0, 0, 0, 0.2);            -webkit-transition: all 1s ease;            -moz-transition: all 1s ease;            -o-transition: all 1s ease;            transition: all 1s ease;        }        a.animated-button.victoria-four {            border: 2px solid #D24D57;        }        a.animated-button.victoria-four:after {            background: #D24D57;            opacity: .5;            -moz-transform: translateY(-50%) translateX(-50%) rotate(90deg);            -ms-transform: translateY(-50%) translateX(-50%) rotate(90deg);            -webkit-transform: translateY(-50%) translateX(-50%) rotate(90deg);            transform: translateY(-50%) translateX(-50%) rotate(90deg);        }        a.animated-button.victoria-four:hover:after {            opacity: 1;            height: 600% !important;        }    </style>    <a href="https://cart.cashier.ecpay.com.tw/qp/jnb0" class="animated-button victoria-four" style="font-size: 2rem;" target="_blank">        <img src="/assets/img/uploads/kantai235.jpg" style="width: 3rem;">        請乾太喝杯咖啡    </a></div><hr><h2 id="相關連結"><a href="#相關連結" class="headerlink" title="相關連結"></a>相關連結</h2><ul><li><a href="https://github.com/init-engineer/init.engineer/tree/feature/v4.0">純靠北工程師 feature&#x2F;v4.0 GitHub</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;接下來會有一大段時間完全投入在純靠北工程師上，所以稍微紀錄一下 &lt;code&gt;v4.0&lt;/code&gt; 的一些方向與構思，之後每當值得討論的議題到一定的量，就會將議題稍加整理並撰寫成文章發表。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;第四次砍掉重寫&quot;&gt;&lt;a href=&quot;#第四次砍掉重</summary>
      
    
    
    
    <category term="開發日誌" scheme="https://blog.init.engineer/categories/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/"/>
    
    <category term="純靠北工程師" scheme="https://blog.init.engineer/categories/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/%E7%B4%94%E9%9D%A0%E5%8C%97%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    
    <category term="開發日誌" scheme="https://blog.init.engineer/tags/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/"/>
    
    <category term="純靠北工程師" scheme="https://blog.init.engineer/tags/%E7%B4%94%E9%9D%A0%E5%8C%97%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
  </entry>
  
  <entry>
    <title>PHP Intval 的 8、7 運算 8、7 問題</title>
    <link href="https://blog.init.engineer/posts/PhpIntvalWTF/"/>
    <id>https://blog.init.engineer/posts/PhpIntvalWTF/</id>
    <published>2020-10-15T16:00:00.000Z</published>
    <updated>2020-10-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>欸欸、乾太，你 php 小數計算會使用套件嗎？還是使用原生的方法進行運算？因為我遇到一個問題，我有 $a &#x3D; 0.1 與 $b &#x3D; 0.7 這兩個變數，把他們相加乘以 10 之後，應該得出的答案是 8 沒錯吧？但我 intval 之後他給我 7 欸。</p></blockquote><p><code>intval</code> 這個是獲得變數其整數的方法，因此先來看個 <a href="https://www.php.net/manual/zh/function.intval.php">php.net 官方文件</a>。</p><h2 id="intval"><a href="#intval" class="headerlink" title="intval"></a>intval</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function intval ($var, $base = null) &#123;&#125;</span><br><span class="line">Get the integer value of a variable</span><br><span class="line"></span><br><span class="line">intval</span><br><span class="line"></span><br><span class="line">Get the integer value of a variable</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">function intval($var, $base = 10) &#123; &#125;</span><br><span class="line">@param mixed $var — The scalar value being converted to an integer</span><br><span class="line"></span><br><span class="line">@param int $base — [optional]</span><br><span class="line"></span><br><span class="line">The base for the conversion</span><br><span class="line"></span><br><span class="line">@return int</span><br><span class="line">The integer value of var on success, or 0 on failure. Empty arrays and objects return 0, non-empty arrays and objects return 1.</span><br><span class="line"></span><br><span class="line">The maximum value depends on the system. 32 bit systems have a maximum signed integer range of -2147483648 to 2147483647. So for example on such a system, intval(&#x27;1000000000000&#x27;) will return 2147483647. The maximum signed integer value for 64 bit systems is 9223372036854775807.</span><br><span class="line"></span><br><span class="line">Strings will most likely return 0 although this depends on the leftmost characters of the string. The common rules of integer casting apply.</span><br><span class="line"></span><br><span class="line">@link https://php.net/manual/en/function.intval.php</span><br><span class="line"></span><br><span class="line">Get the integer value of a variable</span><br><span class="line"></span><br><span class="line">intval( mixed $var [, int $base = 10 ]): integer</span><br></pre></td></tr></table></figure><p>那我們就不囉唆，實際來測試一下 <code>intval</code> 如果真的把 <code>$a = 0.1</code> 與 <code>$b = 0.7</code> 相加後乘以 10 會得出什麼結果？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">0.1</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">0.7</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">intval</span>((<span class="variable">$a</span> + <span class="variable">$b</span>) * <span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>; <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><p>這問題還蠻神奇的，那如果以此類推的話，乘以 20 會得到 14，乘以 100 會得到 70 囉？二話不說馬上來測試。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">0.1</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">0.7</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">intval</span>((<span class="variable">$a</span> + <span class="variable">$b</span>) * <span class="number">20</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>; <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">intval</span>((<span class="variable">$a</span> + <span class="variable">$b</span>) * <span class="number">100</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>; <span class="comment">// 80</span></span><br></pre></td></tr></table></figure><p>這樣的結果還蠻訝異的，它居然會在乘以 20 的時候 <code>$a + $b</code> 就變成 7.5，然後乘以 100 的時候則變成 8，這個 <code>$a + $b</code> 的內容是什麼，我們有必要來檢查一下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">0.1</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">0.7</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$a</span> + <span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>; <span class="comment">// 0.8</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$c</span> * <span class="number">10</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>; <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p>到這邊都還蠻正常的，我們已經可以確信 <code>$c</code> 是 8，所以如果我直接把 <code>$c</code> 丟進去 <code>intval</code> 的話，整數 8 進去應該會獲得整數 8 囉？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">0.1</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">0.7</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$a</span> + <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$c</span> * <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$c</span>); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><p><img src="/img/posts/PhpIntvalWTFmeme/1.png" alt="1.png"></p><p>反正無論如何，我只要確信我給 <code>intval</code> 的是 8，無論這個 8 是整數是浮點數是字串，只要它看起來像 8，只要你看得懂我給你的是 8 的話，你就會跟我說 8 對不對？</p><p>intval: 對。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">0.1</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">0.7</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$a</span> + <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$c</span> * <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">strval</span>(<span class="variable">$c</span>)); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p>我把 <code>$c</code> 給先轉成字串，再把它 <code>intval</code> 去處理，最後終於真真切切地得到 8 了，但這不像是一個好的做法，因此在此推廣 ...</p><h1 id="珍惜生命，請學習型別宣告。"><a href="#珍惜生命，請學習型別宣告。" class="headerlink" title="珍惜生命，請學習型別宣告。"></a>珍惜生命，請學習型別宣告。</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">double</span>) <span class="variable">$a</span> = <span class="number">0.1</span>;</span><br><span class="line">(<span class="keyword">double</span>) <span class="variable">$b</span> = <span class="number">0.7</span>;</span><br><span class="line">(<span class="keyword">int</span>) <span class="variable">$c</span> = (<span class="variable">$a</span> + <span class="variable">$b</span>) * <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>; <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">欸欸、乾太，你 php 小數計算會使用套件嗎？還是使用原生的方法進行運算？因為我遇到一個問題，我有 $a = 0.1 與 $b = 0.7 這兩個變數，把他們相加乘以 10 之後，應該得出的答案是 8 沒錯吧？但我 intval 之後他給我 7 欸。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="PHP" scheme="https://blog.init.engineer/tags/PHP/"/>
    
    <category term="Intval" scheme="https://blog.init.engineer/tags/Intval/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】模板方法 Template Method</title>
    <link href="https://blog.init.engineer/posts/TemplateMethod/"/>
    <id>https://blog.init.engineer/posts/TemplateMethod/</id>
    <published>2020-10-12T16:00:00.000Z</published>
    <updated>2020-10-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模板方法-Template-Method"><a href="#模板方法-Template-Method" class="headerlink" title="模板方法 Template Method"></a>模板方法 Template Method</h1><p>模板方法，是一種如果這包水泥我有、你也有，就連喬瑟夫都有，那我們就應該把這八百包水泥抽離出來的設計模式，是設計模式中很簡單的模式，在模板(Template)裡頭會定義需要實作的方法，並且由繼承物件去實作或複寫，這個設計模式適用於不同物件有多處相似功能的時候，可以減少物件的耦合性過高問題。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/TemplateMethod/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先我們會需要建立一個抽象的模板，並且提供大頭菜無論健康的、壞掉的都擁有的方法，像是獲得鈴錢價格(getPrice)、獲得數量(getCount)以及計算總計鈴錢價格(calculatePrice)，而有些方法需要繼承物件去實作的，例如設定鈴錢價格(setPrice)，我們就需要以抽象方法的方式去定義，讓繼承物件必須去實作。</p><p>TurnipsTemplate.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Abstract TurnipsTemplate.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TurnipsTemplate</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$price</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$count</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TurnipsTemplate constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setPrice</span>(<span class="variable">$price</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setCount</span>(<span class="variable">$count</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrice</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$price</span> = <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">        <span class="variable">$count</span> = <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$price</span> * <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來我們開始建立物件去繼承模板，首先健康的大頭菜，在設定鈴錢價格時，就直接根據設定的鈴錢金額去如實設定。</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span> <span class="keyword">extends</span> <span class="title">TurnipsTemplate</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而壞掉的大頭菜部分，則是無論設定的鈴錢金額是多少，都要直接給予 0 鈴錢，因為壞掉的大頭菜不值任何鈴錢。</p><p>Spoiled.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Spoiled.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spoiled</span> <span class="keyword">extends</span> <span class="title">TurnipsTemplate</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>最終我們要測試大頭菜的模板所建構出來的大頭菜物件是否可以正常運作，我們會有兩個測試，分別是測試健康的大頭菜物件(Turnips)以及壞掉的大頭菜物件(Spoiled)。</p><p>TemplateMethodTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class TemplateMethodTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TemplateMethodTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_turnips_template</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">100</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">getPrice</span>());</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">40</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">getCount</span>());</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_spoiled_template</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Spoiled</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">0</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">getPrice</span>());</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">40</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">getCount</span>());</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">0</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; ...fResponsibilitiesTest   ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CommandPatternTest         ✔  </span><br><span class="line"> ==&gt; IteratorPatternTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; MediatorPatternTest        ✔  ✔  ✔  </span><br><span class="line"> ==&gt; MementoPatternTest         ✔  </span><br><span class="line"> ==&gt; NullObjectPatternTest      ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; ObserverPatternTest        ✔  </span><br><span class="line"> ==&gt; SpecificationPatternTest   ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; StatePatternTest           ✔  </span><br><span class="line"> ==&gt; StrategyPatternTest        ✔  </span><br><span class="line"> ==&gt; TemplateMethodTest         ✔  ✔  </span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CompositePatternTest       ✔  ✔  ✔  </span><br><span class="line"> ==&gt; DataMapperTest             ✔  ✔  </span><br><span class="line"> ==&gt; DecoratorPatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; DependencyInjectionTest    ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FacadePatternTest          ✔  </span><br><span class="line"> ==&gt; FluentInterfaceTest        ✔  </span><br><span class="line"> ==&gt; FlyweightPatternTest       ✔  </span><br><span class="line"> ==&gt; ProxyPatternTest           ✔  ✔  </span><br><span class="line"> ==&gt; RegistryPatternTest        ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.052, Memory: 8.00 MB</span><br><span class="line"></span><br><span class="line">OK (76 tests, 153 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/TemplateMethod">技術部落格文章 - 模板方法</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Behavioral/TemplateMethod">模板方法 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Behavioral/TemplateMethodTest.php">模板方法 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">模板方法，是一種如果這包水泥我有、你也有，就連喬瑟夫都有，那我們就應該把這八百包水泥抽離出來的設計模式，是設計模式中很簡單的模式，在模板(Template)裡頭會定義需要實作的方法，並且由繼承物件去實作或複寫，這個設計模式適用於不同物件有多處相似功能的時候，可以減少物件的耦合性過高問題。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="行為型" scheme="https://blog.init.engineer/tags/%E8%A1%8C%E7%82%BA%E5%9E%8B/"/>
    
    <category term="模板方法" scheme="https://blog.init.engineer/tags/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】策略模式 Strategy Pattern</title>
    <link href="https://blog.init.engineer/posts/StrategyPattern/"/>
    <id>https://blog.init.engineer/posts/StrategyPattern/</id>
    <published>2020-10-11T16:00:00.000Z</published>
    <updated>2020-10-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="策略模式-Strategy-Pattern"><a href="#策略模式-Strategy-Pattern" class="headerlink" title="策略模式 Strategy Pattern"></a>策略模式 Strategy Pattern</h1><p>策略模式，可以讓物件在運作時更改其行為或算法，你可以透過切換策略物件來改變計有的功能，你需要實作一個介面來代表這個策略物件，然後在主要類別當中去引入這個策略物件，在需要變更時來切換策略物件，來達成不同狀況下所需要的功能，就像是大頭菜的鈴錢有兩種模式，一種是原本的鈴錢，另一種則是過期後歸零，這個鈴錢運算的模式就可以抽離出來作為策略物件。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/StrategyPattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先我們要定義策略的介面，這個介面我們會希望策略物件必須要實作鈴錢運算(calculatePrice)的方法。</p><p>Strategy.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface Strategy.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來要實踐大頭菜的策略模式，首先是正常狀況下的大頭菜，會直接拿鈴錢價格、總數相成後即是鈴錢總價，並且將其回傳。</p><p>TurnipsStrategy.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class TurnipsStrategy.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TurnipsStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$price</span> * <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至於壞掉的部分，只要大頭菜壞掉就是賣不出去，所以不用進行任何運算，直接回傳 0 鈴錢即可。</p><p>SpoliedStrategy.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SpoliedStrategy.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpoliedStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後實作大頭菜物件，我們需要順便把策略物件丟進去，如果在建立大頭菜物件時沒有指定策略物件，那麼預設就給予正常的策略物件，並且提供一個可以臨時切換策略物件的方法，以及計算鈴錢總價的方法，這個計算的方法是透過呼叫策略物件的方法來實踐。</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Strategy</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Strategy <span class="variable">$strategy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Strategy $strategy</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span>, Strategy <span class="variable">$strategy</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果在建立大頭菜物件時沒有指定策略物件，那麼預設就給予正常的策略物件。</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;strategy = <span class="keyword">empty</span>(<span class="variable">$strategy</span>) ? <span class="keyword">new</span> <span class="title class_">TurnipsStrategy</span>() : <span class="variable">$strategy</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Strategy $strategy</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setStrategy</span>(<span class="params">Strategy <span class="variable">$strategy</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;strategy = <span class="variable">$strategy</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;strategy-&gt;<span class="title function_ invoke__">calculatePrice</span>(<span class="variable">$this</span>-&gt;price, <span class="variable">$this</span>-&gt;count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>最後我們要測試策略大頭菜是否如預期的可以運行，我們接下來有一項測試分別是建立大頭菜物件，並且給予預設正常的策略物件，正常情況下可以計算出鈴錢，這時候把策略物件替換為壞掉的模式，再重複呼叫方法時，則是獲得 0 鈴錢。</p><p>StrategyPatternTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class StrategyPatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrategyPatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_strategy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">100</span>, <span class="number">40</span>, <span class="keyword">new</span> <span class="title class_">TurnipsStrategy</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line"></span><br><span class="line">        <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">setStrategy</span>(<span class="keyword">new</span> <span class="title class_">SpoliedStrategy</span>());</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">0</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; ...fResponsibilitiesTest   ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CommandPatternTest         ✔  </span><br><span class="line"> ==&gt; IteratorPatternTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; MediatorPatternTest        ✔  ✔  ✔  </span><br><span class="line"> ==&gt; MementoPatternTest         ✔  </span><br><span class="line"> ==&gt; NullObjectPatternTest      ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; ObserverPatternTest        ✔  </span><br><span class="line"> ==&gt; SpecificationPatternTest   ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; StatePatternTest           ✔  </span><br><span class="line"> ==&gt; StrategyPatternTest        ✔  </span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CompositePatternTest       ✔  ✔  ✔  </span><br><span class="line"> ==&gt; DataMapperTest             ✔  ✔  </span><br><span class="line"> ==&gt; DecoratorPatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; DependencyInjectionTest    ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FacadePatternTest          ✔  </span><br><span class="line"> ==&gt; FluentInterfaceTest        ✔  </span><br><span class="line"> ==&gt; FlyweightPatternTest       ✔  </span><br><span class="line"> ==&gt; ProxyPatternTest           ✔  ✔  </span><br><span class="line"> ==&gt; RegistryPatternTest        ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.084, Memory: 8.00 MB</span><br><span class="line"></span><br><span class="line">OK (74 tests, 147 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/StrategyPattern">技術部落格文章 - 策略模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Behavioral/StrategyPattern">策略模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Behavioral/StrategyPatternTest.php">策略模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">策略模式，可以讓物件在運作時更改其行為或算法，你可以透過切換策略物件來改變計有的功能，你需要實作一個介面來代表這個策略物件，然後在主要類別當中去引入這個策略物件，在需要變更時來切換策略物件，來達成不同狀況下所需要的功能，就像是大頭菜的鈴錢有兩種模式，一種是原本的鈴錢，另一種則是過期後歸零，這個鈴錢運算的模式就可以抽離出來作為策略物件。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="行為型" scheme="https://blog.init.engineer/tags/%E8%A1%8C%E7%82%BA%E5%9E%8B/"/>
    
    <category term="策略模式" scheme="https://blog.init.engineer/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】狀態模式 State Pattern</title>
    <link href="https://blog.init.engineer/posts/StatePattern/"/>
    <id>https://blog.init.engineer/posts/StatePattern/</id>
    <published>2020-10-10T16:00:00.000Z</published>
    <updated>2020-10-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="狀態模式-State-Pattern"><a href="#狀態模式-State-Pattern" class="headerlink" title="狀態模式 State Pattern"></a>狀態模式 State Pattern</h1><p>狀態模式，讓物件的狀態改變時，一同改變物件的行為模式，就像是大頭菜(Turnips)這個物件，有沒有壞掉只是一個狀態(State)來辨別，但如果壞掉了，那麼會因為狀態改變的關係，而讓大頭菜計算鈴錢價格的方式也跟著改變。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/StatePattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>因為要讓大頭菜(Turnips)掛載狀態物件，所以我們要先來定義狀態，會需要提供進入到下個狀態的方法，以及 <code>toString</code> 來查看當前的狀態是什麼。</p><p>State.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface State.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Turnips $turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">proceedToNext</span>(<span class="params">Turnips <span class="variable">$turnips</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>): <span class="title">string</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是大頭菜剛建立出來的狀態，而大頭菜下個狀態是壞掉的狀態，所以在 <code>proceedToNext</code> 方法我們要將大頭菜(Turnips)來去賦予下個階段的狀態。</p><p>StateCreated.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class StateCreated.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateCreated</span> <span class="keyword">implements</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Turnips $turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">proceedToNext</span>(<span class="params">Turnips <span class="variable">$turnips</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">setState</span>(<span class="keyword">new</span> <span class="title class_">StateSpoiled</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;created&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來是壞掉的大頭菜狀態，這個階段已經是最終階段了，所以在 <code>proceedToNext</code> 的部分則是不實作任何事。</p><p>StateSpoiled.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class StateSpoiled.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateSpoiled</span> <span class="keyword">implements</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Turnips $turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">proceedToNext</span>(<span class="params">Turnips <span class="variable">$turnips</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// there is nothing more to do</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;spoiled&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後我們要實作大頭菜(Turnips)，除了要儲存鈴錢價格(Price)、數量(Count)以外，還要儲存當前的狀態(State)，這個狀態會在一開始被建立時就擁有，並且會在執行 <code>proceedToNext</code> 時被變更，最後提供計算鈴錢總價格的 <code>calculatePrice</code> 方法，並且根據當前的狀態(State)來切換計算模式。</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> State</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> State <span class="variable">$state</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">Turnips</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="built_in">self</span>(<span class="variable">$price</span>, <span class="variable">$count</span>);</span><br><span class="line">        <span class="variable">$turnips</span>-&gt;state = <span class="keyword">new</span> <span class="title class_">StateCreated</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$turnips</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> State $state</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setState</span>(<span class="params">State <span class="variable">$state</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;state = <span class="variable">$state</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">proceedToNext</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;state-&gt;<span class="title function_ invoke__">proceedToNext</span>(<span class="variable">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;state-&gt;<span class="title function_ invoke__">toString</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">toString</span>()) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;created&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price * <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;spoiled&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>最後我們要對狀態模式做測試，測試的項目很簡單，就是建立一個大頭菜物件，這時候是健康的大頭菜，所以應該要可以得知大頭菜現在的狀態是剛建立的 <code>created</code> 以及正常計算鈴錢價格，再來把大頭菜切換為下個狀態，也就是壞掉的大頭菜，這時候應該要獲得壞掉的狀態 <code>spoiled</code> 以及計算出 0 鈴錢。</p><p>StatePatternTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class StatePatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatePatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_state_spoiled</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="title class_">Turnips</span>::<span class="title function_ invoke__">create</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertSame</span>(<span class="string">&#x27;created&#x27;</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">toString</span>());</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line"></span><br><span class="line">        <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">proceedToNext</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertSame</span>(<span class="string">&#x27;spoiled&#x27;</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">toString</span>());</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">0</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; ...fResponsibilitiesTest   ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CommandPatternTest         ✔  </span><br><span class="line"> ==&gt; IteratorPatternTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; MediatorPatternTest        ✔  ✔  ✔  </span><br><span class="line"> ==&gt; MementoPatternTest         ✔  </span><br><span class="line"> ==&gt; NullObjectPatternTest      ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; ObserverPatternTest        ✔  </span><br><span class="line"> ==&gt; SpecificationPatternTest   ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; StatePatternTest           ✔  </span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CompositePatternTest       ✔  ✔  ✔  </span><br><span class="line"> ==&gt; DataMapperTest             ✔  ✔  </span><br><span class="line"> ==&gt; DecoratorPatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; DependencyInjectionTest    ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FacadePatternTest          ✔  </span><br><span class="line"> ==&gt; FluentInterfaceTest        ✔  </span><br><span class="line"> ==&gt; FlyweightPatternTest       ✔  </span><br><span class="line"> ==&gt; ProxyPatternTest           ✔  ✔  </span><br><span class="line"> ==&gt; RegistryPatternTest        ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.100, Memory: 8.00 MB</span><br><span class="line"></span><br><span class="line">OK (73 tests, 145 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/StatePattern">技術部落格文章 - 狀態模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Behavioral/StatePattern">狀態模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Behavioral/StatePatternTest.php">狀態模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">狀態模式，讓物件的狀態改變時，一同改變物件的行為模式，就像是大頭菜(Turnips)這個物件，有沒有壞掉只是一個狀態(State)來辨別，但如果壞掉了，那麼會因為狀態改變的關係，而讓大頭菜計算鈴錢價格的方式也跟著改變。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="行為型" scheme="https://blog.init.engineer/tags/%E8%A1%8C%E7%82%BA%E5%9E%8B/"/>
    
    <category term="狀態模式" scheme="https://blog.init.engineer/tags/%E7%8B%80%E6%85%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】規格模式 Specification Pattern</title>
    <link href="https://blog.init.engineer/posts/SpecificationPattern/"/>
    <id>https://blog.init.engineer/posts/SpecificationPattern/</id>
    <published>2020-10-09T16:00:00.000Z</published>
    <updated>2020-10-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="規格模式-Specification-Pattern"><a href="#規格模式-Specification-Pattern" class="headerlink" title="規格模式 Specification Pattern"></a>規格模式 Specification Pattern</h1><p>規格模式，將邏輯條件給抽離出來，獨立成一個模組，而不是在物件內透過邏輯判斷來撰寫複雜的程式碼，簡化物件所需要實踐的邏輯，物件可以套用一個規則，也可以套用多種規則，就像大頭菜本身的價格運算是一種規格，過期後的價格運算又是另一種規格，可以把這個價格運算的邏輯抽離出來獨立成模組。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/SpecificationPattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首當其中我們需要把大頭菜物件給建立出來，具有價格(price)以及數量(count)的記錄、讀取功能，原本會提供計算鈴錢總計(calculatePrice)的功能，但這部分是運算邏輯，所以我們需要把這個功能抽離出來放到規格模組(Specification)當中。</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$price</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$count</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來定義規格模組(Specification)的介面，這個介面會需要實作大頭菜尚未補足的邏輯，也就是計算鈴錢價格(calculatePrice)的這項功能。</p><p>Specification.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface Specification.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Specification</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後我們有兩種規格模式，分別是正常的大頭菜、壞掉的大頭菜，我們先來實作正常的情況下，大頭菜的總計鈴錢計算規格，這裡提供了可以丟大頭菜集合的方式，無論你有多少顆大頭菜，你通通都丟過來，我會全部加總一起算，就算是一顆也沒問題。</p><p>TurnipsSpecification.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class TurnipsSpecification.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TurnipsSpecification</span> <span class="keyword">implements</span> <span class="title">Specification</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Turnips[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">array</span> <span class="variable">$turnips</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Turnips[] $turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Turnips ...<span class="variable">$turnips</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips = <span class="variable">$turnips</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$total</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;turnips <span class="keyword">as</span> <span class="variable">$turnip</span>) &#123;</span><br><span class="line">            <span class="variable">$total</span> += <span class="variable">$turnip</span>-&gt;<span class="title function_ invoke__">getPrice</span>() * <span class="variable">$turnip</span>-&gt;<span class="title function_ invoke__">getCount</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$total</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後是實作壞掉的大頭菜計算模式，這裡也是一樣提供一顆或多顆大頭菜計算，不一樣的點在於因為是壞掉的大頭菜，無法賣出鈴錢，所以無論你丟過來幾顆，我都會回傳給你 0 鈴錢。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SpoiledSpecification.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpoiledSpecification</span> <span class="keyword">implements</span> <span class="title">Specification</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Specification[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">array</span> <span class="variable">$turnips</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpoiledSpecification constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Specification[] $turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Specification ...<span class="variable">$turnips</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips = <span class="variable">$turnips</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>最後我們要寫個測試，來測試規格模式是不是正確的，主要分別為單顆大頭菜與多顆大頭菜的狀況下，以及正常、壞掉的兩種規格模式的測試。</p><ol><li>單顆大頭菜使用正常規格模組，是否能正常計算出鈴錢價格。</li><li>多顆大頭菜使用正常規格模組，是否能正常計算出鈴錢價格。</li><li>單顆大頭菜使用正常規格模組，再套用壞掉的規格，是否能正常計算出壞掉的鈴錢價格。</li><li>多顆大頭菜使用正常規格模組，再套用壞掉的規格，是否能正常計算出壞掉的鈴錢價格。</li></ol><p>SpecificationPatternTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SpecificationPatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpecificationPatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_single_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable">$specification</span> = <span class="keyword">new</span> <span class="title class_">TurnipsSpecification</span>(<span class="variable">$turnips</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$specification</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_multi_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips_A</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable">$turnips_B</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">90</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="variable">$turnips_C</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">110</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="variable">$specification</span> = <span class="keyword">new</span> <span class="title class_">TurnipsSpecification</span>(<span class="variable">$turnips_A</span>, <span class="variable">$turnips_B</span>, <span class="variable">$turnips_C</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">8000</span>, <span class="variable">$specification</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_single_spoiled</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable">$specification</span> = <span class="keyword">new</span> <span class="title class_">TurnipsSpecification</span>(<span class="variable">$turnips</span>);</span><br><span class="line">        <span class="variable">$spoiled</span> = <span class="keyword">new</span> <span class="title class_">SpoiledSpecification</span>(<span class="variable">$specification</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">0</span>, <span class="variable">$spoiled</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_multi_spoiled</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips_A</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable">$turnips_B</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">90</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="variable">$turnips_C</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">110</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="variable">$specification</span> = <span class="keyword">new</span> <span class="title class_">TurnipsSpecification</span>(<span class="variable">$turnips_A</span>, <span class="variable">$turnips_B</span>, <span class="variable">$turnips_C</span>);</span><br><span class="line">        <span class="variable">$spoiled</span> = <span class="keyword">new</span> <span class="title class_">SpoiledSpecification</span>(<span class="variable">$specification</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">0</span>, <span class="variable">$spoiled</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; ...fResponsibilitiesTest   ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CommandPatternTest         ✔  </span><br><span class="line"> ==&gt; IteratorPatternTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; MediatorPatternTest        ✔  ✔  ✔  </span><br><span class="line"> ==&gt; MementoPatternTest         ✔  </span><br><span class="line"> ==&gt; NullObjectPatternTest      ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; ObserverPatternTest        ✔  </span><br><span class="line"> ==&gt; SpecificationPatternTest   ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CompositePatternTest       ✔  ✔  ✔  </span><br><span class="line"> ==&gt; DataMapperTest             ✔  ✔  </span><br><span class="line"> ==&gt; DecoratorPatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; DependencyInjectionTest    ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FacadePatternTest          ✔  </span><br><span class="line"> ==&gt; FluentInterfaceTest        ✔  </span><br><span class="line"> ==&gt; FlyweightPatternTest       ✔  </span><br><span class="line"> ==&gt; ProxyPatternTest           ✔  ✔  </span><br><span class="line"> ==&gt; RegistryPatternTest        ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.036, Memory: 8.00 MB</span><br><span class="line"></span><br><span class="line">OK (72 tests, 141 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/SpecificationPattern">技術部落格文章 - 規格模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Behavioral/SpecificationPattern">規格模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Behavioral/SpecificationPatternTest.php">規格模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">規格模式，將邏輯條件給抽離出來，獨立成一個模組，而不是在物件內透過邏輯判斷來撰寫複雜的程式碼，簡化物件所需要實踐的邏輯，物件可以套用一個規則，也可以套用多種規則，就像大頭菜本身的價格運算是一種規格，過期後的價格運算又是另一種規格，可以把這個價格運算的邏輯抽離出來獨立成模組。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="行為型" scheme="https://blog.init.engineer/tags/%E8%A1%8C%E7%82%BA%E5%9E%8B/"/>
    
    <category term="規格模式" scheme="https://blog.init.engineer/tags/%E8%A6%8F%E6%A0%BC%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】觀察者模式 Observer Pattern</title>
    <link href="https://blog.init.engineer/posts/ObserverPattern/"/>
    <id>https://blog.init.engineer/posts/ObserverPattern/</id>
    <published>2020-10-08T16:00:00.000Z</published>
    <updated>2020-10-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="觀察者模式-Observer-Pattern"><a href="#觀察者模式-Observer-Pattern" class="headerlink" title="觀察者模式 Observer Pattern"></a>觀察者模式 Observer Pattern</h1><p>觀察者模式，一種現在全中國都知道你來了的模式，就有點像是收音機，打開收音機就開始自動接收廣播，關掉收音機就停止接收，就有點像是動森的連線模式，你跟朋友在同一座島遊玩時，如果有其他朋友來玩，那你們通通都會收到這個通知，然後開始看渡渡鳥航空飛起來的動畫。</p><p><img src="https://memes.tw/user-template/7a3ef7817e20b4329ca542fb154db593.png" alt="現在全中國都知道你來了"></p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/ObserverPattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>這次我們要實作有一座島嶼(Island)讓玩家(Player)加入，當有玩家加入島嶼時，島嶼上其他的玩家會收到系統通知，所以會需要讓島嶼(Island)去繼承 <code>SplSubject</code> 這個類別，讓島嶼可以把玩家加入島嶼當中、讓玩家離開島嶼，實作這些時也順便通知其他玩家事件的產生，最後提供一個 <code>sendMessages</code> 的方法來通知當前所有加入觀察者名單的玩家。</p><p>Island.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Island.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Island</span> <span class="keyword">implements</span> <span class="title">SplSubject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用來存放觀察者名單。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> SplObjectStorage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">SplObjectStorage</span> <span class="variable">$observers</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Island constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;observers = <span class="keyword">new</span> <span class="built_in">SplObjectStorage</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 賦予觀察者物件。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> SplObserver $observer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attach</span>(<span class="params"><span class="built_in">SplObserver</span> <span class="variable">$observer</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">sendMessages</span>(<span class="string">&quot;有玩家加入了！&quot;</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;observers-&gt;<span class="title function_ invoke__">attach</span>(<span class="variable">$observer</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽離觀察者物件。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> SplObserver $observer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detach</span>(<span class="params"><span class="built_in">SplObserver</span> <span class="variable">$observer</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;observers-&gt;<span class="title function_ invoke__">detach</span>(<span class="variable">$observer</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">sendMessages</span>(<span class="string">&quot;有玩家離開了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知觀察者。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;observers <span class="keyword">as</span> <span class="variable">$observer</span>) &#123;</span><br><span class="line">            <span class="variable">$observer</span>-&gt;<span class="title function_ invoke__">update</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 發佈訊息給所有的觀察者。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendMessages</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$message</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;observers <span class="keyword">as</span> <span class="variable">$observer</span>) &#123;</span><br><span class="line">            <span class="variable">$observer</span>-&gt;<span class="title function_ invoke__">sendMessage</span>(<span class="variable">$message</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>實作完島嶼以後，接下來要把玩家(Player)建立出來，讓玩家去繼承 <code>SplObserver</code> 這個類別，這些類別是 <code>php</code> 內建提供觀察者模式的類別，詳細資訊列在 #額外補充 當中，另外需要額外提供一個 <code>sendMessage</code> 方法，代表玩家收到島嶼發出來的通知了，所以把訊息輸出出來，並補上玩家名稱的標示。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class PlayerObserver.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlayerObserver</span> <span class="keyword">implements</span> <span class="title">SplObserver</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> <span class="variable">$user</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> SplSubject[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">array</span> <span class="variable">$observers</span> = [];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * PlayerObserver constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$user</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user = <span class="variable">$user</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> SplSubject $subject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"><span class="built_in">SplSubject</span> <span class="variable">$subject</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement update() method.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$message</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[<span class="subst">$this</span>-&gt;user 收到通知] <span class="subst">$message</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="額外補充"><a href="#額外補充" class="headerlink" title="額外補充"></a>額外補充</h2><h3 id="SplSubject"><a href="#SplSubject" class="headerlink" title="SplSubject"></a>SplSubject</h3><p>繼承 <code>SplSubject</code> 這個類別會需要實作 <code>attach</code>、<code>detach</code> 及 <code>notify</code> 這三個方法，<code>attach</code> 會需要賦予 <code>SplObserver</code> 觀察者物件，也就是把觀察者加入集合當中，而 <code>detach</code> 則是抽離指定的 <code>SplObserver</code> 物件，也就是把觀察者拔除，最後 <code>notify</code> 則是通知仍然存在於集合中的觀察者們。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SplSubject</span> &#123;</span><br><span class="line">    <span class="comment">/* Methods */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="title function_ invoke__">attach</span> ( <span class="built_in">SplObserver</span> <span class="variable">$observer</span> ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="title function_ invoke__">detach</span> ( <span class="built_in">SplObserver</span> <span class="variable">$observer</span> ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="title function_ invoke__">notify</span> ( <span class="keyword">void</span> ) : <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>官方文件：<a href="https://www.php.net/manual/en/class.splsubject.php">PHP: SplSubject - Manual</a></li></ul><h3 id="SplObserver"><a href="#SplObserver" class="headerlink" title="SplObserver"></a>SplObserver</h3><p>繼承 <code>SplObserver</code> 這個類別會需要實作 <code>update</code> 這個方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SplObserver</span> &#123;</span><br><span class="line">    <span class="comment">/* Methods */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="title function_ invoke__">update</span> ( <span class="built_in">SplSubject</span> <span class="variable">$subject</span> ) : <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>官方文件：<a href="https://www.php.net/manual/en/class.splobserver.php">PHP: SplObserver - Manual</a></li></ul><h3 id="SplObjectStorage"><a href="#SplObjectStorage" class="headerlink" title="SplObjectStorage"></a>SplObjectStorage</h3><p><code>SplObjectStorage</code> 這個類別則是提供一系列的方法供使用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SplObjectStorage</span> <span class="keyword">implements</span> <span class="built_in">Countable</span> , <span class="built_in">Iterator</span> , <span class="built_in">Serializable</span> , <span class="built_in">ArrayAccess</span> &#123;</span><br><span class="line">    <span class="comment">/* Methods */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">addAll</span> ( <span class="built_in">SplObjectStorage</span> <span class="variable">$storage</span> ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">attach</span> ( <span class="keyword">object</span> <span class="variable">$object</span> [, <span class="keyword">mixed</span> <span class="variable">$data</span> = <span class="literal">NULL</span> ] ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">contains</span> ( <span class="keyword">object</span> <span class="variable">$object</span> ) : <span class="keyword">bool</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">count</span> ( <span class="keyword">void</span> ) : <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">current</span> ( <span class="keyword">void</span> ) : <span class="keyword">object</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">detach</span> ( <span class="keyword">object</span> <span class="variable">$object</span> ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">getHash</span> ( <span class="keyword">object</span> <span class="variable">$object</span> ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">getInfo</span> ( <span class="keyword">void</span> ) : <span class="keyword">mixed</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">key</span> ( <span class="keyword">void</span> ) : <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">next</span> ( <span class="keyword">void</span> ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">offsetExists</span> ( <span class="keyword">object</span> <span class="variable">$object</span> ) : <span class="keyword">bool</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">offsetGet</span> ( <span class="keyword">object</span> <span class="variable">$object</span> ) : <span class="keyword">mixed</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">offsetSet</span> ( <span class="keyword">object</span> <span class="variable">$object</span> [, <span class="keyword">mixed</span> <span class="variable">$data</span> = <span class="literal">NULL</span> ] ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">offsetUnset</span> ( <span class="keyword">object</span> <span class="variable">$object</span> ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">removeAll</span> ( <span class="built_in">SplObjectStorage</span> <span class="variable">$storage</span> ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">removeAllExcept</span> ( <span class="built_in">SplObjectStorage</span> <span class="variable">$storage</span> ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">rewind</span> ( <span class="keyword">void</span> ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">serialize</span> ( <span class="keyword">void</span> ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">setInfo</span> ( <span class="keyword">mixed</span> <span class="variable">$data</span> ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">unserialize</span> ( <span class="keyword">string</span> <span class="variable">$serialized</span> ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">valid</span> ( <span class="keyword">void</span> ) : <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>官方文件：<a href="https://www.php.net/manual/en/class.splobjectstorage.php">PHP: SplObjectStorage - Manual</a></li></ul><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>這次的測試會假設有一座島嶼建立起來，並且陸續有玩家加入、離開，模擬這段過程所會產生的訊息是否正確，所以會預設幾些動作、動作所產生的訊息：</p><ol><li>建立島嶼(Island)</li><li>建立玩家(Player A)，加入前島嶼上還沒有玩家，所以沒有人收到通知。</li><li>建立玩家(Player B)，加入前島嶼上已經有玩家 A 了，所以會產生以下通知：<ol><li>[Player A 收到通知] 有玩家加入了！</li></ol></li><li>建立玩家(Player C)，加入前島嶼上已經有玩家 A、B 了，所以會產生以下通知：<ol><li>[Player A 收到通知] 有玩家加入了！</li><li>[Player B 收到通知] 有玩家加入了！</li></ol></li><li>玩家(Player B)離開了島嶼，離開後島嶼上剩下 A、C 玩家，所以會產生以下通知：<ol><li>[Player A 收到通知] 有玩家離開了！</li><li>[Player C 收到通知] 有玩家離開了！</li></ol></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class ObserverPatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObserverPatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_observer</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">expectOutputString</span>(<span class="title function_ invoke__">implode</span>(<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&quot;[Player A 收到通知] 有玩家加入了！&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[Player A 收到通知] 有玩家加入了！&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[Player B 收到通知] 有玩家加入了！&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[Player A 收到通知] 有玩家離開了！&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[Player C 收到通知] 有玩家離開了！&quot;</span>,</span><br><span class="line">        )));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 建立一個島嶼</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="variable">$island</span> = <span class="keyword">new</span> <span class="title class_">Island</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Player A 加入了這座島嶼</span></span><br><span class="line"><span class="comment">         * 加入前島上沒有玩家</span></span><br><span class="line"><span class="comment">         * 所以沒有叮咚通知</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="variable">$playerA</span> = <span class="keyword">new</span> <span class="title class_">PlayerObserver</span>(<span class="string">&#x27;Player A&#x27;</span>);</span><br><span class="line">        <span class="variable">$island</span>-&gt;<span class="title function_ invoke__">attach</span>(<span class="variable">$playerA</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Player B 加入了這座島嶼</span></span><br><span class="line"><span class="comment">         * 加入前島上有 1 位玩家</span></span><br><span class="line"><span class="comment">         * 扣除自己後，會有 A 收到叮咚通知</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="variable">$playerB</span> = <span class="keyword">new</span> <span class="title class_">PlayerObserver</span>(<span class="string">&#x27;Player B&#x27;</span>);</span><br><span class="line">        <span class="variable">$island</span>-&gt;<span class="title function_ invoke__">attach</span>(<span class="variable">$playerB</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Player C 加入了這座島嶼</span></span><br><span class="line"><span class="comment">         * 加入前島上有 2 位玩家</span></span><br><span class="line"><span class="comment">         * 扣除自己後，會有 A、B 收到叮咚通知</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="variable">$playerC</span> = <span class="keyword">new</span> <span class="title class_">PlayerObserver</span>(<span class="string">&#x27;Player C&#x27;</span>);</span><br><span class="line">        <span class="variable">$island</span>-&gt;<span class="title function_ invoke__">attach</span>(<span class="variable">$playerC</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Island_B 離開了這座島嶼</span></span><br><span class="line"><span class="comment">         * 離開前島上有 3 位玩家</span></span><br><span class="line"><span class="comment">         * 扣除自己後，會有 A、C 收到叮咚通知</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="variable">$island</span>-&gt;<span class="title function_ invoke__">detach</span>(<span class="variable">$playerB</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; ...fResponsibilitiesTest   ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CommandPatternTest         ✔  </span><br><span class="line"> ==&gt; IteratorPatternTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; MediatorPatternTest        ✔  ✔  ✔  </span><br><span class="line"> ==&gt; MementoPatternTest         ✔  </span><br><span class="line"> ==&gt; NullObjectPatternTest      ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; ObserverPatternTest        ✔  </span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CompositePatternTest       ✔  ✔  ✔  </span><br><span class="line"> ==&gt; DataMapperTest             ✔  ✔  </span><br><span class="line"> ==&gt; DecoratorPatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; DependencyInjectionTest    ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FacadePatternTest          ✔  </span><br><span class="line"> ==&gt; FluentInterfaceTest        ✔  </span><br><span class="line"> ==&gt; FlyweightPatternTest       ✔  </span><br><span class="line"> ==&gt; ProxyPatternTest           ✔  ✔  </span><br><span class="line"> ==&gt; RegistryPatternTest        ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.097, Memory: 8.00 MB</span><br><span class="line"></span><br><span class="line">OK (68 tests, 137 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/ObserverPattern">技術部落格文章 - 觀察者模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Behavioral/ObserverPattern">觀察者模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Behavioral/ObserverPatternTest.php">觀察者模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">觀察者模式，一種現在全中國都知道你來了的模式，就有點像是收音機，打開收音機就開始自動接收廣播，關掉收音機就停止接收，就有點像是動森的連線模式，你跟朋友在同一座島遊玩時，如果有其他朋友來玩，那你們通通都會收到這個通知，然後開始看渡渡鳥航空飛起來的動畫。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="行為型" scheme="https://blog.init.engineer/tags/%E8%A1%8C%E7%82%BA%E5%9E%8B/"/>
    
    <category term="觀察者模式" scheme="https://blog.init.engineer/tags/%E8%A7%80%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】空物件模式 Null Object Pattern</title>
    <link href="https://blog.init.engineer/posts/NullObjectPattern/"/>
    <id>https://blog.init.engineer/posts/NullObjectPattern/</id>
    <published>2020-10-07T16:00:00.000Z</published>
    <updated>2020-10-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="空物件模式-Null-Object-Pattern"><a href="#空物件模式-Null-Object-Pattern" class="headerlink" title="空物件模式 Null Object Pattern"></a>空物件模式 Null Object Pattern</h1><p>空物件模式，一種以非 Null 的空白物件去取代 Null 的模式，其空白物件並不是拿來比對資料是否為 Null，而是讓原本應該做些事情的物件，因為空白物件而不做任何事，或是去執行預設的動作，打個比喻來說，遊戲裡面購買、販賣大頭菜是要找不同 NPC 的，如果要購買大頭菜，那就必須找曹賣(Daisy Mae)來購買，如果要販賣大頭菜則是找豆狸粒狸(Mamekichi and Tsubukichi)來販賣。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/NullObjectPattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>玩家要購買、販賣大頭菜會跟 NPC 進行這些動作，所以我們要先定義 NPC 所能提供的功能有哪些，因此會有購買大頭菜、販賣大頭菜這兩個方法被定義出來，如果繼承了 NPC 這個介面就要去實作這兩個方法。</p><p>NPC.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface NPC.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">NPC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buyTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sellTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下來實作曹賣(Daisy Mae)，但曹賣本身就只能購買大頭菜，因此在購買大頭菜的方法上實作這件事，但在販賣大頭菜的部分則是可以撰寫些對應的處理流程，這邊舉例為曹賣的貼心告知。</p><p>DaisyMae.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class DaisyMae.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DaisyMae</span> <span class="keyword">implements</span> <span class="title">NPC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buyTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[曹賣] 今天的價格是 1 棵 <span class="subst">$price</span> 鈴錢，要現在買嗎？&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sellTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[曹賣] 我是曹賣，你不能把大頭菜賣給我。&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>曹賣(DaisyMae)是負責提供玩家可以購買大頭菜的重要 NPC，因此接下來要撰寫豆狸(Mamekichi)以及粒狸(Tsubukichi)兩位負責提供玩家販賣大頭菜的重要 NPC。</p><p>Mamekichi.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Mamekichi.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mamekichi</span> <span class="keyword">implements</span> <span class="title">NPC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buyTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[豆狸] 我是豆狸，我沒有在賣大頭菜狸。&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[粒狸] 沒有在賣。&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sellTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$total</span> = <span class="variable">$price</span> * <span class="variable">$count</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[豆狸] 現在的大頭菜價格是 1 棵 <span class="subst">$price</span> 鈴錢！&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[粒狸] 鈴錢！&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[豆狸] 好了！那麼，一共是 <span class="subst">$total</span> 鈴錢，確定要賣掉嗎？&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[粒狸] 賣掉嗎？&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tsubukichi.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Tsubukichi.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tsubukichi</span> <span class="keyword">implements</span> <span class="title">NPC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buyTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[粒狸] 我是粒狸，我沒有在賣大頭菜狸。&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[豆狸] 沒有在賣。&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sellTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$total</span> = <span class="variable">$price</span> * <span class="variable">$count</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[粒狸] 現在的大頭菜價格是 1 棵 <span class="subst">$price</span> 鈴錢！&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[豆狸] 鈴錢！&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[粒狸] 好了！那麼，一共是 <span class="subst">$total</span> 鈴錢，確定要賣掉嗎？&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[豆狸] 賣掉嗎？&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後我們要模擬玩家(Player)出來，並且帶入當前目標 NPC 物件，假想為玩家目前正在對話的目標，並且有兩個行為，分別是購買大頭菜、販賣大頭菜的動作。</p><p>Player.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Player</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> NPC</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> NPC <span class="variable">$npc</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> NPC $npc</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">NPC <span class="variable">$npc</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setNPC</span>(<span class="variable">$npc</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> NPC $npc</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setNPC</span>(<span class="params">NPC <span class="variable">$npc</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;npc = <span class="variable">$npc</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buy</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;npc-&gt;<span class="title function_ invoke__">buyTurnips</span>(<span class="variable">$price</span>, <span class="variable">$count</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sell</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;npc-&gt;<span class="title function_ invoke__">sellTurnips</span>(<span class="variable">$price</span>, <span class="variable">$count</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>最後我們要測試空物件模式的幾個需要做的事情，首先是測試在無法提供特定功能下，其物件是否會執行預設給予的行為動作，像是曹賣僅提供購買大頭菜的功能，但不提供販賣大頭菜的功能，如果玩家對曹賣執行販賣大頭菜的功能，那麼曹賣會告訴玩家這項動作無法執行。</p><ol><li>測試曹賣執行購買、販賣大頭菜的動作。</li><li>測試豆狸執行購買、販賣大頭菜的動作。</li><li>測試粒狸執行購買、販賣大頭菜的動作。</li><li>測試對曹賣購買大頭菜，並切換 NPC 目標，向豆狸、粒狸販賣大頭菜。</li></ol><p>NullObjectPatternTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class NullObjectPatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NullObjectPatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_daisy_mas</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">expectOutputString</span>(<span class="title function_ invoke__">implode</span>(<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&quot;[曹賣] 今天的價格是 1 棵 100 鈴錢，要現在買嗎？&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[曹賣] 我是曹賣，你不能把大頭菜賣給我。&quot;</span>,</span><br><span class="line">        )));</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$player</span> = <span class="keyword">new</span> <span class="title class_">Player</span>(<span class="keyword">new</span> <span class="title class_">DaisyMae</span>());</span><br><span class="line">        <span class="variable">$player</span>-&gt;<span class="title function_ invoke__">buy</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable">$player</span>-&gt;<span class="title function_ invoke__">sell</span>(<span class="number">200</span>, <span class="number">40</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_mamekichi</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">expectOutputString</span>(<span class="title function_ invoke__">implode</span>(<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&quot;[豆狸] 我是豆狸，我沒有在賣大頭菜狸。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[粒狸] 沒有在賣。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[豆狸] 現在的大頭菜價格是 1 棵 200 鈴錢！&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[粒狸] 鈴錢！&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[豆狸] 好了！那麼，一共是 8000 鈴錢，確定要賣掉嗎？[粒狸] 賣掉嗎？&quot;</span>,</span><br><span class="line">        )));</span><br><span class="line"></span><br><span class="line">        <span class="variable">$player</span> = <span class="keyword">new</span> <span class="title class_">Player</span>(<span class="keyword">new</span> <span class="title class_">Mamekichi</span>());</span><br><span class="line">        <span class="variable">$player</span>-&gt;<span class="title function_ invoke__">buy</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable">$player</span>-&gt;<span class="title function_ invoke__">sell</span>(<span class="number">200</span>, <span class="number">40</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_tsubukichi</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">expectOutputString</span>(<span class="title function_ invoke__">implode</span>(<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&quot;[粒狸] 我是粒狸，我沒有在賣大頭菜狸。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[豆狸] 沒有在賣。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[粒狸] 現在的大頭菜價格是 1 棵 200 鈴錢！&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[豆狸] 鈴錢！&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[粒狸] 好了！那麼，一共是 8000 鈴錢，確定要賣掉嗎？&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[豆狸] 賣掉嗎？&quot;</span>,</span><br><span class="line">        )));</span><br><span class="line"></span><br><span class="line">        <span class="variable">$player</span> = <span class="keyword">new</span> <span class="title class_">Player</span>(<span class="keyword">new</span> <span class="title class_">Tsubukichi</span>());</span><br><span class="line">        <span class="variable">$player</span>-&gt;<span class="title function_ invoke__">buy</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable">$player</span>-&gt;<span class="title function_ invoke__">sell</span>(<span class="number">200</span>, <span class="number">40</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_daisy_mas_buy_and_mamekichi_and_tsubukichi</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">expectOutputString</span>(<span class="title function_ invoke__">implode</span>(<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&quot;[曹賣] 今天的價格是 1 棵 100 鈴錢，要現在買嗎？&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[豆狸] 現在的大頭菜價格是 1 棵 200 鈴錢！&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[粒狸] 鈴錢！&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[豆狸] 好了！那麼，一共是 4000 鈴錢，確定要賣掉嗎？&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[粒狸] 賣掉嗎？&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[粒狸] 現在的大頭菜價格是 1 棵 300 鈴錢！&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[豆狸] 鈴錢！&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[粒狸] 好了！那麼，一共是 6000 鈴錢，確定要賣掉嗎？&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[豆狸] 賣掉嗎？&quot;</span>,</span><br><span class="line">        )));</span><br><span class="line"></span><br><span class="line">        <span class="variable">$player</span> = <span class="keyword">new</span> <span class="title class_">Player</span>(<span class="keyword">new</span> <span class="title class_">DaisyMae</span>());</span><br><span class="line">        <span class="variable">$player</span>-&gt;<span class="title function_ invoke__">buy</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable">$player</span>-&gt;<span class="title function_ invoke__">setNPC</span>(<span class="keyword">new</span> <span class="title class_">Mamekichi</span>());</span><br><span class="line">        <span class="variable">$player</span>-&gt;<span class="title function_ invoke__">sell</span>(<span class="number">200</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="variable">$player</span>-&gt;<span class="title function_ invoke__">setNPC</span>(<span class="keyword">new</span> <span class="title class_">Tsubukichi</span>());</span><br><span class="line">        <span class="variable">$player</span>-&gt;<span class="title function_ invoke__">sell</span>(<span class="number">300</span>, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; ...fResponsibilitiesTest   ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CommandPatternTest         ✔  </span><br><span class="line"> ==&gt; IteratorPatternTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; MediatorPatternTest        ✔  ✔  ✔  </span><br><span class="line"> ==&gt; MementoPatternTest         ✔  </span><br><span class="line"> ==&gt; NullObjectPatternTest      ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CompositePatternTest       ✔  ✔  ✔  </span><br><span class="line"> ==&gt; DataMapperTest             ✔  ✔  </span><br><span class="line"> ==&gt; DecoratorPatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; DependencyInjectionTest    ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FacadePatternTest          ✔  </span><br><span class="line"> ==&gt; FluentInterfaceTest        ✔  </span><br><span class="line"> ==&gt; FlyweightPatternTest       ✔  </span><br><span class="line"> ==&gt; ProxyPatternTest           ✔  ✔  </span><br><span class="line"> ==&gt; RegistryPatternTest        ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.042, Memory: 8.00 MB</span><br><span class="line"></span><br><span class="line">OK (67 tests, 136 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/NullObjectPattern">技術部落格文章 - 空物件模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Behavioral/NullObjectPattern">空物件模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Behavioral/NullObjectPatternTest.php">空物件模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">空物件模式，一種以非 Null 的空白物件去取代 Null 的模式，其空白物件並不是拿來比對資料是否為 Null，而是讓原本應該做些事情的物件，因為空白物件而不做任何事，或是去執行預設的動作，打個比喻來說，遊戲裡面購買、販賣大頭菜是要找不同 NPC 的，如果要購買大頭菜，那就必須找曹賣(Daisy Mae)來購買，如果要販賣大頭菜則是找豆狸粒狸(Mamekichi and Tsubukichi)來販賣。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="行為型" scheme="https://blog.init.engineer/tags/%E8%A1%8C%E7%82%BA%E5%9E%8B/"/>
    
    <category term="空物件模式" scheme="https://blog.init.engineer/tags/%E7%A9%BA%E7%89%A9%E4%BB%B6%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】備忘錄模式 Memento Pattern</title>
    <link href="https://blog.init.engineer/posts/MementoPattern/"/>
    <id>https://blog.init.engineer/posts/MementoPattern/</id>
    <published>2020-10-06T16:00:00.000Z</published>
    <updated>2020-10-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="備忘錄模式-Memento-Pattern"><a href="#備忘錄模式-Memento-Pattern" class="headerlink" title="備忘錄模式 Memento Pattern"></a>備忘錄模式 Memento Pattern</h1><p>備忘錄模式，在不破壞封裝物件的前提之下，提供物件一個「皇后殺手 第三爆彈：敗者成塵」的能力，物件在極度絕望的狀態下，把當前物件炸光光，並令時間往前倒退至上一個時空紀錄點的設計模式，跟吉良吉影的不同點在於命運會跟著被改變，被破壞的東西會恢復原狀。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/MementoPattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>為了讓大頭菜有爆掉並往前倒退至上一個時空紀錄點的功能，這次我們要先實作備忘錄模式，用來儲存大頭菜的時空狀態，好讓大頭菜可以回到過去。</p><p>大頭菜：「キラークイーン、バイツ・ザ・ダスト！」</p><p>Memento.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Memento.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memento</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Memento constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下來要實作擁有第三爆彈的大頭菜，除了以往所擁有的資訊、方法以外，這次要提供儲存、載入的功能，讓大頭菜能在任意的時空點進行儲存，並且在自己被逼到極限時，按下第三爆彈穿越時空回到過去。</p><p>大頭菜：「到極限了，就是現在，按下去！」</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Memento</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">saveToMemento</span>(<span class="params"></span>): <span class="title">Memento</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Memento</span>(<span class="variable language_">$this</span>-&gt;price, <span class="variable language_">$this</span>-&gt;count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Memento $memento</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">restoreFromMemento</span>(<span class="params">Memento <span class="variable">$memento</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$memento</span>-&gt;<span class="title function_ invoke__">getPrice</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$memento</span>-&gt;<span class="title function_ invoke__">getCount</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getPrice</span>() * <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getCount</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>接下來我們要替第三爆彈模式測試一下，要讓大頭菜真的儲存某個時空點，並且按下爆彈炸毀當前物件，然後飛躍時空回到過去。</p><p>MementoPatternTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class MementoPatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MementoPatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_bites_the_dust</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 儲存當前時空</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="variable">$memento</span> = <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">saveToMemento</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$newPrice</span> = <span class="title function_ invoke__">random_int</span>(<span class="number">0</span>, <span class="number">600</span>);</span><br><span class="line">        <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">setPrice</span>(<span class="variable">$newPrice</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="variable">$newPrice</span> * <span class="number">40</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 到極限了，就是現在，按下去！</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">restoreFromMemento</span>(<span class="variable">$memento</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; ...fResponsibilitiesTest   ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CommandPatternTest         ✔  </span><br><span class="line"> ==&gt; IteratorPatternTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; MediatorPatternTest        ✔  ✔  ✔  </span><br><span class="line"> ==&gt; MementoPatternTest         ✔  </span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CompositePatternTest       ✔  ✔  ✔  </span><br><span class="line"> ==&gt; DataMapperTest             ✔  ✔  </span><br><span class="line"> ==&gt; DecoratorPatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; DependencyInjectionTest    ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FacadePatternTest          ✔  </span><br><span class="line"> ==&gt; FluentInterfaceTest        ✔  </span><br><span class="line"> ==&gt; FlyweightPatternTest       ✔  </span><br><span class="line"> ==&gt; ProxyPatternTest           ✔  ✔  </span><br><span class="line"> ==&gt; RegistryPatternTest        ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.105, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (63 tests, 132 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/MementoPattern">技術部落格文章 - 備忘錄模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Behavioral/MementoPattern">備忘錄模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Behavioral/MementoPatternTest.php">備忘錄模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">備忘錄模式，在不破壞封裝物件的前提之下，提供物件一個「皇后殺手 第三爆彈：敗者成塵」的能力，物件在極度絕望的狀態下，把當前物件炸光光，並令時間往前倒退至上一個時空紀錄點的設計模式，跟吉良吉影的不同點在於命運會跟著被改變，被破壞的東西會恢復原狀。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="行為型" scheme="https://blog.init.engineer/tags/%E8%A1%8C%E7%82%BA%E5%9E%8B/"/>
    
    <category term="備忘錄模式" scheme="https://blog.init.engineer/tags/%E5%82%99%E5%BF%98%E9%8C%84%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】中介者模式 Mediator Pattern</title>
    <link href="https://blog.init.engineer/posts/MediatorPattern/"/>
    <id>https://blog.init.engineer/posts/MediatorPattern/</id>
    <published>2020-10-05T16:00:00.000Z</published>
    <updated>2020-10-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="中介者模式-Mediator-Pattern"><a href="#中介者模式-Mediator-Pattern" class="headerlink" title="中介者模式 Mediator Pattern"></a>中介者模式 Mediator Pattern</h1><p>中介者模式，在兩個不同的封裝物件之間，作為中間進行交互的模式，可以減少物件之間的依賴關係，並且降低耦合性問題，舉例來說有背包(Bag)與商店(Store)這兩個物件，你會從背包(Bag)當中拿出鈴錢(Bells)去商店(Store)購買大頭菜(Turnips)，但它們應該要各自其職，不要太過於互相依賴，因此你會需要有個中間控制這些物件的中介者(Mediator)。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/MediatorPattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先我們不外乎先製作出大頭菜(Turnips)物件，只需要賦予簡單計算數量的功能即可。</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Turnips</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setCount</span>(<span class="variable">$count</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下來我們要做出背包(Bag)以及商店(Store)這兩個物件，因為這兩個物件會進行交互，所以需要有一個抽象類別去把中介者(Mediator)帶入，這裡稱之為協調同事(Colleague)物件，所以我們要先實作出協調同事(Colleague)這項物件，再去實作背包(Bag)以及商店(Store)這兩個物件，並且繼承協調同事(Colleague)這個抽象。</p><p>Colleague.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Abstract Colleague.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Mediator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Mediator <span class="variable">$mediator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Mediator $mediator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setMediator</span>(<span class="params">Mediator <span class="variable">$mediator</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;mediator = <span class="variable">$mediator</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Bag.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bag</span> <span class="keyword">extends</span> <span class="title">Colleague</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Bells</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$bells</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$turnips</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bag constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bells = <span class="keyword">new</span> <span class="title class_">Bells</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBells</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;bells-&gt;<span class="title function_ invoke__">getBells</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTurnips</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;turnips-&gt;<span class="title function_ invoke__">getCount</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $bells</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setBells</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$bells</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[背包] 剩下 <span class="subst">$bells</span> 鈴錢。&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bells-&gt;<span class="title function_ invoke__">setBells</span>(<span class="variable">$bells</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[背包] 剩下 <span class="subst">$count</span> 顆大頭菜。&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips-&gt;<span class="title function_ invoke__">setCount</span>(<span class="variable">$count</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Store.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">InvalidArgumentException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Store.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> <span class="keyword">extends</span> <span class="title">Colleague</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidArgumentException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buyTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$total</span> = <span class="variable">$price</span> * <span class="variable">$count</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;mediator-&gt;<span class="title function_ invoke__">getBells</span>() &gt;= <span class="variable">$total</span>) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 跟商店(Store)買大頭菜(Turnips)，並且將大頭菜放入背包(Bag)當中。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;mediator-&gt;<span class="title function_ invoke__">setBells</span>(<span class="variable">$this</span>-&gt;mediator-&gt;<span class="title function_ invoke__">getBells</span>() - <span class="variable">$total</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;[商店] 收到了 <span class="subst">$total</span> 鈴錢。&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;[商店] 賣出了 <span class="subst">$count</span> 顆大頭菜。&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;mediator-&gt;<span class="title function_ invoke__">setTurnips</span>(<span class="variable">$this</span>-&gt;mediator-&gt;<span class="title function_ invoke__">getTurnips</span>() + <span class="variable">$count</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="string">&#x27;[錯誤] 您背包裡的鈴錢不足，無法購買大頭菜。&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidArgumentException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sellTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;mediator-&gt;<span class="title function_ invoke__">getTurnips</span>() &gt;= <span class="variable">$count</span>) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 跟商店(Store)賣大頭菜(Turnips)，並且將鈴錢放入背包(Bag)當中。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;mediator-&gt;<span class="title function_ invoke__">setTurnips</span>(<span class="variable">$this</span>-&gt;mediator-&gt;<span class="title function_ invoke__">getTurnips</span>() - <span class="variable">$count</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;[商店] 收購了 <span class="subst">$count</span> 顆大頭菜。&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$total</span> = <span class="variable">$price</span> * <span class="variable">$count</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;[商店] 支出了 <span class="subst">$total</span> 鈴錢。&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;mediator-&gt;<span class="title function_ invoke__">setBells</span>(<span class="variable">$this</span>-&gt;mediator-&gt;<span class="title function_ invoke__">getBells</span>() + <span class="variable">$total</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="string">&#x27;[錯誤] 您背包裡的大頭菜不足，無法販賣大頭菜。&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後我們要來把中介者(Mediator)實作出來，這個中介者(Mediator)會作為背包(Bag)以及商店(Store)之間交互的載體，所以在實作之前先定義它的介面(Interface)出來。</p><p>MediatorInterface.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface MediatorInterface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MediatorInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBells</span>(<span class="params"></span>): <span class="title">int</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTurnips</span>(<span class="params"></span>): <span class="title">int</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $bells</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setBells</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$bells</span></span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buyTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sellTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後去實作出背包(Bag)與商店(Store)的中介者(Mediator)，背包(Bag)主要控制鈴錢(Bells)以及大頭菜(Turnips)，商店(Store)則是會透過中介者(Mediator)去向背包(Bag)去索取鈴錢(Bells)以及大頭菜(Turnips)，而不是真的去觸及背包(Bag)，減少物件之間的依賴關係。</p><p>BagStoreMediator.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">InvalidArgumentException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class BagStoreMediator.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BagStoreMediator</span> <span class="keyword">implements</span> <span class="title">MediatorInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Bag</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Bag <span class="variable">$bag</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Store</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Store <span class="variable">$store</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BagStoreMediator constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Bag $bag</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Store $store</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Bag <span class="variable">$bag</span>, Store <span class="variable">$store</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bag = <span class="variable">$bag</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;store = <span class="variable">$store</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">setMediator</span>(<span class="variable">$this</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;store-&gt;<span class="title function_ invoke__">setMediator</span>(<span class="variable">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBells</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">getBells</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTurnips</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">getTurnips</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $bells</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setBells</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$bells</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">setBells</span>(<span class="variable">$bells</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">setTurnips</span>(<span class="variable">$count</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidArgumentException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buyTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$total</span> = <span class="variable">$price</span> * <span class="variable">$count</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">getBells</span>() &gt;= <span class="variable">$total</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;[玩家] 您購買了 <span class="subst">$count</span> 顆大頭菜，每顆單價 <span class="subst">$price</span> 鈴錢，總共 <span class="subst">$total</span> 鈴錢。&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;store-&gt;<span class="title function_ invoke__">buyTurnips</span>(<span class="variable">$price</span>, <span class="variable">$count</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="string">&#x27;[錯誤] 您的大頭菜不足，無法購買大頭菜。&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidArgumentException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sellTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$total</span> = <span class="variable">$price</span> * <span class="variable">$count</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">getTurnips</span>() &gt;= <span class="variable">$count</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;[玩家] 您販賣了 <span class="subst">$count</span> 顆大頭菜，每顆單價 <span class="subst">$price</span> 鈴錢，總共 <span class="subst">$total</span> 鈴錢。&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;store-&gt;<span class="title function_ invoke__">sellTurnips</span>(<span class="variable">$price</span>, <span class="variable">$count</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="string">&#x27;[錯誤] 您的大頭菜不足，無法販賣大頭菜。&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>最後根據上面的中介者，我們要做幾個簡單的測試，第一件事是測試進行買賣大頭菜時，所產生的 Log 順序、資料是否正確，其次是例外錯誤 InvalidArgumentException 是否有確實。</p><p>MediatorPatternTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class MediatorPatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MediatorPatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_buy_and_sell_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$mediator</span> = <span class="keyword">new</span> <span class="title class_">BagStoreMediator</span>(<span class="keyword">new</span> <span class="title class_">Bag</span>(), <span class="keyword">new</span> <span class="title class_">Store</span>());</span><br><span class="line">        <span class="variable">$mediator</span>-&gt;<span class="title function_ invoke__">setBells</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">expectOutputString</span>(<span class="title function_ invoke__">implode</span>(<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&quot;[背包] 剩下 10000 鈴錢。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[玩家] 您購買了 40 顆大頭菜，每顆單價 100 鈴錢，總共 4000 鈴錢。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[背包] 剩下 6000 鈴錢。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[商店] 收到了 4000 鈴錢。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[商店] 賣出了 40 顆大頭菜。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[背包] 剩下 40 顆大頭菜。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[玩家] 您販賣了 20 顆大頭菜，每顆單價 200 鈴錢，總共 4000 鈴錢。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[背包] 剩下 20 顆大頭菜。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[商店] 收購了 20 顆大頭菜。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[商店] 支出了 4000 鈴錢。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[背包] 剩下 10000 鈴錢。&quot;</span>,</span><br><span class="line">        )));</span><br><span class="line"></span><br><span class="line">        <span class="variable">$mediator</span>-&gt;<span class="title function_ invoke__">buyTurnips</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable">$mediator</span>-&gt;<span class="title function_ invoke__">sellTurnips</span>(<span class="number">200</span>, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_buy_turnips_overflow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">expectException</span>(<span class="title class_">InvalidArgumentException</span>::<span class="variable language_">class</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$mediator</span> = <span class="keyword">new</span> <span class="title class_">BagStoreMediator</span>(<span class="keyword">new</span> <span class="title class_">Bag</span>(), <span class="keyword">new</span> <span class="title class_">Store</span>());</span><br><span class="line">        <span class="variable">$mediator</span>-&gt;<span class="title function_ invoke__">buyTurnips</span>(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_sell_turnips_overflow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">expectException</span>(<span class="title class_">InvalidArgumentException</span>::<span class="variable language_">class</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$mediator</span> = <span class="keyword">new</span> <span class="title class_">BagStoreMediator</span>(<span class="keyword">new</span> <span class="title class_">Bag</span>(), <span class="keyword">new</span> <span class="title class_">Store</span>());</span><br><span class="line">        <span class="variable">$mediator</span>-&gt;<span class="title function_ invoke__">sellTurnips</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; ...fResponsibilitiesTest   ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CommandPatternTest         ✔  </span><br><span class="line"> ==&gt; IteratorPatternTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; MediatorPatternTest        ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CompositePatternTest       ✔  ✔  ✔  </span><br><span class="line"> ==&gt; DataMapperTest             ✔  ✔  </span><br><span class="line"> ==&gt; DecoratorPatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; DependencyInjectionTest    ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FacadePatternTest          ✔  </span><br><span class="line"> ==&gt; FluentInterfaceTest        ✔  </span><br><span class="line"> ==&gt; FlyweightPatternTest       ✔  </span><br><span class="line"> ==&gt; ProxyPatternTest           ✔  ✔  </span><br><span class="line"> ==&gt; RegistryPatternTest        ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.173, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (62 tests, 129 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/MediatorPattern">技術部落格文章 - 中介者模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Behavioral/MediatorPattern">中介者模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Behavioral/MediatorPatternTest.php">中介者模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">中介者模式，在兩個不同的封裝物件之間，作為中間進行交互的模式，可以減少物件之間的依賴關係，並且降低耦合性問題，舉例來說有背包(Bag)與商店(Store)這兩個物件，你會從背包(Bag)當中拿出鈴錢(Bells)去商店(Store)購買大頭菜(Turnips)，但它們應該要各自其職，不要太過於互相依賴，因此你會需要有個中間控制這些物件的中介者(Mediator)。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="行為型" scheme="https://blog.init.engineer/tags/%E8%A1%8C%E7%82%BA%E5%9E%8B/"/>
    
    <category term="中介者模式" scheme="https://blog.init.engineer/tags/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】疊代器模式 Iterator Pattern</title>
    <link href="https://blog.init.engineer/posts/IteratorPattern/"/>
    <id>https://blog.init.engineer/posts/IteratorPattern/</id>
    <published>2020-10-04T16:00:00.000Z</published>
    <updated>2020-10-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="疊代器模式-Iterator-Pattern"><a href="#疊代器模式-Iterator-Pattern" class="headerlink" title="疊代器模式 Iterator Pattern"></a>疊代器模式 Iterator Pattern</h1><p>疊代器模式，提供一種方法來簡單控制一個集合物件，這段過程並不會暴露該物件的來源或修改它，就有點像是你的背包(Bag)一樣，疊代器(Iterator)可以簡單控制你背包中的大頭菜(Turnips)以及鈴錢(Bells)。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/IteratorPattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先我們一樣要先建立大頭菜物件(Turnips)，並且賦予一些簡單方法，像是島嶼(Island)、鈴錢價格(Price)及數量(Count)，並且提供簡單的取得(get)及賦予(set)方法。</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> <span class="variable">$island</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $island</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$island</span>, <span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setIsland</span>(<span class="variable">$island</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setPrice</span>(<span class="variable">$price</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setCount</span>(<span class="variable">$count</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $island</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setIsland</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$island</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;island = <span class="variable">$island</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getIsland</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;island;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getPrice</span>() * <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getCount</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來我們要建立背包(Bag)來負責管理大頭菜這個集合，這裡比較特別的是我們要實作 <code>Countable</code> 以及 <code>Iterator</code> 這兩個介面，讓背包可以直接提供 Count 方法、陣列 Array 相關方法。</p><p>Bag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Countable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Iterator</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Bag.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bag</span> <span class="keyword">implements</span> <span class="title">Countable</span>, <span class="title">Iterator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Turnips[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">array</span> <span class="variable">$turnips</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$currentIndex</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addTurnips</span>(<span class="params">Turnips <span class="variable">$turnips</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips[] = <span class="variable">$turnips</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeTurnips</span>(<span class="params">Turnips <span class="variable">$turnipsToRemove</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;turnips <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$turnip</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$turnip</span>-&gt;<span class="title function_ invoke__">getIsland</span>() === <span class="variable">$turnipsToRemove</span>-&gt;<span class="title function_ invoke__">getIsland</span>()) &#123;</span><br><span class="line">                <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;turnips[<span class="variable">$key</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips = <span class="title function_ invoke__">array_values</span>(<span class="variable">$this</span>-&gt;turnips);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">count</span>(<span class="variable">$this</span>-&gt;turnips);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">current</span>(<span class="params"></span>): <span class="title">Turnips</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;turnips[<span class="variable language_">$this</span>-&gt;currentIndex];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">key</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;currentIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;currentIndex++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rewind</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;currentIndex = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">valid</span>(<span class="params"></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;turnips[<span class="variable language_">$this</span>-&gt;currentIndex]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="額外補充"><a href="#額外補充" class="headerlink" title="額外補充"></a>額外補充</h2><h3 id="Countable"><a href="#Countable" class="headerlink" title="Countable"></a>Countable</h3><p>繼承 <code>Countable</code> 這個類別可以使用 <code>count()</code> 這個方法，因此需要實作它。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Countable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* Methods */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="title function_ invoke__">count</span> ( <span class="keyword">void</span> ) : <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>官方文件：<a href="https://www.php.net/manual/en/class.countable.php">PHP: Countable - Manual</a></li></ul><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p>繼承 <code>Iterator</code> 這個類別可以使用 <code>current()</code>、<code>key()</code>、<code>next()</code>、<code>rewind()</code>、<code>valid()</code> 這些方法，因此需要實作它們。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iterator</span> <span class="keyword">extends</span> <span class="title">Traversable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* Methods */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="title function_ invoke__">current</span> ( <span class="keyword">void</span> ) : <span class="keyword">mixed</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="title function_ invoke__">key</span> ( <span class="keyword">void</span> ) : scalar</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="title function_ invoke__">next</span> ( <span class="keyword">void</span> ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="title function_ invoke__">rewind</span> ( <span class="keyword">void</span> ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="title function_ invoke__">valid</span> ( <span class="keyword">void</span> ) : <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>官方文件：<a href="https://www.php.net/manual/en/class.iterator.php">PHP: Iterator - Manual</a></li></ul><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>IteratorPatternTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class IteratorPatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IteratorPatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_iterate_over_bag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$bag</span> = <span class="keyword">new</span> <span class="title class_">Bag</span>();</span><br><span class="line">        <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">addTurnips</span>(<span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="string">&#x27;Island_A&#x27;</span>, <span class="number">100</span>, <span class="number">40</span>));</span><br><span class="line">        <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">addTurnips</span>(<span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="string">&#x27;Island_B&#x27;</span>, <span class="number">90</span>, <span class="number">40</span>));</span><br><span class="line">        <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">addTurnips</span>(<span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="string">&#x27;Island_C&#x27;</span>, <span class="number">80</span>, <span class="number">40</span>));</span><br><span class="line"></span><br><span class="line">        <span class="variable">$islands</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$bag</span> <span class="keyword">as</span> <span class="variable">$turnips</span>) &#123;</span><br><span class="line">            <span class="variable">$islands</span>[] = <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">getIsland</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertSame</span>(</span><br><span class="line">            <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&#x27;Island_A&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Island_B&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Island_C&#x27;</span></span><br><span class="line">            ),</span><br><span class="line">            <span class="variable">$islands</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_iterate_over_bag_after_removing_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnipsA</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="string">&#x27;Island_A&#x27;</span>, <span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable">$turnipsB</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="string">&#x27;Island_B&#x27;</span>, <span class="number">200</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$bag</span> = <span class="keyword">new</span> <span class="title class_">Bag</span>();</span><br><span class="line">        <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">addTurnips</span>(<span class="variable">$turnipsA</span>);</span><br><span class="line">        <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">addTurnips</span>(<span class="variable">$turnipsB</span>);</span><br><span class="line">        <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">removeTurnips</span>(<span class="variable">$turnipsA</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$islands</span> = [];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$bag</span> <span class="keyword">as</span> <span class="variable">$turnips</span>) &#123;</span><br><span class="line">            <span class="variable">$islands</span>[] = <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">getIsland</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertSame</span>(</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">&#x27;Island_B&#x27;</span>),</span><br><span class="line">            <span class="variable">$islands</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_add_turnips_to_bag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="string">&#x27;Island_A&#x27;</span>, <span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$bag</span> = <span class="keyword">new</span> <span class="title class_">Bag</span>();</span><br><span class="line">        <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">addTurnips</span>(<span class="variable">$turnips</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertCount</span>(<span class="number">1</span>, <span class="variable">$bag</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_remove_turnips_from_bag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="string">&#x27;Island_A&#x27;</span>, <span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$bag</span> = <span class="keyword">new</span> <span class="title class_">Bag</span>();</span><br><span class="line">        <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">addTurnips</span>(<span class="variable">$turnips</span>);</span><br><span class="line">        <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">removeTurnips</span>(<span class="variable">$turnips</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertCount</span>(<span class="number">0</span>, <span class="variable">$bag</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; ...fResponsibilitiesTest   ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CommandPatternTest         ✔  </span><br><span class="line"> ==&gt; IteratorPatternTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CompositePatternTest       ✔  ✔  ✔  </span><br><span class="line"> ==&gt; DataMapperTest             ✔  ✔  </span><br><span class="line"> ==&gt; DecoratorPatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; DependencyInjectionTest    ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FacadePatternTest          ✔  </span><br><span class="line"> ==&gt; FluentInterfaceTest        ✔  </span><br><span class="line"> ==&gt; FlyweightPatternTest       ✔  </span><br><span class="line"> ==&gt; ProxyPatternTest           ✔  ✔  </span><br><span class="line"> ==&gt; RegistryPatternTest        ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.117, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (59 tests, 126 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/IteratorPattern">技術部落格文章 - 疊代器模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Behavioral/IteratorPattern">疊代器模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Behavioral/IteratorPatternTest.php">疊代器模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">疊代器模式，提供一種方法來簡單控制一個集合物件，這段過程並不會暴露該物件的來源或修改它，就有點像是你的背包(Bag)一樣，疊代器(Iterator)可以簡單控制你背包中的大頭菜(Turnips)以及鈴錢(Bells)。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="行為型" scheme="https://blog.init.engineer/tags/%E8%A1%8C%E7%82%BA%E5%9E%8B/"/>
    
    <category term="疊代器模式" scheme="https://blog.init.engineer/tags/%E7%96%8A%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】命令模式 Command Pattern</title>
    <link href="https://blog.init.engineer/posts/CommandPattern/"/>
    <id>https://blog.init.engineer/posts/CommandPattern/</id>
    <published>2020-10-03T16:00:00.000Z</published>
    <updated>2020-10-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令模式-Command-Pattern"><a href="#命令模式-Command-Pattern" class="headerlink" title="命令模式 Command Pattern"></a>命令模式 Command Pattern</h1><p>命令模式，是一種將行為封裝起來裹上美好糖衣的一種模式，並將接收與執行分離出來，就有點像是把大頭菜買賣這件事，如果把買大頭菜、賣大頭菜這兩個動作封裝起來，變成一個命令，分開去執行。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/CommandPattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先我們要先定義命令介面(Command)，這個介面需要實作執行(execute)這個方法。</p><p>Command.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface Command.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來我們需要建立命令的執行者(Invoker)、接收者(Receiver)，首先執行者會擁有執行命令(Command)的行為，而接收者則是會有特定的功能，像是買入大頭菜、販售大頭菜。</p><p>Invoker.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Invoker.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoker</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Command</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Command <span class="variable">$command</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Command $command</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCommand</span>(<span class="params">Command <span class="variable">$command</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;command = <span class="variable">$command</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;command-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Receiver.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Receiver.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$turnips</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$bells</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buy</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$total</span> = <span class="variable">$price</span> * <span class="variable">$count</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;bells &lt; <span class="variable">$total</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\InvalidArgumentException</span>(<span class="string">&#x27;您的鈴錢不足，無法購買大頭菜。&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips += <span class="variable">$count</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bells -= <span class="variable">$total</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sell</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;turnips &lt; <span class="variable">$count</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\InvalidArgumentException</span>(<span class="string">&#x27;您的大頭菜不足，無法販賣大頭菜。&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$total</span> = <span class="variable">$price</span> * <span class="variable">$count</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips -= <span class="variable">$count</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bells += <span class="variable">$total</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $bells</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setBells</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$bells</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bells += <span class="variable">$bells</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBells</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;bells;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Receiver.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Receiver.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$turnips</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$bells</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buy</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$total</span> = <span class="variable">$price</span> * <span class="variable">$count</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;bells &lt; <span class="variable">$total</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\InvalidArgumentException</span>(<span class="string">&#x27;您的鈴錢不足，無法購買大頭菜。&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips += <span class="variable">$count</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bells -= <span class="variable">$total</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sell</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;turnips &lt; <span class="variable">$count</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\InvalidArgumentException</span>(<span class="string">&#x27;您的大頭菜不足，無法販賣大頭菜。&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$total</span> = <span class="variable">$price</span> * <span class="variable">$count</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips -= <span class="variable">$count</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bells += <span class="variable">$total</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $bells</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setBells</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$bells</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bells += <span class="variable">$bells</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBells</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;bells;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後要來建立購買(Buy)以及販賣(Sell)的命令(Command)，這邊會直接去執行命令所需要做的事情。</p><p>BuyCommand.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class BuyCommand.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Receiver</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Receiver <span class="variable">$console</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Receiver $console</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Receiver <span class="variable">$console</span>, <span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;console = <span class="variable">$console</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;console-&gt;<span class="title function_ invoke__">buy</span>(<span class="variable">$this</span>-&gt;price, <span class="variable">$this</span>-&gt;count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SellCommand.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SellCommand.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SellCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Receiver</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Receiver <span class="variable">$console</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Receiver $console</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Receiver <span class="variable">$console</span>, <span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;console = <span class="variable">$console</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;console-&gt;<span class="title function_ invoke__">sell</span>(<span class="variable">$this</span>-&gt;price, <span class="variable">$this</span>-&gt;count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>最後要對大頭菜命令模式測試一下，主要會先建立執行與接收，然後先放個 10,000 鈴錢，才有鈴錢買大頭菜，接下來執行一些命令(Command)測試：</p><ol><li>購買大頭菜的命令(BuyCommand)。</li><li>販賣大頭菜的命令(SellCommand)。</li></ol><p>CommandPatternTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class CommandPatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommandPatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_invocation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$invoker</span> = <span class="keyword">new</span> <span class="title class_">Invoker</span>();</span><br><span class="line">        <span class="variable">$receiver</span> = <span class="keyword">new</span> <span class="title class_">Receiver</span>();</span><br><span class="line">        <span class="variable">$receiver</span>-&gt;<span class="title function_ invoke__">setBells</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$invoker</span>-&gt;<span class="title function_ invoke__">setCommand</span>(<span class="keyword">new</span> <span class="title class_">BuyCommand</span>(<span class="variable">$receiver</span>, <span class="number">100</span>, <span class="number">40</span>));</span><br><span class="line">        <span class="variable">$invoker</span>-&gt;<span class="title function_ invoke__">run</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertSame</span>(<span class="number">6000</span>, <span class="variable">$receiver</span>-&gt;<span class="title function_ invoke__">getBells</span>());</span><br><span class="line"></span><br><span class="line">        <span class="variable">$invoker</span>-&gt;<span class="title function_ invoke__">setCommand</span>(<span class="keyword">new</span> <span class="title class_">SellCommand</span>(<span class="variable">$receiver</span>, <span class="number">200</span>, <span class="number">40</span>));</span><br><span class="line">        <span class="variable">$invoker</span>-&gt;<span class="title function_ invoke__">run</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertSame</span>(<span class="number">14000</span>, <span class="variable">$receiver</span>-&gt;<span class="title function_ invoke__">getBells</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; ...fResponsibilitiesTest   ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CommandPatternTest         ✔  </span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CompositePatternTest       ✔  ✔  ✔  </span><br><span class="line"> ==&gt; DataMapperTest             ✔  ✔  </span><br><span class="line"> ==&gt; DecoratorPatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; DependencyInjectionTest    ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FacadePatternTest          ✔  </span><br><span class="line"> ==&gt; FluentInterfaceTest        ✔  </span><br><span class="line"> ==&gt; FlyweightPatternTest       ✔  </span><br><span class="line"> ==&gt; ProxyPatternTest           ✔  ✔  </span><br><span class="line"> ==&gt; RegistryPatternTest        ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.062, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (55 tests, 122 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/CommandPattern">技術部落格文章 - 命令模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Behavioral/CommandPattern">命令模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Behavioral/CommandPatternTest.php">命令模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">命令模式，是一種將行為封裝起來裹上美好糖衣的一種模式，並將接收與執行分離出來，就有點像是把大頭菜買賣這件事，如果把買大頭菜、賣大頭菜這兩個動作封裝起來，變成一個命令，分開去執行。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="行為型" scheme="https://blog.init.engineer/tags/%E8%A1%8C%E7%82%BA%E5%9E%8B/"/>
    
    <category term="命令模式" scheme="https://blog.init.engineer/tags/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】責任鏈模式 Chain of Responsibilities</title>
    <link href="https://blog.init.engineer/posts/ChainOfResponsibilities/"/>
    <id>https://blog.init.engineer/posts/ChainOfResponsibilities/</id>
    <published>2020-10-02T16:00:00.000Z</published>
    <updated>2020-10-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="責任鏈模式-Chain-of-Responsibilities"><a href="#責任鏈模式-Chain-of-Responsibilities" class="headerlink" title="責任鏈模式 Chain of Responsibilities"></a>責任鏈模式 Chain of Responsibilities</h1><p>責任鏈模式，有一系列的命令物件及處理物件，常見於需要被連續處理的地方上，舉例來說，假設今天收購箱、商店收購大頭菜時，多了一些條件，你必須先把大頭菜拿去收購箱收購，並且收購箱子會有鈴錢價格打 8 折的情形，剩下有多餘的大頭菜才能拿去給商店收購。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/ChainOfResponsibilities/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先我們要先把背包(Bag)、大頭菜(Turnips)這兩個東西給實作出來，先從大頭菜開始，一樣建立簡單的鈴錢、數量以及獲取賦予方法。</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setPrice</span>(<span class="variable">$price</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setCount</span>(<span class="variable">$count</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來要建立背包(Bag)這個物件，裡面主要會放置兩個主要的物件，分別是大頭菜($turnips: Turnips)以及鈴錢($bells: int)，並且擁有簡單的取得(get)及賦予(set)方法。</p><p>Bag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Bag.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Turnips <span class="variable">$turnips</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$bells</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Turnips $turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setTurnips</span>(<span class="params">Turnips <span class="variable">$turnips</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips = <span class="variable">$turnips</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $bells</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setBells</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$bells</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bells = <span class="variable">$bells</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTurnips</span>(<span class="params"></span>): <span class="title">Turnips</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;turnips;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBells</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;bells;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來我們要建立主要的處理物件(Handler)，這個處理物件是抽象介面，主要先實作出上層的處理物件是什麼，其次需要繼承的子類別需要實作賣大頭菜的方法。</p><p>Handler.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Abstract Handler.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Handler</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$upper</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Handler $upper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setUpperHandler</span>(<span class="params">Handler <span class="variable">$upper</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;upper = <span class="variable">$upper</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Bag $bag</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sellTurnips</span>(<span class="params">Bag <span class="variable">$bag</span></span>): <span class="title">Bag</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後我們要建立收購箱(Box)的處理物件，以及商店(Store)的處理物件，收購箱最多只能賣 20 顆大頭菜，並且收購價格都會打 8 折，如果背包裡有剩餘的大頭菜，那麼收購箱就會去呼叫上層處理物件去處理剩下的大頭菜，而在這邊收購箱(Box)的上層物件就會是商店(Store)。</p><p>BoxHandler.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class BoxHandler.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoxHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Bag $bag</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sellTurnips</span>(<span class="params">Bag <span class="variable">$bag</span></span>): <span class="title">Bag</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$bells</span> = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$oldBells</span>, <span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$_bells</span> = (<span class="variable">$price</span> * <span class="variable">$count</span>) * <span class="number">0.8</span>;</span><br><span class="line">            <span class="variable">$_bells</span> += <span class="variable">$oldBells</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$_bells</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">getTurnips</span>()-&gt;<span class="title function_ invoke__">getCount</span>() &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="variable">$newBells</span> = <span class="variable">$bells</span>(<span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">getBells</span>(), <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">getTurnips</span>()-&gt;<span class="title function_ invoke__">getPrice</span>(), <span class="number">20</span>);</span><br><span class="line">            <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">setBells</span>(<span class="variable">$newBells</span>);</span><br><span class="line">            <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">getTurnips</span>()-&gt;<span class="title function_ invoke__">setCount</span>(<span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">getTurnips</span>()-&gt;<span class="title function_ invoke__">getCount</span>() - <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;upper-&gt;<span class="title function_ invoke__">sellTurnips</span>(<span class="variable">$bag</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$newBells</span> = <span class="variable">$bells</span>(<span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">getBells</span>(), <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">getTurnips</span>()-&gt;<span class="title function_ invoke__">getPrice</span>(), <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">getTurnips</span>()-&gt;<span class="title function_ invoke__">getCount</span>());</span><br><span class="line">        <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">setBells</span>(<span class="variable">$newBells</span>);</span><br><span class="line">        <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">getTurnips</span>()-&gt;<span class="title function_ invoke__">setCount</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$bag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StoreHandler.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class StoreHandler.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StoreHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Bag $bag</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sellTurnips</span>(<span class="params">Bag <span class="variable">$bag</span></span>): <span class="title">Bag</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$bells</span> = <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">getTurnips</span>()-&gt;<span class="title function_ invoke__">getPrice</span>() * <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">getTurnips</span>()-&gt;<span class="title function_ invoke__">getCount</span>();</span><br><span class="line">        <span class="variable">$bells</span> += <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">getBells</span>();</span><br><span class="line">        <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">getTurnips</span>()-&gt;<span class="title function_ invoke__">setCount</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="variable">$bag</span>-&gt;<span class="title function_ invoke__">setBells</span>(<span class="variable">$bells</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$bag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>最後我們要來進行一連串的測試，來測試大頭菜責任鏈模式是否可以正常運作，所以會有幾些測試項目需要執行：</p><ol><li>測試一次賣 40 顆大頭菜，是否會有 20 顆大頭菜在商店被賣出。</li><li>測試一次賣 20 顆大頭菜，是否全部的大頭菜都只會在收購箱被賣出。</li><li>測試賣兩次大頭菜，所賣出的鈴錢是否正確。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class ChainOfResponsibilitiesTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChainOfResponsibilitiesTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Bag</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$bag</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Handler</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$handler</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">setUp</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 設定背包。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bag = <span class="keyword">new</span> <span class="title class_">Bag</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 設定收購箱、商店。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;handler = <span class="keyword">new</span> <span class="title class_">BoxHandler</span>();</span><br><span class="line">        <span class="variable">$storeHandler</span> = <span class="keyword">new</span> <span class="title class_">StoreHandler</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;handler-&gt;<span class="title function_ invoke__">setUpperHandler</span>(<span class="variable">$storeHandler</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試一次賣 40 顆大頭菜，是否會有 20 顆大頭菜在商店被賣出。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_sell_turnips_to_store</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">setTurnips</span>(<span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">100</span>, <span class="number">40</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bag = <span class="variable language_">$this</span>-&gt;handler-&gt;<span class="title function_ invoke__">sellTurnips</span>(<span class="variable">$this</span>-&gt;bag);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">3600</span>, <span class="variable">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">getBells</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試一次賣 20 顆大頭菜，是否全部的大頭菜都只會在收購箱被賣出。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_sell_turnips_to_box</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">setTurnips</span>(<span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">80</span>, <span class="number">20</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bag = <span class="variable language_">$this</span>-&gt;handler-&gt;<span class="title function_ invoke__">sellTurnips</span>(<span class="variable">$this</span>-&gt;bag);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">1280</span>, <span class="variable">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">getBells</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試賣兩次大頭菜，所賣出的鈴錢是否正確。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_sell_turnips_to_box_and_store</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">setTurnips</span>(<span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">80</span>, <span class="number">20</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bag = <span class="variable language_">$this</span>-&gt;handler-&gt;<span class="title function_ invoke__">sellTurnips</span>(<span class="variable">$this</span>-&gt;bag);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">1280</span>, <span class="variable">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">getBells</span>());</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">setTurnips</span>(<span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">100</span>, <span class="number">60</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bag = <span class="variable language_">$this</span>-&gt;handler-&gt;<span class="title function_ invoke__">sellTurnips</span>(<span class="variable">$this</span>-&gt;bag);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">6880</span>, <span class="variable">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">getBells</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> ==&gt; ...fResponsibilitiesTest   ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CompositePatternTest       ✔  ✔  ✔  </span><br><span class="line"> ==&gt; DataMapperTest             ✔  ✔  </span><br><span class="line"> ==&gt; DecoratorPatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; DependencyInjectionTest    ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FacadePatternTest          ✔  </span><br><span class="line"> ==&gt; FluentInterfaceTest        ✔  </span><br><span class="line"> ==&gt; FlyweightPatternTest       ✔  </span><br><span class="line"> ==&gt; ProxyPatternTest           ✔  ✔  </span><br><span class="line"> ==&gt; RegistryPatternTest        ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.066, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (54 tests, 120 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/ChainOfResponsibilities">技術部落格文章 - 責任鏈模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Behavioral/ChainOfResponsibilities">責任鏈模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Behavioral/ChainOfResponsibilitiesTest.php">責任鏈模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">責任鏈模式，有一系列的命令物件及處理物件，常見於需要被連續處理的地方上，舉例來說，假設今天收購箱、商店收購大頭菜時，多了一些條件，你必須先把大頭菜拿去收購箱收購，並且收購箱子會有鈴錢價格打</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="行為型" scheme="https://blog.init.engineer/tags/%E8%A1%8C%E7%82%BA%E5%9E%8B/"/>
    
    <category term="責任鏈模式" scheme="https://blog.init.engineer/tags/%E8%B2%AC%E4%BB%BB%E9%8F%88%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】註冊模式 Registry Pattern</title>
    <link href="https://blog.init.engineer/posts/RegistryPattern/"/>
    <id>https://blog.init.engineer/posts/RegistryPattern/</id>
    <published>2020-10-01T16:00:00.000Z</published>
    <updated>2020-10-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="註冊模式-Registry-Pattern"><a href="#註冊模式-Registry-Pattern" class="headerlink" title="註冊模式 Registry Pattern"></a>註冊模式 Registry Pattern</h1><p>註冊模式，如果應用程式內有非常多同樣的物件需要高度重複讀寫，就會去建立一個儲存器來負責管理這些同樣的物件，就有點像是你的大頭菜，會來自不同的島，每座的島菜價不同，這會導致你很難算出所賺到的鈴錢，所以如果每個大頭菜都需要登記註冊，然後有個集中管理的名冊，在管理大頭菜這件事上就能比較輕鬆。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/RegistryPattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先我們會先建立需要被集中管理的大頭菜物件，裡面提供了簡單的幾些方法，例如賦予獲得島嶼名稱、鈴錢以及數量。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> <span class="variable">$island</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $island</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$island</span>, <span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setIsland</span>(<span class="variable">$island</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setPrice</span>(<span class="variable">$price</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setCount</span>(<span class="variable">$count</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $island</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setIsland</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$island</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;island = <span class="variable">$island</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getIsland</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;island;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來我們需要建立一個集中管理大頭菜的抽象註冊器，無論是找尋(find...)註冊、更新或刪除，這些事情都會集中在這裡實踐。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Abstract Registry.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Registry</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Turnips[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="keyword">array</span> <span class="variable">$turnips</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidArgumentException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Turnips|null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">findTurnipsByIsland</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$island</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">self</span>::<span class="variable">$turnips</span> <span class="keyword">as</span> <span class="variable">$turnip</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$island</span> === <span class="variable">$turnip</span>-&gt;<span class="title function_ invoke__">getIsland</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$turnip</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="string">&#x27;大頭菜儲存容器找不到目標。&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidArgumentException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Turnips|null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">findIndexByIsland</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$island</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">self</span>::<span class="variable">$turnips</span> <span class="keyword">as</span> <span class="variable">$index</span> =&gt; <span class="variable">$turnip</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$island</span> === <span class="variable">$turnip</span>-&gt;<span class="title function_ invoke__">getIsland</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$index</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string  $island</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Turnips $turnip</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidArgumentException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span>(<span class="params">Turnips <span class="variable">$turnip</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">self</span>::<span class="title function_ invoke__">findIndexByIsland</span>(<span class="variable">$turnip</span>-&gt;<span class="title function_ invoke__">getIsland</span>())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="string">&#x27;大頭菜儲存容器已經包含這顆大頭菜了。&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="built_in">self</span>::<span class="variable">$turnips</span>, <span class="variable">$turnip</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Turnips $turnip</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidArgumentException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">Turnips <span class="variable">$turnips</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$index</span> = <span class="built_in">self</span>::<span class="title function_ invoke__">findIndexByIsland</span>(<span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">getIsland</span>())) &#123;</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$turnips</span>[<span class="variable">$index</span>]-&gt;<span class="title function_ invoke__">setPrice</span>(<span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">getPrice</span>());</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$turnips</span>[<span class="variable">$index</span>]-&gt;<span class="title function_ invoke__">setCount</span>(<span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">getCount</span>());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="string">&#x27;大頭菜儲存容器找不到目標。&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string  $island</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Turnips $turnip</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidArgumentException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span>(<span class="params">Turnips <span class="variable">$turnips</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$index</span> = <span class="built_in">self</span>::<span class="title function_ invoke__">findIndexByIsland</span>(<span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">getIsland</span>())) &#123;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="built_in">self</span>::<span class="variable">$turnips</span>[<span class="variable">$index</span>]);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="string">&#x27;大頭菜儲存容器找不到目標。&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>註冊器寫完以後，雖然程式很簡短，但需要做的測試有不少，會有幾個需要做的測試項目：</p><ol><li>測試是否能夠建立大頭菜，放入後並取出是稍早建立的大頭菜。</li><li>測試連續建立重複的大頭菜是否會獲得錯誤。</li><li>測試直接獲取不存在的大頭菜索引是否會獲得空值。</li><li>測試建立大頭菜並更新大頭菜之後，大頭菜資訊是否有正確更新。</li><li>測試大頭菜是否能夠被移除。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class RegistryPatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegistryPatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試是否能夠建立大頭菜，放入後並取出是稍早建立的大頭菜。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_registry_store</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="string">&#x27;Island_A&#x27;</span>, <span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="title class_">Registry</span>::<span class="title function_ invoke__">store</span>(<span class="variable">$turnips</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertSame</span>(<span class="variable">$turnips</span>, <span class="title class_">Registry</span>::<span class="title function_ invoke__">findTurnipsByIsland</span>(<span class="string">&#x27;Island_A&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試連續建立重複的大頭菜是否會獲得錯誤。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_registry_store_exception</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">expectException</span>(<span class="title class_">\InvalidArgumentException</span>::<span class="variable language_">class</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="string">&#x27;Island_B&#x27;</span>, <span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="title class_">Registry</span>::<span class="title function_ invoke__">store</span>(<span class="variable">$turnips</span>);</span><br><span class="line">        <span class="title class_">Registry</span>::<span class="title function_ invoke__">store</span>(<span class="variable">$turnips</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試直接獲取不存在的大頭菜索引是否會獲得空值。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_registry_get_exception</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertNull</span>(<span class="title class_">Registry</span>::<span class="title function_ invoke__">findIndexByIsland</span>(<span class="string">&#x27;Island_Null&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試建立大頭菜並更新大頭菜之後，大頭菜資訊是否有正確更新。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_registry_update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="string">&#x27;Island_C&#x27;</span>, <span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="title class_">Registry</span>::<span class="title function_ invoke__">store</span>(<span class="variable">$turnips</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">setPrice</span>(<span class="number">90</span>);</span><br><span class="line">        <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">setCount</span>(<span class="number">20</span>);</span><br><span class="line">        <span class="title class_">Registry</span>::<span class="title function_ invoke__">update</span>(<span class="variable">$turnips</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertSame</span>(<span class="variable">$turnips</span>, <span class="title class_">Registry</span>::<span class="title function_ invoke__">findTurnipsByIsland</span>(<span class="string">&#x27;Island_C&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試大頭菜是否能夠被移除。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_registry_destroy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="string">&#x27;Island_D&#x27;</span>, <span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="title class_">Registry</span>::<span class="title function_ invoke__">store</span>(<span class="variable">$turnips</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertSame</span>(<span class="variable">$turnips</span>, <span class="title class_">Registry</span>::<span class="title function_ invoke__">findTurnipsByIsland</span>(<span class="string">&#x27;Island_D&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">expectException</span>(<span class="title class_">\InvalidArgumentException</span>::<span class="variable language_">class</span>);</span><br><span class="line">        <span class="title class_">Registry</span>::<span class="title function_ invoke__">destroy</span>(<span class="variable">$turnips</span>);</span><br><span class="line">        <span class="title class_">Registry</span>::<span class="title function_ invoke__">findTurnipsByIsland</span>(<span class="string">&#x27;Island_D&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CompositePatternTest       ✔  ✔  ✔  </span><br><span class="line"> ==&gt; DataMapperTest             ✔  ✔  </span><br><span class="line"> ==&gt; DecoratorPatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; DependencyInjectionTest    ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FacadePatternTest          ✔  </span><br><span class="line"> ==&gt; FluentInterfaceTest        ✔  </span><br><span class="line"> ==&gt; FlyweightPatternTest       ✔  </span><br><span class="line"> ==&gt; ProxyPatternTest           ✔  ✔  </span><br><span class="line"> ==&gt; RegistryPatternTest        ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.037, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (51 tests, 116 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/RegistryPattern">技術部落格文章 - 註冊模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Structural/RegistryPattern">註冊模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Structural/RegistryPatternTest.php">註冊模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">註冊模式，如果應用程式內有非常多同樣的物件需要高度重複讀寫，就會去建立一個儲存器來負責管理這些同樣的物件，就有點像是你的大頭菜，會來自不同的島，每座的島菜價不同，這會導致你很難算出所賺到的鈴錢，所以如果每個大頭菜都需要登記註冊，然後有個集中管理的名冊，在管理大頭菜這件事上就能比較輕鬆。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="結構型" scheme="https://blog.init.engineer/tags/%E7%B5%90%E6%A7%8B%E5%9E%8B/"/>
    
    <category term="註冊模式" scheme="https://blog.init.engineer/tags/%E8%A8%BB%E5%86%8A%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】代理模式 Proxy Pattern</title>
    <link href="https://blog.init.engineer/posts/ProxyPattern/"/>
    <id>https://blog.init.engineer/posts/ProxyPattern/</id>
    <published>2020-09-30T16:00:00.000Z</published>
    <updated>2020-09-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代理模式-Proxy-Pattern"><a href="#代理模式-Proxy-Pattern" class="headerlink" title="代理模式 Proxy Pattern"></a>代理模式 Proxy Pattern</h1><p>代理模式，它可以作為需要被保護的物件的介面，若以檔案權限來比喻的話，就是對主要物件套上一層代理，你可以在代理上實作控制權限，像是其代理僅有讀取、執行的權限，並沒有刪除、修改的權限，並防止直接接觸實際物件，換作大頭菜來講的話，大頭菜的本質就是大頭菜，大頭菜就頂多提供數量堆積的功能，鈴錢的計算要在代理介面上實作。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/ProxyPattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>所以我們要先來實作大頭菜介面，並且僅提供大頭菜總數計算的功能。</p><p>TurnipsInterface.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface TurnipsInterface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TurnipsInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params"></span>): <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span> <span class="keyword">implements</span> <span class="title">TurnipsInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$count</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後我們要製作大頭菜的代理，大頭菜代理繼承了大頭菜，並且再額外提供了鈴錢價格計算的功能。</p><p>TurnipsProxy.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class TurnipsProxy.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TurnipsProxy</span> <span class="keyword">extends</span> <span class="title">Turnips</span> <span class="keyword">implements</span> <span class="title">TurnipsInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$price</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> ?<span class="keyword">int</span> <span class="variable">$total</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TurnipsProxy constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setPrice</span>(<span class="variable">$price</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setCount</span>(<span class="variable">$count</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTotal</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;total === <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;total = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getPrice</span>() * <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getCount</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>最後我們要來測試代理大頭菜的功能，會有幾個大項目需要測試：</p><ol><li>透過代理來計算鈴錢總價。</li><li>鈴錢總價只會計算一次，並不會因為後續更改而變更。</li></ol><p>ProxyPatternTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class ProxyPatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyPatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 透過代理來計算鈴錢總價。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_proxy_calculate_price</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">TurnipsProxy</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculateTotal</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 透過代理來計算鈴錢總價，並且鈴錢總價只會計算一次，並不會因為後續更改而變更。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_proxy_will_only_execute_calculate_price_once</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">TurnipsProxy</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculateTotal</span>());</span><br><span class="line"></span><br><span class="line">        <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">setPrice</span>(<span class="number">200</span>);</span><br><span class="line">        <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">setCount</span>(<span class="number">30</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculateTotal</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CompositePatternTest       ✔  ✔  ✔  </span><br><span class="line"> ==&gt; DataMapperTest             ✔  ✔  </span><br><span class="line"> ==&gt; DecoratorPatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; DependencyInjectionTest    ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FacadePatternTest          ✔  </span><br><span class="line"> ==&gt; FluentInterfaceTest        ✔  </span><br><span class="line"> ==&gt; FlyweightPatternTest       ✔  </span><br><span class="line"> ==&gt; ProxyPatternTest           ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.029, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (46 tests, 110 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/ProxyPattern">技術部落格文章 - 代理模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Structural/ProxyPattern">代理模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Structural/ProxyPatternTest.php">代理模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">代理模式，它可以作為需要被保護的物件的介面，若以檔案權限來比喻的話，就是對主要物件套上一層代理，你可以在代理上實作控制權限，像是其代理僅有讀取、執行的權限，並沒有刪除、修改的權限，並防止直接接觸實際物件，換作大頭菜來講的話，大頭菜的本質就是大頭菜，大頭菜就頂多提供數量堆積的功能，鈴錢的計算要在代理介面上實作。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="結構型" scheme="https://blog.init.engineer/tags/%E7%B5%90%E6%A7%8B%E5%9E%8B/"/>
    
    <category term="代理模式" scheme="https://blog.init.engineer/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】享元模式 Flyweight Pattern</title>
    <link href="https://blog.init.engineer/posts/FlyweightPattern/"/>
    <id>https://blog.init.engineer/posts/FlyweightPattern/</id>
    <published>2020-09-29T16:00:00.000Z</published>
    <updated>2020-09-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="享元模式-Flyweight-Pattern"><a href="#享元模式-Flyweight-Pattern" class="headerlink" title="享元模式 Flyweight Pattern"></a>享元模式 Flyweight Pattern</h1><p>享元模式，在定義上來說是共享物件，將相似的物件集中整理，減少記憶體上的使用，舉例來說每座島的大頭菜鈴錢價格都不同，有些朋友會送你大頭菜，但因為朋友太多了，所以需要有個地方集中放這些大頭菜，並且記錄起來，每個朋友都送你一組大頭彩，但你不能重複紀錄，不然你只收到一組大頭菜，帳上卻紀錄兩組，這樣就不好了。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/FlyweightPattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先我們須要先定義大頭菜作為共享目標，紀錄了島嶼、鈴錢以及數量，並且提供了簡單的計算總價方法。</p><p>FlyweightInterface.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface FlyweightInterface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">FlyweightInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class TurnipsFlyweight.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TurnipsFlyweight</span> <span class="keyword">implements</span> <span class="title">FlyweightInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$island</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $island</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$island</span>, <span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;island = <span class="variable">$island</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price * <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來製作享元工廠，主要負責建立、管理大頭菜共享物件，以及提供基本功能，例如計算全部大頭菜總鈴錢的方法。</p><p>FlyweightFactory.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Countable</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class FlyweightFactory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span> <span class="keyword">implements</span> <span class="title">Countable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> TurnipsFlyweight[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$turnips</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $island</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$island</span>, <span class="keyword">int</span> <span class="variable">$price</span> = <span class="number">0</span>, <span class="keyword">int</span> <span class="variable">$count</span> = <span class="number">0</span></span>): <span class="title">TurnipsFlyweight</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;turnips[<span class="variable">$island</span>])) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;turnips[<span class="variable">$island</span>] = <span class="keyword">new</span> <span class="title class_">TurnipsFlyweight</span>(<span class="variable">$island</span>, <span class="variable">$price</span>, <span class="variable">$count</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;turnips[<span class="variable">$island</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTotal</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$total</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;turnips <span class="keyword">as</span> <span class="variable">$turnip</span>) &#123;</span><br><span class="line">            <span class="variable">$total</span> += <span class="variable">$turnip</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$total</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">count</span>(<span class="variable">$this</span>-&gt;turnips);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="額外補充"><a href="#額外補充" class="headerlink" title="額外補充"></a>額外補充</h2><h3 id="Countable"><a href="#Countable" class="headerlink" title="Countable"></a>Countable</h3><p>繼承 <code>Countable</code> 這個類別可以使用 <code>count()</code> 這個方法，因此需要實作它。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Countable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* Methods */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="title function_ invoke__">count</span> ( <span class="keyword">void</span> ) : <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>官方文件：<a href="https://www.php.net/manual/en/class.countable.php">PHP: Countable - Manual</a></li></ul><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>最後我們要對享元物件、工廠進行簡單的測試，假設我們已經擁有了許多大頭菜，那麼我們有幾個需要做的檢查事項：</p><ol><li>依序塞入享元，並且計算該次塞入的大頭菜跟紀錄所算出來的鈴錢是否相符。</li><li>大頭菜全部塞入後，所存入的筆數是否跟實際上相符。</li><li>最後計算所有大頭菜的總鈴錢是否是正確的。</li></ol><p>FlyweightPatternTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class FlyweightPatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyweightPatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$turnips</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;Island_A&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">90</span>, <span class="string">&#x27;count&#x27;</span> =&gt; <span class="number">40</span>),</span><br><span class="line">        <span class="string">&#x27;Island_B&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">92</span>, <span class="string">&#x27;count&#x27;</span> =&gt; <span class="number">36</span>),</span><br><span class="line">        <span class="string">&#x27;Island_C&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">94</span>, <span class="string">&#x27;count&#x27;</span> =&gt; <span class="number">32</span>),</span><br><span class="line">        <span class="string">&#x27;Island_D&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">96</span>, <span class="string">&#x27;count&#x27;</span> =&gt; <span class="number">28</span>),</span><br><span class="line">        <span class="string">&#x27;Island_E&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">98</span>, <span class="string">&#x27;count&#x27;</span> =&gt; <span class="number">24</span>),</span><br><span class="line">        <span class="string">&#x27;Island_F&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">100</span>, <span class="string">&#x27;count&#x27;</span> =&gt; <span class="number">20</span>),</span><br><span class="line">        <span class="string">&#x27;Island_G&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">102</span>, <span class="string">&#x27;count&#x27;</span> =&gt; <span class="number">16</span>),</span><br><span class="line">        <span class="string">&#x27;Island_H&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">104</span>, <span class="string">&#x27;count&#x27;</span> =&gt; <span class="number">12</span>),</span><br><span class="line">        <span class="string">&#x27;Island_I&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">106</span>, <span class="string">&#x27;count&#x27;</span> =&gt; <span class="number">8</span>),</span><br><span class="line">        <span class="string">&#x27;Island_J&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">108</span>, <span class="string">&#x27;count&#x27;</span> =&gt; <span class="number">4</span>),</span><br><span class="line">        <span class="string">&#x27;Island_K&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">110</span>, <span class="string">&#x27;count&#x27;</span> =&gt; <span class="number">40</span>),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_flyweight</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$factory</span> = <span class="keyword">new</span> <span class="title class_">FlyweightFactory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;turnips <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="variable">$flyweight</span> = <span class="variable">$factory</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$key</span>, <span class="variable">$value</span>[<span class="string">&#x27;price&#x27;</span>], <span class="variable">$value</span>[<span class="string">&#x27;count&#x27;</span>]);</span><br><span class="line">            <span class="variable">$total</span> = <span class="variable">$flyweight</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>();</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="variable">$value</span>[<span class="string">&#x27;price&#x27;</span>] * <span class="variable">$value</span>[<span class="string">&#x27;count&#x27;</span>], <span class="variable">$total</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertCount</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$this</span>-&gt;turnips), <span class="variable">$factory</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">25520</span>, <span class="variable">$factory</span>-&gt;<span class="title function_ invoke__">calculateTotal</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CompositePatternTest       ✔  ✔  ✔  </span><br><span class="line"> ==&gt; DataMapperTest             ✔  ✔  </span><br><span class="line"> ==&gt; DecoratorPatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; DependencyInjectionTest    ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FacadePatternTest          ✔  </span><br><span class="line"> ==&gt; FluentInterfaceTest        ✔  </span><br><span class="line"> ==&gt; FlyweightPatternTest       ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.030, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (44 tests, 107 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/FlyweightPattern">技術部落格文章 - 享元模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Structural/FlyweightPattern">享元模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Structural/FlyweightPatternTest.php">享元模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">享元模式，在定義上來說是共享物件，將相似的物件集中整理，減少記憶體上的使用，舉例來說每座島的大頭菜鈴錢價格都不同，有些朋友會送你大頭菜，但因為朋友太多了，所以需要有個地方集中放這些大頭菜，並且記錄起來，每個朋友都送你一組大頭彩，但你不能重複紀錄，不然你只收到一組大頭菜，帳上卻紀錄兩組，這樣就不好了。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="結構型" scheme="https://blog.init.engineer/tags/%E7%B5%90%E6%A7%8B%E5%9E%8B/"/>
    
    <category term="享元模式" scheme="https://blog.init.engineer/tags/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】流暢介面 Fluent Interface</title>
    <link href="https://blog.init.engineer/posts/FluentInterface/"/>
    <id>https://blog.init.engineer/posts/FluentInterface/</id>
    <published>2020-09-28T16:00:00.000Z</published>
    <updated>2020-09-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流暢介面-Fluent-Interface"><a href="#流暢介面-Fluent-Interface" class="headerlink" title="流暢介面 Fluent Interface"></a>流暢介面 Fluent Interface</h1><p>流暢介面，常用於撰寫如同文章般容易閱讀的程式碼，如果以大頭菜來講，那麼在建立大頭菜的同時，希望可以順便賦予其鈴錢價格、數量，並且最終獲得的依舊是大頭菜物件。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/FluentInterface/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>這次只需要實作一個大頭菜物件，其精隨在於賦予鈴錢價格、數量時，最後會將整個物件再回傳出來，透過被呼叫的方法來回傳當前物件。</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$count</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">price</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>): <span class="title">Turnips</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">Turnips</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price * <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>我們要來實際測試大頭菜是否能夠以流暢介面的方式來建立物件，並且計算鈴錢總價。</p><p>FluentInterfaceTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class FluentInterfaceTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FluentInterfaceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_build_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = (<span class="keyword">new</span> <span class="title class_">Turnips</span>())</span><br><span class="line">            -&gt;<span class="title function_ invoke__">price</span>(<span class="number">100</span>)</span><br><span class="line">            -&gt;<span class="title function_ invoke__">count</span>(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CompositePatternTest       ✔  ✔  ✔  </span><br><span class="line"> ==&gt; DataMapperTest             ✔  ✔  </span><br><span class="line"> ==&gt; DecoratorPatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; DependencyInjectionTest    ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FacadePatternTest          ✔  </span><br><span class="line"> ==&gt; FluentInterfaceTest        ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.079, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (43 tests, 94 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/FluentInterface">技術部落格文章 - 流暢介面</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Structural/FluentInterface">流暢介面 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Structural/FluentInterfaceTest.php">流暢介面 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">流暢介面，常用於撰寫如同文章般容易閱讀的程式碼，如果以大頭菜來講，那麼在建立大頭菜的同時，希望可以順便賦予其鈴錢價格、數量，並且最終獲得的依舊是大頭菜物件。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="結構型" scheme="https://blog.init.engineer/tags/%E7%B5%90%E6%A7%8B%E5%9E%8B/"/>
    
    <category term="流暢介面" scheme="https://blog.init.engineer/tags/%E6%B5%81%E6%9A%A2%E4%BB%8B%E9%9D%A2/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】外觀模式 Facade Pattern</title>
    <link href="https://blog.init.engineer/posts/FacadePattern/"/>
    <id>https://blog.init.engineer/posts/FacadePattern/</id>
    <published>2020-09-27T16:00:00.000Z</published>
    <updated>2020-09-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="外觀模式-Facade-Pattern"><a href="#外觀模式-Facade-Pattern" class="headerlink" title="外觀模式 Facade Pattern"></a>外觀模式 Facade Pattern</h1><p>外觀模式，或者稱作門面模式，一種把複雜邏輯給包裝起來的一種模式，舉個例子來說，今天已經不單只是計算大頭菜了，而是你有個背包(Bag)要先放入鈴錢(Bells)，然後拿出鈴錢從曹賣(DaisyMae)手中購買大頭菜，並且把大頭菜賣給 Nook 商店(Store)，牽涉到許多的細節，透過外觀模式來將複雜的操作集中成幾個簡單的動作。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/FacadePattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先我們先慣例定義一下主角大頭菜(Turnips)，在這邊只需要給予價格、數量即可。</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下來我們要定義背包(Bag)，會需要可以放入鈴錢、大頭菜，並且可以取用，在取出的同時必須做到扣除背包裡鈴錢或大頭菜的數量。</p><p>BagInterface.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface BagInterface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BagInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $bells</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setBells</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$bells</span></span>): <span class="title">int</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBells</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$bells</span></span>): <span class="title">int</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Turnips $turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setTurnips</span>(<span class="params">Turnips <span class="variable">$turnips</span></span>): <span class="title">Turnips</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">Turnips</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Bag.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bag</span> <span class="keyword">implements</span> <span class="title">BagInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$bells</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$turnips</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $bells</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setBells</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$bells</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bells += <span class="variable">$bells</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;bells;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBells</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$bells</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;bells &gt;= <span class="variable">$bells</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;bells -= <span class="variable">$bells</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;bells;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\InvalidArgumentException</span>(<span class="string">&#x27;背包裡頭沒有那麼多的鈴錢。&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setTurnips</span>(<span class="params">Turnips <span class="variable">$turnips</span></span>): <span class="title">Turnips</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips = <span class="variable">$turnips</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;turnips;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">Turnips</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;turnips-&gt;<span class="title function_ invoke__">getCount</span>() &gt;= <span class="variable">$count</span>) &#123;</span><br><span class="line">            <span class="variable">$newCount</span> = <span class="variable language_">$this</span>-&gt;turnips-&gt;<span class="title function_ invoke__">getCount</span>() - <span class="variable">$count</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;turnips-&gt;<span class="title function_ invoke__">setCount</span>(<span class="variable">$newCount</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="variable language_">$this</span>-&gt;turnips-&gt;<span class="title function_ invoke__">getPrice</span>(), <span class="variable">$count</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\InvalidArgumentException</span>(<span class="string">&#x27;背包裡頭沒有那麼多的大頭菜。&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來我們要定義曹賣(DaisyMae)，曹賣的功能很簡單，就只需要購買大頭菜即可，當玩家購買大頭菜時，曹賣必須給玩家大頭菜。</p><p>DaisyMaeInterface.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface DaisyMaeInterface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DaisyMaeInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buy</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">Turnips</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DaisyMae.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class DaisyMae.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DaisyMae</span> <span class="keyword">implements</span> <span class="title">DaisyMaeInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buy</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">Turnips</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="variable">$price</span>, <span class="variable">$count</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來我們需要建立 Nook 商店(Store)，商店的功能也很簡單，就是把大頭菜賣給商店就可以了。</p><p>StoreInterface.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface StoreInterface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">StoreInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Turnips $turnips</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int          $price</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sell</span>(<span class="params">Turnips <span class="variable">$turnips</span>, <span class="keyword">int</span> <span class="variable">$price</span></span>): <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Store.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Store.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> <span class="keyword">implements</span> <span class="title">StoreInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Turnips $turnips</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int          $price</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sell</span>(<span class="params">Turnips <span class="variable">$turnips</span>, <span class="keyword">int</span> <span class="variable">$price</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">getCount</span>() * <span class="variable">$price</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後我們需要來建立外觀(Facade)，其功能是負責處理複雜邏輯，將其化為簡單的動作，這裡我們需要幾個簡單的動作，分別是：</p><ol><li>在背包裡放入鈴錢。</li><li>向曹賣購買大頭菜。</li><li>向 Nook 商店販賣大頭菜。</li><li>從背包裡取出鈴錢。</li></ol><p>Facade.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Facade.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> BagInterface</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$bag</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> StoreInterface</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$store</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> DaisyMaeInterface</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$daisyMae</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Facade constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> BagInterface $bag</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> StoreInterface $store</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> DaisyMaeInterface $daisyMae</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">BagInterface <span class="variable">$bag</span>, StoreInterface <span class="variable">$store</span>, DaisyMaeInterface <span class="variable">$daisyMae</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bag = <span class="variable">$bag</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;store = <span class="variable">$store</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;daisyMae = <span class="variable">$daisyMae</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $bells</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">takeupBells</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$bells</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">setBells</span>(<span class="variable">$bells</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $bells</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">takeoutBells</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$bells</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">getBells</span>(<span class="variable">$bells</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buyTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">getBells</span>(<span class="variable">$price</span> * <span class="variable">$count</span>);</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="variable language_">$this</span>-&gt;daisyMae-&gt;<span class="title function_ invoke__">buy</span>(<span class="variable">$price</span>, <span class="variable">$count</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">setTurnips</span>(<span class="variable">$turnips</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">setBells</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sellTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="variable language_">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">getTurnips</span>(<span class="variable">$count</span>);</span><br><span class="line">        <span class="variable">$bells</span> = <span class="variable language_">$this</span>-&gt;store-&gt;<span class="title function_ invoke__">sell</span>(<span class="variable">$turnips</span>, <span class="variable">$price</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;bag-&gt;<span class="title function_ invoke__">setBells</span>(<span class="variable">$bells</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>撰寫完外觀模式後，我們需要測試程式邏輯是否正確，因此接下來也會有幾個大項目需要測試：</p><ol><li>在背包裡塞入 10,000 鈴錢。</li><li>購買 40 顆單價 100 鈴錢的大頭菜。</li><li>以 400 鈴錢賣出 20 顆大頭菜。</li><li>從背包拿出 10,000 鈴錢。</li><li>再以 600 鈴錢賣出 20 顆大頭菜。</li></ol><p>FacadePatternTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class FacadePatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FacadePatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_buy_and_sell_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$bag</span> = <span class="keyword">new</span> <span class="title class_">Bag</span>();</span><br><span class="line">        <span class="variable">$store</span> = <span class="keyword">new</span> <span class="title class_">Store</span>();</span><br><span class="line">        <span class="variable">$daisyMae</span> = <span class="keyword">new</span> <span class="title class_">DaisyMae</span>();</span><br><span class="line">        <span class="variable">$facade</span> = <span class="keyword">new</span> <span class="title class_">Facade</span>(<span class="variable">$bag</span>, <span class="variable">$store</span>, <span class="variable">$daisyMae</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在背包裡塞入 10,000 鈴錢</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">10000</span>, <span class="variable">$facade</span>-&gt;<span class="title function_ invoke__">takeupBells</span>(<span class="number">10000</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 購買 40 顆單價 100 鈴錢的大頭菜</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">6000</span> ,<span class="variable">$facade</span>-&gt;<span class="title function_ invoke__">buyTurnips</span>(<span class="number">100</span>, <span class="number">40</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以 400 鈴錢賣出 20 顆大頭菜</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">14000</span> ,<span class="variable">$facade</span>-&gt;<span class="title function_ invoke__">sellTurnips</span>(<span class="number">400</span>, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 從背包拿出 10,000 鈴錢</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span> ,<span class="variable">$facade</span>-&gt;<span class="title function_ invoke__">takeoutBells</span>(<span class="number">10000</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再以 600 鈴錢賣出 20 顆大頭菜</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">16000</span> ,<span class="variable">$facade</span>-&gt;<span class="title function_ invoke__">sellTurnips</span>(<span class="number">600</span>, <span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CompositePatternTest       ✔  ✔  ✔  </span><br><span class="line"> ==&gt; DataMapperTest             ✔  ✔  </span><br><span class="line"> ==&gt; DecoratorPatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; DependencyInjectionTest    ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FacadePatternTest          ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.028, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (42 tests, 93 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/FacadePattern">技術部落格文章 - 外觀模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Structural/FacadePattern">外觀模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Structural/FacadePatternTest.php">外觀模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">外觀模式，或者稱作門面模式，一種把複雜邏輯給包裝起來的一種模式，舉個例子來說，今天已經不單只是計算大頭菜了，而是你有個背包(Bag)要先放入鈴錢(Bells)，然後拿出鈴錢從曹賣(DaisyMae)手中購買大頭菜，並且把大頭菜賣給 Nook 商店(Store)，牽涉到許多的細節，透過外觀模式來將複雜的操作集中成幾個簡單的動作。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="結構型" scheme="https://blog.init.engineer/tags/%E7%B5%90%E6%A7%8B%E5%9E%8B/"/>
    
    <category term="外觀模式" scheme="https://blog.init.engineer/tags/%E5%A4%96%E8%A7%80%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】依賴注入 Dependency Injection</title>
    <link href="https://blog.init.engineer/posts/DependencyInjection/"/>
    <id>https://blog.init.engineer/posts/DependencyInjection/</id>
    <published>2020-09-26T16:00:00.000Z</published>
    <updated>2020-09-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="依賴注入-Dependency-Injection"><a href="#依賴注入-Dependency-Injection" class="headerlink" title="依賴注入 Dependency Injection"></a>依賴注入 Dependency Injection</h1><p>依賴注入模式，是控制反轉（Inversion of Control，縮寫為IoC）的一種實作方式，主要是將依賴物件丟給接收物件中，就像是你想要用大頭菜發財致富，但大頭菜有那麼多顆，你不可能每顆都記住鈴錢單價、數量，所以你寫了一張便條紙，紀錄著大頭菜的類別、鈴錢單價、數量，然後貼在大頭菜上。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/DependencyInjection/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先為了讓我們的大頭菜有個便條紙，所以我們要先建立大頭菜的組態文件 <code>TrunipsConfiguration</code> 並且將型別、鈴錢單價及數量帶入進去，為了防止外部物件直接碰到設定，所以需要獨立出 get 方法。</p><p>TurnipsConfiguration.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class TurnipsConfiguration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TurnipsConfiguration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$type</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TurnipsConfiguration constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$type</span>, <span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;type = <span class="variable">$type</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$type</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;健康的大頭菜&#x27;</span>:</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;壞掉的大頭菜&#x27;</span>:</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;price = <span class="number">0</span>;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\InvalidArgumentException</span>(<span class="string">&#x27;找不到這種大頭菜分類。&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來將剛才建立的組態丟給大頭菜，並且透過 get 方法來去獲得組態設定，進而計算大頭菜的鈴錢總價。</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> TurnipsConfiguration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$configuration</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> TurnipsConfiguration $config</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">TurnipsConfiguration <span class="variable">$config</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;configuration = <span class="variable">$config</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;configuration-&gt;<span class="title function_ invoke__">getPrice</span>() * <span class="variable language_">$this</span>-&gt;configuration-&gt;<span class="title function_ invoke__">getCount</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>最後我們要寫一下測試，主要測試把組態丟進大頭菜後，能不能正確的計算價格，以及如果組態有錯誤，是否能獲得預期的錯誤。</p><ol><li>測試正常的大頭菜是否可以賣鈴錢。</li><li>測試壞掉的大頭菜是否鈴錢價格為 0。</li><li>測試大頭菜組態檔如果給予不正確的類別，會獲得預期的錯誤。</li></ol><p>DependencyInjectionTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class DependencyInjectionTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DependencyInjectionTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試正常的大頭菜是否可以賣鈴錢。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_turnips_dependency_injection</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$config</span> = <span class="keyword">new</span> <span class="title class_">TurnipsConfiguration</span>(<span class="string">&#x27;健康的大頭菜&#x27;</span>, <span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="variable">$config</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試壞掉的大頭菜是否鈴錢價格為 0。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_spoiled_dependency_injection</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$config</span> = <span class="keyword">new</span> <span class="title class_">TurnipsConfiguration</span>(<span class="string">&#x27;壞掉的大頭菜&#x27;</span>, <span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="variable">$config</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">0</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試大頭菜組態檔如果給予不正確的類別，會獲得預期的錯誤。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_undefined_dependency_injection</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">expectException</span>(<span class="title class_">\InvalidArgumentException</span>::<span class="variable language_">class</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$config</span> = <span class="keyword">new</span> <span class="title class_">TurnipsConfiguration</span>(<span class="string">&#x27;未知的大頭菜&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CompositePatternTest       ✔  ✔  ✔  </span><br><span class="line"> ==&gt; DataMapperTest             ✔  ✔  </span><br><span class="line"> ==&gt; DecoratorPatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; DependencyInjectionTest    ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.050, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (41 tests, 88 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/DependencyInjection">技術部落格文章 - 依賴注入</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Structural/DependencyInjection">依賴注入 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Structural/DependencyInjectionTest.php">依賴注入 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">依賴注入模式，是控制反轉（Inversion of Control，縮寫為IoC）的一種實作方式，主要是將依賴物件丟給接收物件中，就像是你想要用大頭菜發財致富，但大頭菜有那麼多顆，你不可能每顆都記住鈴錢單價、數量，所以你寫了一張便條紙，紀錄著大頭菜的類別、鈴錢單價、數量，然後貼在大頭菜上。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="結構型" scheme="https://blog.init.engineer/tags/%E7%B5%90%E6%A7%8B%E5%9E%8B/"/>
    
    <category term="依賴注入" scheme="https://blog.init.engineer/tags/%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】修飾模式 Decorator Pattern</title>
    <link href="https://blog.init.engineer/posts/DecoratorPattern/"/>
    <id>https://blog.init.engineer/posts/DecoratorPattern/</id>
    <published>2020-09-25T16:00:00.000Z</published>
    <updated>2020-09-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修飾模式-Decorator-Pattern"><a href="#修飾模式-Decorator-Pattern" class="headerlink" title="修飾模式 Decorator Pattern"></a>修飾模式 Decorator Pattern</h1><p>修飾模式，或者稱裝飾者模式，為物件動態增加新的方法，就想像你最初的大頭菜沒有想過他會壞掉，某天突然覺得讓大頭菜壞掉好像很好玩，但你不能把整個大頭菜砍掉重練，所以你希望可以不改變既有的大頭菜，在大頭菜額外再套上新的功能，那就是壞掉。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/DecoratorPattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先我們會需要定義出最初始大頭菜的介面，以及其最初的功能。</p><p>TurnipsInterface.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface TurnipsInterface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TurnipsInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TurnipsService.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class TurnipsService.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TurnipsService</span> <span class="keyword">implements</span> <span class="title">TurnipsInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TurnipsService constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price * <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來我們需要建立裝飾器(Decorator)，來修飾我們後來添加的壞掉功能，並且把最初始的大頭菜丟進去，讓大頭菜直接壞掉，沒有壞掉就拿石頭丟他！</p><p>TurnipsDecorator.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class TurnipsDecorator.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TurnipsDecorator</span> <span class="keyword">implements</span> <span class="title">TurnipsInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> TurnipsInterface</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$turnips</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TurnipsDecorator constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> TurnipsInterface $turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">TurnipsInterface <span class="variable">$turnips</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips = <span class="variable">$turnips</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span> <span class="keyword">extends</span> <span class="title">TurnipsDecorator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;turnips-&gt;<span class="title function_ invoke__">calculatePrice</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spoiled.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Spoiled.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spoiled</span> <span class="keyword">extends</span> <span class="title">TurnipsDecorator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>完成了大頭菜裝飾器之後，我們接下來要驗證前面所寫的裝飾器是否能夠正常運行，因此我們有幾個重要項目要來做測試：</p><ol><li>測試正常的大頭菜是否可以賣鈴錢。</li><li>測試壞掉的大頭菜是否沒辦法賣鈴錢。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class DecoratorPatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoratorPatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試正常的大頭菜是否可以賣鈴錢。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$service</span> = <span class="keyword">new</span> <span class="title class_">TurnipsService</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="variable">$service</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試壞掉的大頭菜是否沒辦法賣鈴錢。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_spoiled</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$service</span> = <span class="keyword">new</span> <span class="title class_">TurnipsService</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Spoiled</span>(<span class="variable">$service</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">0</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CompositePatternTest       ✔  ✔  ✔  </span><br><span class="line"> ==&gt; DataMapperTest             ✔  ✔  </span><br><span class="line"> ==&gt; DecoratorPatternTest       ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.050, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (41 tests, 88 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/DecoratorPattern">技術部落格文章 - 修飾模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Structural/DecoratorPattern">修飾模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Structural/DecoratorPatternTest.php">修飾模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">修飾模式，或者稱裝飾者模式，為物件動態增加新的方法，就想像你最初的大頭菜沒有想過他會壞掉，某天突然覺得讓大頭菜壞掉好像很好玩，但你不能把整個大頭菜砍掉重練，所以你希望可以不改變既有的大頭菜，在大頭菜額外再套上新的功能，那就是壞掉。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="結構型" scheme="https://blog.init.engineer/tags/%E7%B5%90%E6%A7%8B%E5%9E%8B/"/>
    
    <category term="修飾模式" scheme="https://blog.init.engineer/tags/%E4%BF%AE%E9%A3%BE%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】資料對應 Data Mapper</title>
    <link href="https://blog.init.engineer/posts/DataMapper/"/>
    <id>https://blog.init.engineer/posts/DataMapper/</id>
    <published>2020-09-24T16:00:00.000Z</published>
    <updated>2020-09-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="資料對應-Data-Mapper"><a href="#資料對應-Data-Mapper" class="headerlink" title="資料對應 Data Mapper"></a>資料對應 Data Mapper</h1><p>資料對應，這是一種常用於處理物件導向與資料庫資料的模式，與 <code>Repository</code> 不同，<code>Data Mapper</code> 主要處理的事單個物件本身，而 <code>Repository</code> 處理的是物件的集合。這次實作舉個例子，你在買大頭菜之前，需要有一個草圖去評估你要前往哪些島上買大頭菜，決定好之後再開始行動。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/DataMapper/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先我們要先把大頭菜給實作出來，這次因為大頭菜可以來自不同的島嶼，因此多了島嶼名稱，以及透過 <code>new self(...)</code> 的方式來回傳新的大頭菜物件。</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$island</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $island</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int    $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int    $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$island</span>, <span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;island = <span class="variable">$island</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $island</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">fromIsland</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$island</span></span>): <span class="title">Turnips</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">self</span>(</span><br><span class="line">            <span class="variable">$island</span>[<span class="string">&#x27;island&#x27;</span>],</span><br><span class="line">            <span class="variable">$island</span>[<span class="string">&#x27;price&#x27;</span>],</span><br><span class="line">            <span class="variable">$island</span>[<span class="string">&#x27;count&#x27;</span>]</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Turnips</code> 你可以理解為 ORM 物件，所以接下來要製作所謂的草稿(StorageAdapter)以及對應的中間層(TurnipsMapper)，把草稿寫好之後，丟進去中間層(TurnipsMapper)就可以對應到每個大頭菜物件。</p><blockquote><p>【補充說明】<br>物件關聯對映（英語：Object Relational Mapping，簡稱ORM，或O&#x2F;RM，或O&#x2F;R mapping），是一種程式設計技術，用於實現物件導向程式語言裡不同類型系統的資料之間的轉換。從效果上說，它其實是建立了一個可在程式語言裡使用的「虛擬物件資料庫」。如今已有很多免費和付費的ORM產品，而有些程式設計師更傾向於建立自己的ORM工具。<br>資料來源：<a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84">維基百科</a></p></blockquote><p>TurnipsMapper.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class TurnipsMapper.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TurnipsMapper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> StorageAdapter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$adapter</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TurnipsMapper constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> StorageAdapter $storage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">StorageAdapter <span class="variable">$storage</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;adapter = <span class="variable">$storage</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findById</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$id</span></span>): <span class="title">Turnips</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;adapter-&gt;<span class="title function_ invoke__">findById</span>(<span class="variable">$id</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\InvalidArgumentException</span>(<span class="string">&quot;找不到 ID 為「 <span class="subst">$id</span> 」的島嶼。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">mapRowToTurnips</span>(<span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findByIsland</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$island</span></span>): <span class="title">Turnips</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;adapter-&gt;<span class="title function_ invoke__">findByIsland</span>(<span class="variable">$island</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\InvalidArgumentException</span>(<span class="string">&quot;找不到名稱為「 <span class="subst">$island</span> 」的島嶼。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">mapRowToTurnips</span>(<span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $row</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mapRowToTurnips</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$row</span></span>): <span class="title">Turnips</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Turnips</span>::<span class="title function_ invoke__">fromIsland</span>(<span class="variable">$row</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StorageAdapter.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class StorageAdapter.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StorageAdapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$data</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * StorageAdapter constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array|null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findById</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;data[<span class="variable">$id</span>])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;data[<span class="variable">$id</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $island</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array|null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findByIsland</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$island</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">array_search</span>(<span class="variable">$island</span>, <span class="title function_ invoke__">array_column</span>(<span class="variable">$this</span>-&gt;data, <span class="string">&#x27;island&#x27;</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> !== <span class="variable">$key</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;data[<span class="variable">$key</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>撰寫完資料對應器之後，接下來要寫些測試來驗證資料對應器是否能夠正確的運作，預期是繪製好草圖，把草圖塞入對應器之後，獲得相對應的大頭菜物件，所以會有以下幾個重點項目需要測試：</p><ol><li>測試塞入大頭菜列，並且取得 id 為 1 的大頭菜。</li><li>測試塞入空的大頭菜列，並且成功獲得例外錯誤。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class DataMapperTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataMapperTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試塞入大頭菜列，並且取得 id 為 1 的大頭菜。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_map_turnips_from_storage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$storage</span> = <span class="keyword">new</span> <span class="title class_">StorageAdapter</span>(</span><br><span class="line">            <span class="keyword">array</span>(</span><br><span class="line">                <span class="number">1</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">                    <span class="string">&#x27;island&#x27;</span> =&gt; <span class="string">&#x27;kantai&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">100</span>,</span><br><span class="line">                    <span class="string">&#x27;count&#x27;</span> =&gt; <span class="number">40</span>,</span><br><span class="line">                ),</span><br><span class="line">            ),</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="variable">$mapper</span> = <span class="keyword">new</span> <span class="title class_">TurnipsMapper</span>(<span class="variable">$storage</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$turnips</span> = <span class="variable">$mapper</span>-&gt;<span class="title function_ invoke__">findById</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertInstanceOf</span>(<span class="title class_">Turnips</span>::<span class="variable language_">class</span>, <span class="variable">$turnips</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試塞入空的大頭菜列，並且成功獲得例外錯誤。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_will_not_map_invalid_data</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">expectException</span>(<span class="title class_">\InvalidArgumentException</span>::<span class="variable language_">class</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$storage</span> = <span class="keyword">new</span> <span class="title class_">StorageAdapter</span>([]);</span><br><span class="line">        <span class="variable">$mapper</span> = <span class="keyword">new</span> <span class="title class_">TurnipsMapper</span>(<span class="variable">$storage</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$mapper</span>-&gt;<span class="title function_ invoke__">findById</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CompositePatternTest       ✔  ✔  ✔  </span><br><span class="line"> ==&gt; DataMapperTest             ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.050, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (36 tests, 83 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/DataMapper">技術部落格文章 - 資料對應</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Structural/DataMapper">資料對應 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Structural/DataMapperTest.php">資料對應 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">資料對應，這是一種常用於處理物件導向與資料庫資料的模式，與 `Repository` 不同，`Data Mapper` 主要處理的事單個物件本身，而 `Repository` 處理的是物件的集合。這次實作舉個例子，你在買大頭菜之前，需要有一個草圖去評估你要前往哪些島上買大頭菜，決定好之後再開始行動。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="結構型" scheme="https://blog.init.engineer/tags/%E7%B5%90%E6%A7%8B%E5%9E%8B/"/>
    
    <category term="資料對應" scheme="https://blog.init.engineer/tags/%E8%B3%87%E6%96%99%E5%B0%8D%E6%87%89/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】組合模式 Composite Pattern</title>
    <link href="https://blog.init.engineer/posts/CompositePattern/"/>
    <id>https://blog.init.engineer/posts/CompositePattern/</id>
    <published>2020-09-23T16:00:00.000Z</published>
    <updated>2020-09-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="組合模式-Composite-Pattern"><a href="#組合模式-Composite-Pattern" class="headerlink" title="組合模式 Composite Pattern"></a>組合模式 Composite Pattern</h1><p>組合模式，一種將物件一個一個處理，並且最後組合起來的模式，可以想像剛買到大頭菜時的夢想，經過每次漲跌所帶來的希望與絕望，究竟是充滿絕望的遞減型呢？還是致富關鍵的三期型呢？每次的價格異動，都代表著價格物件，最終賣出的鈴錢價格，是經過許多鈴錢價格物件所算出來的。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/CompositePattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先我們要先定義組合介面，用來套用在每個功能物件上。</p><p>TurnipsInterface.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface TurnipsInterface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TurnipsInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來建立大頭菜上漲(Price up)以及下跌(Price down)的物件，並且套用介面 Interface，其功能是把漲跌幅丟進去，用來紀錄當次的漲跌幅。</p><p>PriceUp.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class PriceUp.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriceUp</span> <span class="keyword">implements</span> <span class="title">TurnipsInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * PriceDown constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PriceDown.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class PriceDown.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriceDown</span> <span class="keyword">implements</span> <span class="title">TurnipsInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * PriceDown constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> - <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後建立大頭菜，賦予起始價格以及數量，然後可以賦予每次價格漲跌幅的物件，然後根據每個漲跌幅物件，來計算最終的鈴錢價格。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span> <span class="keyword">implements</span> <span class="title">TurnipsInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> TurnipsInterface[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$elements</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$_price</span> = <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;elements <span class="keyword">as</span> <span class="variable">$element</span>) &#123;</span><br><span class="line">            <span class="variable">$_price</span> += <span class="variable">$element</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$_price</span> * <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> TurnipsInterface $element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addElement</span>(<span class="params">TurnipsInterface <span class="variable">$element</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;elements, <span class="variable">$element</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>最後我們需要將大頭菜組合模式來寫些測試驗證一下，主要是測試鈴錢價格上漲物件、鈴錢價格下跌物件是否能夠正常運作，再來實際組裝起來再各別計算一次。</p><ol><li>測試鈴錢價格上漲物件是否能夠正常運作。</li><li>測試鈴錢價格下跌物件是否能夠正常運作。</li><li>測試鈴錢價格上漲物件、鈴錢價格下跌物件實際組裝起來再各別計算一次。</li></ol><p>CompositePatternTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class CompositePatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompositePatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試鈴錢價格上漲物件是否能夠正常運作。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_price_up</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$price</span> = <span class="keyword">new</span> <span class="title class_">PriceUp</span>(<span class="number">20</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">20</span>, <span class="variable">$price</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試鈴錢價格下跌物件是否能夠正常運作。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_price_down</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$price</span> = <span class="keyword">new</span> <span class="title class_">PriceDown</span>(<span class="number">20</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(-<span class="number">20</span>, <span class="variable">$price</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試鈴錢價格上漲物件、鈴錢價格下跌物件實際組裝起來再各別計算一次。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_price_up_and_down</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line"></span><br><span class="line">        <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">addElement</span>(<span class="keyword">new</span> <span class="title class_">PriceUp</span>(<span class="number">20</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4800</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line"></span><br><span class="line">        <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">addElement</span>(<span class="keyword">new</span> <span class="title class_">PriceDown</span>(<span class="number">30</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">3600</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"> ==&gt; CompositePatternTest       ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.050, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (34 tests, 81 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/CompositePattern">技術部落格文章 - 組合模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Structural/CompositePattern">組合模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Structural/CompositePatternTest.php">組合模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">組合模式，一種將物件一個一個處理，並且最後組合起來的模式，可以想像剛買到大頭菜時的夢想，經過每次漲跌所帶來的希望與絕望，究竟是充滿絕望的遞減型呢？還是致富關鍵的三期型呢？每次的價格異動，都代表著價格物件，最終賣出的鈴錢價格，是經過許多鈴錢價格物件所算出來的。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="結構型" scheme="https://blog.init.engineer/tags/%E7%B5%90%E6%A7%8B%E5%9E%8B/"/>
    
    <category term="組合模式" scheme="https://blog.init.engineer/tags/%E7%B5%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】橋接模式 Bridge Pattern</title>
    <link href="https://blog.init.engineer/posts/BridgePattern/"/>
    <id>https://blog.init.engineer/posts/BridgePattern/</id>
    <published>2020-09-22T16:00:00.000Z</published>
    <updated>2020-09-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="橋接模式-Bridge-Pattern"><a href="#橋接模式-Bridge-Pattern" class="headerlink" title="橋接模式 Bridge Pattern"></a>橋接模式 Bridge Pattern</h1><p>橋接模式，將實作體系與抽象體系分離開來，讓兩者能各自更動各自演進，就有點像是大頭菜有分健康的大頭菜及壞掉的大頭菜，你的島上有這兩種大頭菜，但是健康的大頭菜過了一個禮拜都沒賣掉的話，他就會變成壞掉的大頭菜了。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="https://raw.githubusercontent.com/Kantai235/php-design-pattern/master/DesignPatterns/Structural/BridgePattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先我們要來把大頭菜做出來，因此會有定義大頭菜介面 Interface、建立健康的大頭菜及壞掉的大頭菜。</p><p>TurnipsInterface.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface TurnipsInterface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TurnipsInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span> <span class="keyword">implements</span> <span class="title">TurnipsInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;price) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;count)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price * <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spoiled.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Spoiled.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spoiled</span> <span class="keyword">implements</span> <span class="title">TurnipsInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spoiled constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;price) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;count)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> * <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下來我們要建立所謂的橋樑，這裡有個重要的地方是實作(Implementation)，功能是來去替換大頭菜的類別。</p><p>BaseService.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class BaseService.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> TurnipsInterface</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$implementation</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> TurnipsInterface $turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">TurnipsInterface <span class="variable">$turnips</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;implementation = <span class="variable">$turnips</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> TurnipsInterface $turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setImplementation</span>(<span class="params">TurnipsInterface <span class="variable">$turnips</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;implementation = <span class="variable">$turnips</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TurnipsService.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class TurnipsService.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TurnipsService</span> <span class="keyword">extends</span> <span class="title">BaseService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;implementation-&gt;<span class="title function_ invoke__">calculatePrice</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>最後我們要來寫幾些測試項目，主要測試建立 <code>Service</code> 並且執行計算，以及是否能夠替換大頭菜類別，並且計算。</p><ol><li>測試是否能建立 Service 並把健康的大頭菜塞進去，然後計算鈴錢。</li><li>測試是否能建立 Service 並把壞掉的大頭菜塞進去，然後計算鈴錢。</li><li>測試是否能建立 Service 並把健康的大頭菜塞進去，然後計算鈴錢，再把大頭菜替換成壞掉的大頭菜，再計算一次鈴錢。</li></ol><p>BridgePatternTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class BridgePatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BridgePatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試是否能建立 Service 並把健康的大頭菜塞進去，然後計算鈴錢。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_calculate_price_for_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$service</span> = <span class="keyword">new</span> <span class="title class_">TurnipsService</span>(<span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">100</span>, <span class="number">40</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$service</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試是否能建立 Service 並把壞掉的大頭菜塞進去，然後計算鈴錢。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_calculate_price_for_spoiled</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$service</span> = <span class="keyword">new</span> <span class="title class_">TurnipsService</span>(<span class="keyword">new</span> <span class="title class_">Spoiled</span>(<span class="number">100</span>, <span class="number">40</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">0</span>, <span class="variable">$service</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試是否能建立 Service 並把健康的大頭菜塞進去，然後計算鈴錢，</span></span><br><span class="line"><span class="comment">     * 再把大頭菜替換成壞掉的大頭菜，再計算一次鈴錢。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_calculate_price_for_turnips_and_spoiled</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$service</span> = <span class="keyword">new</span> <span class="title class_">TurnipsService</span>(<span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">100</span>, <span class="number">40</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$service</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line"></span><br><span class="line">        <span class="variable">$service</span>-&gt;<span class="title function_ invoke__">setImplementation</span>(<span class="keyword">new</span> <span class="title class_">Spoiled</span>(<span class="number">100</span>, <span class="number">40</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">0</span>, <span class="variable">$service</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; BridgePatternTest          ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.027, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (31 tests, 76 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/BridgePattern">技術部落格文章 - 橋接模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Structural/BridgePattern">橋接模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Structural/BridgePatternTest.php">橋接模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">橋接模式，將實作體系與抽象體系分離開來，讓兩者能各自更動各自演進，就有點像是大頭菜有分健康的大頭菜及壞掉的大頭菜，你的島上有這兩種大頭菜，但是健康的大頭菜過了一個禮拜都沒賣掉的話，他就會變成壞掉的大頭菜了。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="結構型" scheme="https://blog.init.engineer/tags/%E7%B5%90%E6%A7%8B%E5%9E%8B/"/>
    
    <category term="橋接模式" scheme="https://blog.init.engineer/tags/%E6%A9%8B%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】轉接器模式 Adapter Pattern</title>
    <link href="https://blog.init.engineer/posts/AdapterPattern/"/>
    <id>https://blog.init.engineer/posts/AdapterPattern/</id>
    <published>2020-09-21T16:00:00.000Z</published>
    <updated>2020-09-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="轉接器模式-Adapter-Pattern"><a href="#轉接器模式-Adapter-Pattern" class="headerlink" title="轉接器模式 Adapter Pattern"></a>轉接器模式 Adapter Pattern</h1><p>轉接器模式，顧名思義會在兩個同功能但不同的規格的東西中，當作中間溝通的橋樑，就有點像是健康的大頭菜因為放超過一個禮拜，直接變成壞掉的大頭菜，兩個東西都是大頭菜，但規格上可能不太一樣，這時候我們就需要一個大頭菜轉接器，直接把健康的大頭菜給轉到壞掉。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/AdapterPattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先我們需要先建立健康的大頭菜、以及壞掉的大頭菜，別忘記要建立介面(Interface)來定義大頭菜的規格。</p><p>TurnipsInterface.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface TurnipsInterface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TurnipsInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">risePrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>): <span class="title">int</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fallPrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>): <span class="title">int</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrice</span>(<span class="params"></span>): <span class="title">int</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>): <span class="title">int</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">int</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">subCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">int</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params"></span>): <span class="title">int</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">int</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span> <span class="keyword">implements</span> <span class="title">TurnipsInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $pirce</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">risePrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price += <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fallPrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price -= <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count += <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">subCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count -= <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;price) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;count)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price * <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpoiledInterface.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface SpoiledInterface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SpoiledInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">risePrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>): <span class="title">int</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fallPrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>): <span class="title">int</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">int</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">subCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">int</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spoiled.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Spoiled.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spoiled</span> <span class="keyword">implements</span> <span class="title">SpoiledInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spoiled constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $pirce</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">risePrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price += <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fallPrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price -= <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count += <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">subCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count -= <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;price) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;count)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> * <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來我們需要為健康的大頭菜以及壞掉的大頭菜製作轉接器，概念上是引用壞掉的大頭菜介面，把健康的大頭菜丟進去，讓大頭菜以壞掉的方式來運作。</p><p>TurnipsAdapter.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class TurnipsAdapter.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TurnipsAdapter</span> <span class="keyword">implements</span> <span class="title">SpoiledInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> TurnipsInterface</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$turnips</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> TurnipsInterface $turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">TurnipsInterface <span class="variable">$turnips</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips = <span class="variable">$turnips</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $pirce</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">risePrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips-&gt;<span class="title function_ invoke__">setPrice</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;turnips-&gt;<span class="title function_ invoke__">getPrice</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fallPrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips-&gt;<span class="title function_ invoke__">setPrice</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;turnips-&gt;<span class="title function_ invoke__">getPrice</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips-&gt;<span class="title function_ invoke__">addCount</span>(<span class="variable">$count</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">subCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips-&gt;<span class="title function_ invoke__">subCount</span>(<span class="variable">$count</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;turnips-&gt;<span class="title function_ invoke__">getCount</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;price) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;count)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> * <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>寫完大頭菜轉接器以後，我們要來測試轉接器是否能夠正常使用，這裡會有幾個測試的重要項目：</p><ol><li>測試大頭菜是否能夠正常賦予數量及價格，並且漲價 10 鈴錢、減少 20 組，最後算出價格是否符合。</li><li>測試大頭菜是否能夠正常賦予數量及價格，並且透過大頭菜轉接器把它轉成壞掉的大頭菜，最後漲價 10 鈴錢、減少 20 組，最後算出價格是否根本沒辦法賣鈴錢。</li></ol><p>AdapterPatternTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class AdapterPatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdapterPatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試大頭菜是否能夠正常賦予數量及價格，並且漲價 10 鈴錢、減少 20 組，最後算出價格是否符合。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_rise_price_and_sub_count_on_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">risePrice</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">subCount</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">2200</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試大頭菜是否能夠正常賦予數量及價格，並且透過大頭菜轉接器把它轉成壞掉的大頭菜</span></span><br><span class="line"><span class="comment">     * 最後漲價 10 鈴錢、減少 20 組，最後算出價格是否根本沒辦法賣鈴錢。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_rise_price_and_sub_count_on_spoiled</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable">$turnipsAdapter</span> = <span class="keyword">new</span> <span class="title class_">TurnipsAdapter</span>(<span class="variable">$turnips</span>);</span><br><span class="line">        <span class="variable">$turnipsAdapter</span>-&gt;<span class="title function_ invoke__">risePrice</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="variable">$turnipsAdapter</span>-&gt;<span class="title function_ invoke__">subCount</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">0</span>, <span class="variable">$turnipsAdapter</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; AdapterPatternTest         ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.050, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (28 tests, 72 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/AdapterPattern">技術部落格文章 - 轉接器模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Structural/AdapterPattern">轉接器模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Structural/AdapterPatternTest.php">轉接器模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">轉接器模式，顧名思義會在兩個同功能但不同的規格的東西中，當作中間溝通的橋樑，就有點像是健康的大頭菜因為放超過一個禮拜，直接變成壞掉的大頭菜，兩個東西都是大頭菜，但規格上可能不太一樣，這時候我們就需要一個大頭菜轉接器，直接把健康的大頭菜給轉到壞掉。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="結構型" scheme="https://blog.init.engineer/tags/%E7%B5%90%E6%A7%8B%E5%9E%8B/"/>
    
    <category term="轉接器模式" scheme="https://blog.init.engineer/tags/%E8%BD%89%E6%8E%A5%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】物件池模式 Pool Pattern</title>
    <link href="https://blog.init.engineer/posts/PoolPattern/"/>
    <id>https://blog.init.engineer/posts/PoolPattern/</id>
    <published>2020-09-20T16:00:00.000Z</published>
    <updated>2020-09-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="物件池模式-Pool-Pattern"><a href="#物件池模式-Pool-Pattern" class="headerlink" title="物件池模式 Pool Pattern"></a>物件池模式 Pool Pattern</h1><p>物件池模式，每次的買賣都是致富的關鍵，致富不能只靠 40 顆大頭菜，靠的是放滿整座島的大頭菜，因此你需要有個島專門放大頭菜，放得滿滿的，到了關鍵時刻再把大頭菜拿出來賣。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/PoolPattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先我們會需要把大頭菜定義出來，並且賦予幾些簡單的功能。</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;price) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;count)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price * <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來我們要做一個大頭菜池，而且要挖深，挖深呢，好處是有利於儲大頭菜，未來還可以養大頭菜，然後就可以把大頭菜通通丟進去。</p><p>TurnipsPool.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Countable</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class TurnipsPool.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TurnipsPool</span> <span class="keyword">implements</span> <span class="title">Countable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Turnips[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$pool</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$total</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$key</span> = <span class="literal">null</span></span>): <span class="title">Turnips</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$key</span>)) &#123;</span><br><span class="line">            <span class="variable">$turnips</span> = <span class="variable language_">$this</span>-&gt;pool[<span class="variable">$key</span>];</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;pool[<span class="variable">$key</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$turnips</span> = <span class="title function_ invoke__">array_pop</span>(<span class="variable">$this</span>-&gt;pool);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;total -= <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$turnips</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把大頭菜塞到池子裡</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Turnips $turnips</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">Turnips <span class="variable">$turnips</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">spl_object_hash</span>(<span class="variable">$turnips</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;total += <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pool[<span class="variable">$key</span>] = <span class="variable">$turnips</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$key</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">total</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">count</span>(<span class="variable">$this</span>-&gt;pool);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="額外補充"><a href="#額外補充" class="headerlink" title="額外補充"></a>額外補充</h2><h3 id="Countable"><a href="#Countable" class="headerlink" title="Countable"></a>Countable</h3><p>繼承 <code>Countable</code> 這個類別可以使用 <code>count()</code> 這個方法，因此需要實作它。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Countable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* Methods */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="title function_ invoke__">count</span> ( <span class="keyword">void</span> ) : <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>官方文件：<a href="https://www.php.net/manual/en/class.countable.php">PHP: Countable - Manual</a></li></ul><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>最後為了測試我們挖很深的大頭菜池是否能夠養大頭菜，所以我們有兩組測試要做：</p><ol><li>測試是否能夠正常的新增 10 組大頭菜，並且把大頭菜拿出 2 組後，檢查池子裡面是否剩下 8 組大頭菜，然後比較一下拿出來的這 2 組是不是兩個不同的大頭菜，最後比較一下大頭菜池子裡的大頭菜價格是不是正確的。</li><li>測試是否能夠正常的新增 10 組大頭菜，並且把大頭菜拿出 1 組後，馬上把大頭菜丟回去池子裡，再從池子裡拿出 1 組大頭菜，檢查池子裡面是否剩下 9 組大頭菜，然後比較一下最後拿出來的這組，是不是就是一開始拿出來的那組大頭菜，最後比較一下大頭菜池子裡的大頭菜價格是不是正確的。</li></ol><p>PoolPatternTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class PoolPatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PoolPatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試是否能夠正常的新增 10 組大頭菜，</span></span><br><span class="line"><span class="comment">     * 並且把大頭菜拿出 2 組後，檢查池子裡面是否剩下 8 組大頭菜，</span></span><br><span class="line"><span class="comment">     * 然後比較一下拿出來的這 2 組是不是兩個不同的大頭菜，</span></span><br><span class="line"><span class="comment">     * 最後比較一下大頭菜池子裡的大頭菜價格是不是正確的。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_set_new_turnips_and_get</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$pool</span> = <span class="keyword">new</span> <span class="title class_">TurnipsPool</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">            <span class="variable">$pool</span>-&gt;<span class="title function_ invoke__">set</span>(<span class="variable">$turnips</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$turnips1</span> = <span class="variable">$pool</span>-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line">        <span class="variable">$turnips2</span> = <span class="variable">$pool</span>-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertCount</span>(<span class="number">8</span>, <span class="variable">$pool</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertNotSame</span>(<span class="variable">$turnips1</span>, <span class="variable">$turnips2</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">32000</span>, <span class="variable">$pool</span>-&gt;<span class="title function_ invoke__">total</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 測試是否能夠正常的新增 10 組大頭菜，</span></span><br><span class="line"><span class="comment">     * 並且把大頭菜拿出 1 組後，馬上把大頭菜丟回去池子裡，</span></span><br><span class="line"><span class="comment">     * 再從池子裡拿出 1 組大頭菜，</span></span><br><span class="line"><span class="comment">     * 檢查池子裡面是否剩下 9 組大頭菜，</span></span><br><span class="line"><span class="comment">     * 然後比較一下最後拿出來的這組，是不是就是一開始拿出來的那組大頭菜，</span></span><br><span class="line"><span class="comment">     * 最後比較一下大頭菜池子裡的大頭菜價格是不是正確的。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_get_turnips_twice_when_set_it_first</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$pool</span> = <span class="keyword">new</span> <span class="title class_">TurnipsPool</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">            <span class="variable">$pool</span>-&gt;<span class="title function_ invoke__">set</span>(<span class="variable">$turnips</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$turnips1</span> = <span class="variable">$pool</span>-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line">        <span class="variable">$pool</span>-&gt;<span class="title function_ invoke__">set</span>(<span class="variable">$turnips1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$turnips2</span> = <span class="variable">$pool</span>-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertCount</span>(<span class="number">9</span>, <span class="variable">$pool</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertSame</span>(<span class="variable">$turnips1</span>, <span class="variable">$turnips2</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">36000</span>, <span class="variable">$pool</span>-&gt;<span class="title function_ invoke__">total</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.050, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (24 tests, 68 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/PoolPattern">技術部落格文章 - 物件池模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Creational/PoolPattern">物件池模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Creational/PoolPatternTest.php">物件池模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">物件池模式，每次的買賣都是致富的關鍵，致富不能只靠 40 顆大頭菜，靠的是放滿整座島的大頭菜，因此你需要有個島專門放大頭菜，放得滿滿的，到了關鍵時刻再把大頭菜拿出來賣。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="建立型" scheme="https://blog.init.engineer/tags/%E5%BB%BA%E7%AB%8B%E5%9E%8B/"/>
    
    <category term="物件池模式" scheme="https://blog.init.engineer/tags/%E7%89%A9%E4%BB%B6%E6%B1%A0%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】建造者模式 Builder Pattern</title>
    <link href="https://blog.init.engineer/posts/BuilderPattern/"/>
    <id>https://blog.init.engineer/posts/BuilderPattern/</id>
    <published>2020-09-19T16:00:00.000Z</published>
    <updated>2020-09-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建造者模式-Builder-Pattern"><a href="#建造者模式-Builder-Pattern" class="headerlink" title="建造者模式 Builder Pattern"></a>建造者模式 Builder Pattern</h1><p>建造者模式，主要用來建立複雜的物件，就有點像是大頭菜的功能組成，從鈴錢價格、組合數量、現場實價 ... 等等，為了簡化把每個功能都去不斷地建立物件、塞入物件的動作，因此可以指派一個建造者，並且賦予建造模式，然後透過指定的方法來建造物件，你不需要歷經繁瑣的過程，就能獲得擁有複雜功能的物件。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/BuilderPattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>在寫建造者之前，我們需要先把很複雜的大頭菜給做出來，為了把大頭菜變複雜，所以把價格(Price)以及數量(Count)抽離出來做成物件。</p><p>Price.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Price.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Price</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$price</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Price constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">set</span>(<span class="variable">$price</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Count.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Count.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Count</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$price</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Price constructor.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">set</span>(<span class="variable">$count</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來要建立大頭菜，大頭菜會有個原型(Prototype)，然後建立健康的大頭菜、壞掉的大頭菜，並且引用大頭菜原型。</p><p>TurnipsPrototype.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class TurnipsPrototype.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TurnipsPrototype</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Price <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Count <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="keyword">new</span> <span class="title class_">Price</span>(<span class="variable">$price</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="keyword">new</span> <span class="title class_">Count</span>(<span class="variable">$count</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span> <span class="keyword">extends</span> <span class="title">TurnipsPrototype</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;price) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;count)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price-&gt;<span class="title function_ invoke__">get</span>() * <span class="variable language_">$this</span>-&gt;count-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpoiledTurnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SpoiledTurnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpoiledTurnips</span> <span class="keyword">extends</span> <span class="title">TurnipsPrototype</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;price) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;count)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> * <span class="variable language_">$this</span>-&gt;count-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我們已經把好像很複雜，但沒那麼複雜的大頭菜給定義出來了，接下來我們要建立建造者，建造者的工作就是負責把沒那麼複雜的大頭菜給建立出來，所以我們要先定義建造者的介面 Interface，並且建立健康的大頭菜建造者、壞掉的大頭菜建造者，並且去實作建造者的功能。</p><p>BuilderContract.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface BuilderContract.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BuilderContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createTurnips</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTurnips</span>(<span class="params"></span>): <span class="title">TurnipsPrototype</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TurnipsBuilder.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class TurnipsBuilder.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TurnipsBuilder</span> <span class="keyword">implements</span> <span class="title">BuilderContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Turnips <span class="variable">$turnips</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createTurnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips = <span class="keyword">new</span> <span class="title class_">Turnips</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips-&gt;<span class="title function_ invoke__">setPrice</span>(<span class="variable">$price</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips-&gt;<span class="title function_ invoke__">setCount</span>(<span class="variable">$count</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTurnips</span>(<span class="params"></span>): <span class="title">Turnips</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;turnips;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpoiledTurnipsBuilder.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SpoiledTurnipsBuilder.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpoiledTurnipsBuilder</span> <span class="keyword">implements</span> <span class="title">BuilderContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 壞掉的大頭菜是沒辦法賣鈴錢的狸！</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SPOILED_PRICE</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> SpoiledTurnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> SpoiledTurnips <span class="variable">$turnips</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createTurnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips = <span class="keyword">new</span> <span class="title class_">SpoiledTurnips</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPrice</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips-&gt;<span class="title function_ invoke__">setPrice</span>(<span class="variable">$price</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCount</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;turnips-&gt;<span class="title function_ invoke__">setCount</span>(<span class="built_in">self</span>::<span class="variable constant_">SPOILED_PRICE</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SpoiledTurnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTurnips</span>(<span class="params"></span>): <span class="title">SpoiledTurnips</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;turnips;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後我們要製作 <code>Director</code> 來負責控制建造者，只要把大頭菜建造者丟進去，大頭菜建造者就會開始製作大頭菜，並且把大頭菜丟出來給我們，而製造大頭菜這之間的過程，我們都不需要操心。</p><p>Director.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Director.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Director</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> BuilderContract $builder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> TurnipsPrototype</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">build</span>(<span class="params">BuilderContract <span class="variable">$builder</span>, <span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">TurnipsPrototype</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$builder</span>-&gt;<span class="title function_ invoke__">createTurnips</span>();</span><br><span class="line">        <span class="variable">$builder</span>-&gt;<span class="title function_ invoke__">setPrice</span>(<span class="variable">$price</span>);</span><br><span class="line">        <span class="variable">$builder</span>-&gt;<span class="title function_ invoke__">setCount</span>(<span class="variable">$count</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$builder</span>-&gt;<span class="title function_ invoke__">getTurnips</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>最後我們要對我們的大頭菜建造者做幾些測試，主要的測試項目如下：</p><ol><li>測試是否能夠正常建立大頭菜。</li><li>測試是否能夠正常建立壞掉的大頭菜。</li><li>測試大頭菜是否能夠正常計算價格。</li><li>測試壞掉的大頭菜是否能夠正常計算價格。</li></ol><p>BuilderPatternTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class BuilderPatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuilderPatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試是否能夠正常建立大頭菜。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_build_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$builder</span> = <span class="keyword">new</span> <span class="title class_">TurnipsBuilder</span>();</span><br><span class="line">        <span class="variable">$turnips</span> = (<span class="keyword">new</span> <span class="title class_">Director</span>())-&gt;<span class="title function_ invoke__">build</span>(<span class="variable">$builder</span>, <span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertInstanceOf</span>(<span class="title class_">Turnips</span>::<span class="variable language_">class</span>, <span class="variable">$turnips</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試是否能夠正常建立壞掉的大頭菜。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_build_spoiled_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$builder</span> = <span class="keyword">new</span> <span class="title class_">SpoiledTurnipsBuilder</span>();</span><br><span class="line">        <span class="variable">$turnips</span> = (<span class="keyword">new</span> <span class="title class_">Director</span>())-&gt;<span class="title function_ invoke__">build</span>(<span class="variable">$builder</span>, <span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertInstanceOf</span>(<span class="title class_">SpoiledTurnips</span>::<span class="variable language_">class</span>, <span class="variable">$turnips</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試大頭菜是否能夠正常計算價格。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_calculate_price_for_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$builder</span> = <span class="keyword">new</span> <span class="title class_">TurnipsBuilder</span>();</span><br><span class="line">        <span class="variable">$turnips</span> = (<span class="keyword">new</span> <span class="title class_">Director</span>())-&gt;<span class="title function_ invoke__">build</span>(<span class="variable">$builder</span>, <span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試壞掉的大頭菜是否能夠正常計算價格。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_calculate_price_for_spoiled_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$builder</span> = <span class="keyword">new</span> <span class="title class_">SpoiledTurnipsBuilder</span>();</span><br><span class="line">        <span class="variable">$turnips</span> = (<span class="keyword">new</span> <span class="title class_">Director</span>())-&gt;<span class="title function_ invoke__">build</span>(<span class="variable">$builder</span>, <span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">0</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.050, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (26 tests, 70 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/BuilderPattern">技術部落格文章 - 建造者模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Creational/BuilderPattern">建造者模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Creational/BuilderPatternTest.php">建造者模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">建造者模式，主要用來建立複雜的物件，就有點像是大頭菜的功能組成，從鈴錢價格、組合數量、現場實價 ... 等等，為了簡化把每個功能都去不斷地建立物件、塞入物件的動作，因此可以指派一個建造者，並且賦予建造模式，然後透過指定的方法來建造物件，你不需要歷經繁瑣的過程，就能獲得擁有複雜功能的物件。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="建立型" scheme="https://blog.init.engineer/tags/%E5%BB%BA%E7%AB%8B%E5%9E%8B/"/>
    
    <category term="建造者模式" scheme="https://blog.init.engineer/tags/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】原型模式 Prototype Pattern</title>
    <link href="https://blog.init.engineer/posts/PrototypePattern/"/>
    <id>https://blog.init.engineer/posts/PrototypePattern/</id>
    <published>2020-09-18T16:00:00.000Z</published>
    <updated>2020-09-18T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原型模式-Prototype-Pattern"><a href="#原型模式-Prototype-Pattern" class="headerlink" title="原型模式 Prototype Pattern"></a>原型模式 Prototype Pattern</h1><p>原型模式，你有些物件可能會需要建立很多一樣的物件，只是某些資料不太一樣而已，就有點像是每顆大頭菜都是一模一樣的物件，但可能因為來自不同的島，所以每顆大頭菜的差別只在於那起始購買的鈴錢不同。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/PrototypePattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先我們需要以抽象類別的方式，來製作大頭菜的原型，並且定義好大頭菜的基本功能。</p><p>TurnipsPrototype.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class TurnipsPrototype.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TurnipsPrototype</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$category</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;price) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;count)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price * <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來建立健康的大頭菜、壞掉的大頭菜，並且引用大頭菜原型，這裡需要注意我們須要去實作 <code>__clone</code> 方法，這樣子才能讓大頭菜複製、貼上。</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span> <span class="keyword">extends</span> <span class="title">TurnipsPrototype</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$category</span> = <span class="string">&#x27;大頭菜&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement __Clone() method.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpoiledTurnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SpoiledTurnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpoiledTurnips</span> <span class="keyword">extends</span> <span class="title">TurnipsPrototype</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$category</span> = <span class="string">&#x27;壞掉的大頭菜&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 壞掉的大頭菜是沒辦法賣鈴錢的狸！</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SPOILED_PRICE</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpoiledTurnips constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="built_in">self</span>::<span class="variable constant_">SPOILED_PRICE</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement __Clone() method.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>最後要來驗證一下我們所寫的原型是否是正確的，所以這次的測試也比較簡單，原型模式著重於大頭菜可以被複製，每個被複製出來的大頭菜只有局部的內容不一樣，以最節省資源的方式，來處理重複性質高的物件。</p><ol><li>建立大頭菜，並且複製 10 次，檢查每次大頭菜是否都是大頭菜，而且價格是正確的。</li><li>建立壞掉的大頭菜，並且複製 10 次，檢查每次大頭菜是否都是壞掉的大頭菜，而且都賣不了錢。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class PrototypePatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrototypePatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立大頭菜，並且複製 10 次，</span></span><br><span class="line"><span class="comment">     * 檢查每次大頭菜是否都是大頭菜，而且價格是正確的。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_clone_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$_turnips</span> = <span class="keyword">clone</span> <span class="variable">$turnips</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertInstanceOf</span>(<span class="title class_">Turnips</span>::<span class="variable language_">class</span>, <span class="variable">$_turnips</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$_turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立壞掉的大頭菜，並且複製 10 次，</span></span><br><span class="line"><span class="comment">     * 檢查每次大頭菜是否都是壞掉的大頭菜，而且都賣不了錢。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_clone_spoiled_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="title class_">SpoiledTurnips</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$_turnips</span> = <span class="keyword">clone</span> <span class="variable">$turnips</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertInstanceOf</span>(<span class="title class_">SpoiledTurnips</span>::<span class="variable language_">class</span>, <span class="variable">$_turnips</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">0</span>, <span class="variable">$_turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.050, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (24 tests, 68 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/PrototypePattern">技術部落格文章 - 原型模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Creational/PrototypePattern">原型模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Creational/PrototypePatternTest.php">原型模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">原型模式，你有些物件可能會需要建立很多一樣的物件，只是某些資料不太一樣而已，就有點像是每顆大頭菜都是一模一樣的物件，但可能因為來自不同的島，所以每顆大頭菜的差別只在於那起始購買的鈴錢不同。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="建立型" scheme="https://blog.init.engineer/tags/%E5%BB%BA%E7%AB%8B%E5%9E%8B/"/>
    
    <category term="原型模式" scheme="https://blog.init.engineer/tags/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】工廠方法 Factory Method</title>
    <link href="https://blog.init.engineer/posts/FactoryMethod/"/>
    <id>https://blog.init.engineer/posts/FactoryMethod/</id>
    <published>2020-09-17T16:00:00.000Z</published>
    <updated>2020-09-17T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工廠方法-Factory-Method"><a href="#工廠方法-Factory-Method" class="headerlink" title="工廠方法 Factory Method"></a>工廠方法 Factory Method</h1><p>工廠方法，跟抽象工廠有點像，可是又沒那麼像，抽象工廠的工廠會有個抽象類別，並且把工廠要做且會重工的事情寫在抽象類別當中，而工廠方法則是需要定義一個工廠介面，並且讓工廠去實作，如果看到工廠介面不小心定義成抽象工廠，就拿網子打他，有點像是曹賣的奶奶會賣大頭菜，曹賣也會賣大頭菜，所以他們都有一個介面定義他們會賣大頭菜。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/FactoryMethod/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先我們一樣要先建立大頭菜介面，並且定義大頭菜需要有哪些功能，再來建立健康的大頭菜、壞掉的大頭菜，先有大頭菜才有大頭菜工廠。</p><p>TurnipsContract.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface TurnipsContract.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TurnipsContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後我們要新增新鮮的大頭菜、壞掉的大頭菜，並且去實作大頭菜介面所定義的條件。</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span> <span class="keyword">implements</span> <span class="title">TurnipsContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;price) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;count)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price * <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpoiledTurnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SpoiledTurnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpoiledTurnips</span> <span class="keyword">implements</span> <span class="title">TurnipsContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpoiledTurnips constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;count)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> * <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下來我們要建立個別的大頭菜工廠，分別是健康的大頭菜工廠、壞掉的大頭菜工廠，但在此之前，我們要先定義什麼是工廠。</p><p>FactoryContract.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface TurnipsFactoryContract.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TurnipsFactoryContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">TurnipsContract</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定義完工廠以後，我們最後要來建立健康的大頭菜工廠、壞掉的大頭菜工廠。</p><p>TurnipsFactory.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class TurnipsFactory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TurnipsFactory</span> <span class="keyword">implements</span> <span class="title">FactoryContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> TurnipsContract</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">TurnipsContract</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="variable">$price</span>, <span class="variable">$count</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpoiledTurnipsFactory.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SpoiledTurnipsFactory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpoiledTurnipsFactory</span> <span class="keyword">implements</span> <span class="title">FactoryContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SPOILED_PRICE</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> TurnipsContract</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">TurnipsContract</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpoiledTurnips</span>(<span class="built_in">self</span>::<span class="variable constant_">SPOILED_PRICE</span>, <span class="variable">$count</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>最後我們要來測試我們寫的大頭菜工廠方法是否可以正常運作，因此會有幾個需要測試的重點項目：</p><ol><li>測試是否能夠建立健康的大頭菜。</li><li>測試是否能夠建立壞掉的大頭菜。</li><li>測試健康的大頭菜是否能夠正常計算價格。</li><li>測試壞掉的大頭菜是否能夠正常計算價格。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class FactoryMethodTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryMethodTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試是否能夠正常建立大頭菜。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_create_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$factory</span> = <span class="keyword">new</span> <span class="title class_">TurnipsFactory</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="variable">$factory</span>-&gt;<span class="title function_ invoke__">createTurnips</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertInstanceOf</span>(<span class="title class_">Turnips</span>::<span class="variable language_">class</span>, <span class="variable">$turnips</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試是否能夠正常建立壞掉的大頭菜。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_create_spoiled_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$factory</span> = <span class="keyword">new</span> <span class="title class_">SpoiledTurnipsFactory</span>(<span class="number">40</span>);</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="variable">$factory</span>-&gt;<span class="title function_ invoke__">createTurnips</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertInstanceOf</span>(<span class="title class_">SpoiledTurnips</span>::<span class="variable language_">class</span>, <span class="variable">$turnips</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試是否能夠正常計算大頭菜的價格。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_calculate_price_for_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$factory</span> = <span class="keyword">new</span> <span class="title class_">TurnipsFactory</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="variable">$factory</span>-&gt;<span class="title function_ invoke__">createTurnips</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試是否能夠正常計算壞掉的大頭菜的價格。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_calculate_price_for_spoiled_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$factory</span> = <span class="keyword">new</span> <span class="title class_">SpoiledTurnipsFactory</span>(<span class="number">40</span>);</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="variable">$factory</span>-&gt;<span class="title function_ invoke__">createTurnips</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">0</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.050, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (24 tests, 68 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/FactoryMethod">技術部落格文章 - 工廠方法</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Creational/FactoryMethod">工廠方法 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Creational/FactoryMethodTest.php">工廠方法 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">工廠方法，跟抽象工廠有點像，可是又沒那麼像，抽象工廠的工廠會有個抽象類別，並且把工廠要做且會重工的事情寫在抽象類別當中，而工廠方法則是需要定義一個工廠介面，並且讓工廠去實作，如果看到工廠介面不小心定義成抽象工廠，就拿網子打他，有點像是曹賣的奶奶會賣大頭菜，曹賣也會賣大頭菜，所以他們都有一個介面定義他們會賣大頭菜。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="建立型" scheme="https://blog.init.engineer/tags/%E5%BB%BA%E7%AB%8B%E5%9E%8B/"/>
    
    <category term="工廠方法" scheme="https://blog.init.engineer/tags/%E5%B7%A5%E5%BB%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】靜態工廠 Abstract Factory</title>
    <link href="https://blog.init.engineer/posts/AbstractFactory/"/>
    <id>https://blog.init.engineer/posts/AbstractFactory/</id>
    <published>2020-09-16T16:00:00.000Z</published>
    <updated>2020-09-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="抽象工廠-Abstract-Factory"><a href="#抽象工廠-Abstract-Factory" class="headerlink" title="抽象工廠 Abstract Factory"></a>抽象工廠 Abstract Factory</h1><p>抽象工廠，跟靜態工廠有點像，只是它沒那麼靜態，你需要先把工廠建立出來，才能開始生產大頭菜，就有點像是星期日的早上時，你打開 Switch 需要先看西施惠晨報，這時候島上正在把曹賣叫過來，你聽完晨報時，曹賣也到島上了。</p><blockquote><p><strong>【補充說明】</strong><br>工廠主要在於說，如果你有一個物件需要建立，並且你會附帶很多功能時，為了避免耦合性過高，因而擁有的一系列模式。<br>你如果已經讀過前面幾些工廠的話，那你會發現工廠不外乎就是會有一個主要物件，以及負責建立物件的工廠，對於呼叫端來說，工廠怎麼製作這些物件的，這並不重要，因為呼叫端只需要給定參數，工廠的職責就是將物件生出來，在抽象工廠當中，工廠與工廠之間可能有會重複的功能，但又有片面不重複的功能。<br>舉個例子來講，今天你在開發一個串接社群網站的應用程式，你有個功能是希望將文章一次發佈到多個社群網站，那麼當你在把文章發表到社群網站時，你可能會需要有個 Facebook 套件、Plurk 套件、Twitter 套件之類的，建立他們的方式可能不太一樣，有的吃 token，有的則是要 oauth 流程，但目標都是獲得特定社群的 client 物件，而且他們都有相同的一個主要方法，那就是發表文章，只是實作的方式不同，有的只要帶入文章內容就可以了，有的需要將文章 hash 起來，或者有的要帶入文章分類，因此「發表文章」這個 function 就可以直接寫在抽象工廠(BaseFactory)當中，而實作的方式則是寫在繼承的工廠當中。</p></blockquote><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/AbstractFactory/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先我們一樣要先建立大頭菜介面，並且定義大頭菜需要有哪些功能，再來建立健康的大頭菜、壞掉的大頭菜，先有大頭菜才有大頭菜工廠。</p><p>TurnipsContract.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface TurnipsContract.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TurnipsContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後我們要新增新鮮的大頭菜、壞掉的大頭菜，並且去實作大頭菜介面所定義的條件。</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span> <span class="keyword">implements</span> <span class="title">TurnipsContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;price) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;count)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price * <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpoiledTurnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SpoiledTurnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpoiledTurnips</span> <span class="keyword">implements</span> <span class="title">TurnipsContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpoiledTurnips constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;count)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> * <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下來我們要建立個別的大頭菜工廠，分別是健康的大頭菜工廠、壞掉的大頭菜工廠，但在此之前，我們要先定義什麼是工廠。</p><p>FactoryContract.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface FactoryContract.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">FactoryContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createTurnips</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">TurnipsContract</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>並且實作出一個抽象的大頭菜工廠，這個抽象工廠會把具有重複性質的事情實作出來，這裡以分類新增大頭菜作為舉例。</p><p>BaseFactory.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class BaseFactory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFactory</span> <span class="keyword">implements</span> <span class="title">FactoryContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int    $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int    $count</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> TurnipsContract</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createTurnips</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$type</span>, <span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">TurnipsContract</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$type</span> === <span class="string">&#x27;大頭菜&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="variable">$price</span>, <span class="variable">$count</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$type</span> === <span class="string">&#x27;壞掉的大頭菜&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpoiledTurnips</span>(<span class="variable">$price</span>, <span class="variable">$count</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\InvalidArgumentException</span>(<span class="string">&#x27;找不到這種大頭菜分類。&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定義完工廠以後，我們最後要來建立健康的大頭菜工廠、壞掉的大頭菜工廠。</p><p>TurnipsFactory.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class TurnipsFactory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TurnipsFactory</span> <span class="keyword">implements</span> <span class="title">FactoryContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// Code ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpoiledTurnipsFactory.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SpoiledTurnipsFactory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpoiledTurnipsFactory</span> <span class="keyword">implements</span> <span class="title">FactoryContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// Code ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>寫完抽象大頭菜工廠了以後，我們接下來要寫些測試來驗證我們的抽象大頭菜工廠是否正確，因此有幾個測試項目要來驗證：</p><ol><li>測試是否能夠建立健康的大頭菜。</li><li>測試是否能夠建立壞掉的大頭菜。</li><li>測試健康的大頭菜是否能夠正常計算價格。</li><li>測試壞掉的大頭菜是否能夠正常計算價格。</li></ol><p>AbstractFactoryTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class AbstractFactoryTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試是否能夠建立大頭菜。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_create_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$factory</span> = <span class="keyword">new</span> <span class="title class_">TurnipsFactory</span>();</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="variable">$factory</span>-&gt;<span class="title function_ invoke__">createTurnips</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertInstanceOf</span>(<span class="title class_">Turnips</span>::<span class="variable language_">class</span>, <span class="variable">$turnips</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試是否能夠建立壞掉的大頭菜。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_create_spoiled_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$factory</span> = <span class="keyword">new</span> <span class="title class_">SpoiledTurnipsFactory</span>();</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="variable">$factory</span>-&gt;<span class="title function_ invoke__">createTurnips</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertInstanceOf</span>(<span class="title class_">SpoiledTurnips</span>::<span class="variable language_">class</span>, <span class="variable">$turnips</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試大頭菜是否能夠正常計算價格。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_calculate_price_for_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$factory</span> = <span class="keyword">new</span> <span class="title class_">TurnipsFactory</span>();</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="variable">$factory</span>-&gt;<span class="title function_ invoke__">createTurnips</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試壞掉的大頭菜是否能夠正常計算價格。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_calculate_price_for_spoiled_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$factory</span> = <span class="keyword">new</span> <span class="title class_">SpoiledTurnipsFactory</span>();</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="variable">$factory</span>-&gt;<span class="title function_ invoke__">createTurnips</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">0</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.050, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (24 tests, 68 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/AbstractFactory">技術部落格文章 - 抽象工廠</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Creational/AbstractFactory">抽象工廠 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Creational/AbstractFactoryTest.php">抽象工廠 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">抽象工廠，跟靜態工廠有點像，只是它沒那麼靜態，你需要先把工廠建立出來，才能開始生產大頭菜，就有點像是星期日的早上時，你打開 Switch 需要先看西施惠晨報，這時候島上正在把曹賣叫過來，你聽完晨報時，曹賣也到島上了。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="建立型" scheme="https://blog.init.engineer/tags/%E5%BB%BA%E7%AB%8B%E5%9E%8B/"/>
    
    <category term="抽象工廠" scheme="https://blog.init.engineer/tags/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%BB%A0/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】靜態工廠 Static Factory</title>
    <link href="https://blog.init.engineer/posts/StaticFactory/"/>
    <id>https://blog.init.engineer/posts/StaticFactory/</id>
    <published>2020-09-15T16:00:00.000Z</published>
    <updated>2020-09-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="靜態工廠-Static-Factory"><a href="#靜態工廠-Static-Factory" class="headerlink" title="靜態工廠 Static Factory"></a>靜態工廠 Static Factory</h1><p>靜態工廠，顧名思義就是希望這整個工廠都是屬於靜態屬性的，無論到哪裡都以靜態方法來使用這個工廠，就像是在星期日的早上時，會有個曹賣在你的島上走來走去，但無論曹賣走到哪裡，你都可以跟曹賣買大頭菜。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/StaticFactory/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先我們這次會有兩種大頭菜，一種是新鮮的大頭菜(Turnips)，另一種是壞掉的大頭菜(Spoiled Trunips)，但因為它們都是大頭菜，所以我們要先寫個大頭菜介面，並解定義大頭菜應該具備哪些條件。</p><p>TurnipsContract.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface TurnipsContract.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TurnipsContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後我們要新增新鮮的大頭菜、壞掉的大頭菜，並且去實作大頭菜介面所定義的條件。</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span> <span class="keyword">implements</span> <span class="title">TurnipsContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Turnips constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;price) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;count)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price * <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpoiledTurnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SpoiledTurnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpoiledTurnips</span> <span class="keyword">implements</span> <span class="title">TurnipsContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpoiledTurnips constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;count)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> * <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後我們要建立大頭菜的靜態工廠，建立大頭菜的方法以靜態的方式宣告，並且根據參數來回傳不同的大頭菜。</p><p>TurnipsFactory.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class TurnipsFactory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TurnipsFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int    $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int    $count</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> TurnipsContract</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">factory</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$type</span>, <span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">TurnipsContract</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$type</span> === <span class="string">&#x27;大頭菜&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Turnips</span>(<span class="variable">$price</span>, <span class="variable">$count</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$type</span> === <span class="string">&#x27;壞掉的大頭菜&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpoiledTurnips</span>(<span class="variable">$price</span>, <span class="variable">$count</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\InvalidArgumentException</span>(<span class="string">&#x27;找不到這種大頭菜分類。&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>再來為了驗證我們所寫的大頭菜靜態工廠是否正確，所以我們要來寫個測試，主要測試的項目如下：</p><ol><li>測試是否能夠正常建立大頭菜。</li><li>測試是否能夠正常建立壞掉的大頭菜。</li><li>測試是否能夠正常計算大頭菜的價格。</li><li>測試是否能夠正常計算壞掉的大頭菜的價格。</li><li>測試是否能夠收到未知的大頭菜。</li></ol><p>StaticFactoryTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class StaticFactoryTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticFactoryTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試是否能夠正常建立大頭菜。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_create_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertInstanceOf</span>(<span class="title class_">Turnips</span>::<span class="variable language_">class</span>, <span class="title class_">TurnipsFactory</span>::<span class="title function_ invoke__">factory</span>(<span class="string">&#x27;大頭菜&#x27;</span>, <span class="number">100</span>, <span class="number">40</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試是否能夠正常建立壞掉的大頭菜。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_create_spoiled_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertInstanceOf</span>(<span class="title class_">SpoiledTurnips</span>::<span class="variable language_">class</span>, <span class="title class_">TurnipsFactory</span>::<span class="title function_ invoke__">factory</span>(<span class="string">&#x27;壞掉的大頭菜&#x27;</span>, <span class="number">100</span>, <span class="number">40</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試是否能夠正常計算大頭菜的價格。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_calculate_price_for_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="title class_">TurnipsFactory</span>::<span class="title function_ invoke__">factory</span>(<span class="string">&#x27;大頭菜&#x27;</span>, <span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試是否能夠正常計算壞掉的大頭菜的價格。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_calculate_price_for_spoiled_turnips</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = <span class="title class_">TurnipsFactory</span>::<span class="title function_ invoke__">factory</span>(<span class="string">&#x27;壞掉的大頭菜&#x27;</span>, <span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">0</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試是否能夠收到未知的大頭菜。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@expectedException</span> \InvalidArgumentException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testException</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">expectException</span>(<span class="title class_">\InvalidArgumentException</span>::<span class="variable language_">class</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">TurnipsFactory</span>::<span class="title function_ invoke__">factory</span>(<span class="string">&#x27;未知的大頭菜&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.050, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (24 tests, 68 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/StaticFactory">技術部落格文章 - 靜態工廠</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Creational/StaticFactory">靜態工廠 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Creational/StaticFactoryTest.php">靜態工廠 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">靜態工廠，顧名思義就是希望這整個工廠都是屬於靜態屬性的，無論到哪裡都以靜態方法來使用這個工廠，就像是在星期日的早上時，會有個曹賣在你的島上走來走去，但無論曹賣走到哪裡，你都可以跟曹賣買大頭菜。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="建立型" scheme="https://blog.init.engineer/tags/%E5%BB%BA%E7%AB%8B%E5%9E%8B/"/>
    
    <category term="靜態工廠" scheme="https://blog.init.engineer/tags/%E9%9D%9C%E6%85%8B%E5%B7%A5%E5%BB%A0/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】簡單工廠 Simple Factory</title>
    <link href="https://blog.init.engineer/posts/SimpleFactory/"/>
    <id>https://blog.init.engineer/posts/SimpleFactory/</id>
    <published>2020-09-14T16:00:00.000Z</published>
    <updated>2020-09-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="簡單工廠-Simple-Factory"><a href="#簡單工廠-Simple-Factory" class="headerlink" title="簡單工廠 Simple Factory"></a>簡單工廠 Simple Factory</h1><p>簡單工廠，這是一種我們真的要買大頭菜的模式，你需要建立一個工廠，這個工廠負責生產特定物件，你只需要把材料丟給工廠，工廠就會把商品生產出來給你，你不需要理會工廠都在做些什麼，就有點像是你跟曹賣買大頭菜，你只需要付鈴錢就好，你不需要去理解曹賣到底是怎麼種大頭菜的。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/SimpleFactory/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>在建立大頭菜工廠之前，我們要先定義大頭菜出來，順便寫上一些功能，像是購買大頭菜、計算大頭菜的價格，這樣工廠才會知道自己要生產什麼。</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turnips</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$price</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $price</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $count</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buy</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$price</span>, <span class="keyword">int</span> <span class="variable">$count</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;price) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;count)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;price * <span class="variable language_">$this</span>-&gt;count;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來我們需要建立工廠，工廠會有個方法是建立大頭菜，並且回傳大頭菜。</p><p>TurnipsFactory.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class TurnipsFactory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TurnipsFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createTurnips</span>(<span class="params"></span>): <span class="title">Turnips</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Turnips</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>最後我們要寫個測試，測試的目的有幾個重要項目：</p><ol><li>測試是否能夠正常建立大頭菜。</li><li>測試建立的大頭菜是否能夠用正常價格買入。</li><li>測試建立的大頭菜是否能夠正常計算價格。</li><li>測試建立的大頭菜如果沒有買過，那是不是能夠回傳 0 鈴錢。</li></ol><p>SimpleFactoryTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SimpleFactoryTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleFactoryTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試是否能夠正常建立大頭菜。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_create_turnip</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = (<span class="keyword">new</span> <span class="title class_">TurnipsFactory</span>())-&gt;<span class="title function_ invoke__">createTurnips</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertInstanceOf</span>(<span class="title class_">Turnips</span>::<span class="variable language_">class</span>, <span class="variable">$turnips</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試建立的大頭菜是否能夠用正常價格買入。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_buy_turnip</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = (<span class="keyword">new</span> <span class="title class_">TurnipsFactory</span>())-&gt;<span class="title function_ invoke__">createTurnips</span>();</span><br><span class="line">        <span class="variable">$price</span> = <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">buy</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$price</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試建立的大頭菜是否能夠正常計算價格。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_calculate_price</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = (<span class="keyword">new</span> <span class="title class_">TurnipsFactory</span>())-&gt;<span class="title function_ invoke__">createTurnips</span>();</span><br><span class="line">        <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">buy</span>(<span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="variable">$price</span> = <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">4000</span>, <span class="variable">$price</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 測試建立的大頭菜如果沒有買過，那是不是能夠回傳 0 鈴錢。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_can_calculate_price_error</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnips</span> = (<span class="keyword">new</span> <span class="title class_">TurnipsFactory</span>())-&gt;<span class="title function_ invoke__">createTurnips</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="number">0</span>, <span class="variable">$turnips</span>-&gt;<span class="title function_ invoke__">calculatePrice</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.050, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (24 tests, 68 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/SimpleFactory">技術部落格文章 - 簡單工廠</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Creational/SimpleFactory">簡單工廠 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Creational/SimpleFactoryTest.php">簡單工廠 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">簡單工廠，這是一種我們真的要買大頭菜的模式，你需要建立一個工廠，這個工廠負責生產特定物件，你只需要把材料丟給工廠，工廠就會把商品生產出來給你，你不需要理會工廠都在做些什麼，就有點像是你跟曹賣買大頭菜，你只需要付鈴錢就好，你不需要去理解曹賣到底是怎麼種大頭菜的。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="建立型" scheme="https://blog.init.engineer/tags/%E5%BB%BA%E7%AB%8B%E5%9E%8B/"/>
    
    <category term="簡單工廠" scheme="https://blog.init.engineer/tags/%E7%B0%A1%E5%96%AE%E5%B7%A5%E5%BB%A0/"/>
    
  </entry>
  
  <entry>
    <title>【PHP 設計模式】單例模式 Singleton Pattern</title>
    <link href="https://blog.init.engineer/posts/SingletonPattern/"/>
    <id>https://blog.init.engineer/posts/SingletonPattern/</id>
    <published>2020-09-13T16:00:00.000Z</published>
    <updated>2020-09-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="單例模式-Singleton-Pattern"><a href="#單例模式-Singleton-Pattern" class="headerlink" title="單例模式 Singleton Pattern"></a>單例模式 Singleton Pattern</h1><p>單例模式，整個應用程式只會有一個實體，這個實體不會重複建立，就有點像是整座島上只有一個曹賣，這個曹賣在你這座島的時間，你可以盡量找他買大頭菜，無論你做什麼事情，大頭菜在這段時間內都不會任意更動，你的曹賣是你的曹賣，不會因為你進去博物館逛一圈再出來而改變。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/posts/SingletonPattern/UML.png" alt="UML"></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>我們需要建立一個大頭菜類別，裡面放著一顆大頭菜。</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Turnips.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Turnips</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Turnips</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="variable">$turnips</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再來我們需要有個方法來獲得這顆大頭菜，並且這顆大頭菜只要被建立過，無論怎麼建立大頭菜，所獲得的物件永遠會是第一顆大頭菜。</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 透過延遲載入的方式來取得大頭菜</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Turnips</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getTurnips</span>(<span class="params"></span>): <span class="title">Turnips</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">static</span>::<span class="variable">$turnips</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">static</span>::<span class="variable">$turnips</span> = <span class="keyword">new</span> <span class="built_in">static</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static</span>::<span class="variable">$turnips</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後為了防止大頭菜被用各種意想不到的 BUG 來建立，所以要設下種種防線。</p><p>Turnips.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不允許自己生產大頭菜，你必須去跟曹賣買</span></span><br><span class="line"><span class="comment"> * 為了防止玩家自己生產大頭菜，必須透過 Turnips::getTurnips() 方法來取得大頭菜</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防止大頭菜被玩家複製</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防止大頭菜被反序列化，這個過程會建立大頭菜的副本</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>最後為了驗證我們前面所撰寫的大頭菜是否正確，我們需要寫個測試，測試建立兩個大頭菜，並且獲取大頭菜物件，比對一下兩個是不是都是大頭菜，以及兩個是不是一樣的大頭菜。</p><p>SingletonPatternTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SingletonPatternTest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonPatternTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立兩個大頭菜，比較兩個是否都是大頭菜，而且兩個大頭菜都是一模一樣的東西。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_uniqueness</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$turnipsA</span> = <span class="title class_">Turnips</span>::<span class="title function_ invoke__">getTurnips</span>();</span><br><span class="line">        <span class="variable">$turnipsB</span> = <span class="title class_">Turnips</span>::<span class="title function_ invoke__">getTurnips</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertInstanceOf</span>(<span class="title class_">Turnips</span>::<span class="variable language_">class</span>, <span class="variable">$turnipsA</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertInstanceOf</span>(<span class="title class_">Turnips</span>::<span class="variable language_">class</span>, <span class="variable">$turnipsB</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertSame</span>(<span class="variable">$turnipsA</span>, <span class="variable">$turnipsB</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後測試的執行結果會獲得如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit Pretty Result Printer 0.28.0 by Codedungeon and contributors.</span><br><span class="line">==&gt; Configuration: ~/php-design-pattern/vendor/codedungeon/phpunit-result-printer/src/phpunit-printer.yml</span><br><span class="line"></span><br><span class="line">PHPUnit 9.2.6 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ==&gt; AbstractFactoryTest        ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; BuilderPatternTest         ✔  ✔  </span><br><span class="line"> ==&gt; FactoryMethodTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; PoolPatternTest            ✔  ✔  </span><br><span class="line"> ==&gt; PrototypePatternTest       ✔  ✔  </span><br><span class="line"> ==&gt; SimpleFactoryTest          ✔  ✔  ✔  ✔  </span><br><span class="line"> ==&gt; SingletonPatternTest       ✔  </span><br><span class="line"> ==&gt; StaticFactoryTest          ✔  ✔  ✔  ✔  ✔  </span><br><span class="line"></span><br><span class="line">Time: 00:00.050, Memory: 6.00 MB</span><br><span class="line"></span><br><span class="line">OK (24 tests, 68 assertions)</span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/Kantai235/php-design-pattern">設計模式不難，找回快樂而已，以大頭菜為例。</a></p><ul><li><a href="https://blog.init.engineer/posts/SingletonPattern">技術部落格文章 - 單例模式</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/DesignPatterns/Creational/SingletonPattern">單例模式 原始碼</a></li><li><a href="https://github.com/Kantai235/php-design-pattern/tree/master/Tests/Creational/SingletonPatternTest.php">單例模式 測試</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://github.com/domnikl/DesignPatternsPHP">DesignPatternsPHP</a></li><li><a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式全集 2018</a></li></ul>]]></content>
    
    
    <summary type="html">單例模式，整個應用程式只會有一個實體，這個實體不會重複建立，就有點像是整座島上只有一個曹賣，這個曹賣在你這座島的時間，你可以盡量找他買大頭菜，無論你做什麼事情，大頭菜在這段時間內都不會任意更動，你的曹賣是你的曹賣，不會因為你進去博物館逛一圈再出來而改變。</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 設計模式" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="設計模式" scheme="https://blog.init.engineer/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="建立型" scheme="https://blog.init.engineer/tags/%E5%BB%BA%E7%AB%8B%E5%9E%8B/"/>
    
    <category term="單例模式" scheme="https://blog.init.engineer/tags/%E5%96%AE%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【業配開箱】十銓 T-Force Xtreem ARGB DDR4</title>
    <link href="https://blog.init.engineer/posts/TForceXtreemArgbDDR4/"/>
    <id>https://blog.init.engineer/posts/TForceXtreemArgbDDR4/</id>
    <published>2020-05-23T16:00:00.000Z</published>
    <updated>2020-05-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="container">    <div class="messaging">        <div class="inbox_msg">            <div class="mesgs">                <div class="msg_history">                    <div class="outgoing_msg">                        <div class="sent_msg">                            <p>你們看，我拿到廠商贊助的記憶體了欸！方方正正的，外觀簡單低調</p>                            <span class="time_date"> 乾太₍₍ ◝(･◡･)◟ ⁾⁾</span>                        </div>                    </div>                    <div class="outgoing_msg">                        <div class="sent_msg">                            <p><img src="/img/posts/TForceXtreemArgbDDR4/1.jpg" /></p>                            <span class="time_date"> 乾太₍₍ ◝(･◡･)◟ ⁾⁾</span>                        </div>                    </div>                    <div class="incoming_msg">                        <div class="incoming_msg_img">                            <img src="/img/avatar.jpg" alt="sunil">                        </div>                        <div class="received_msg">                            <div class="received_withd_msg">                                <p>看起來不錯，有興趣</p>                                <span class="time_date"> 設計師同事</span>                            </div>                        </div>                    </div>                    <div class="outgoing_msg">                        <div class="sent_msg">                            <p>然後插上電後，整條都會閃，整條都是 ARGB 閃亮亮</p>                            <span class="time_date"> 乾太₍₍ ◝(･◡･)◟ ⁾⁾</span>                        </div>                    </div>                    <div class="outgoing_msg">                        <div class="sent_msg">                            <p><img src="/img/posts/TForceXtreemArgbDDR4/2.jpg" /></p>                            <span class="time_date"> 乾太₍₍ ◝(･◡･)◟ ⁾⁾</span>                        </div>                    </div>                    <div class="incoming_msg">                        <div class="incoming_msg_img">                            <img src="/img/avatar.jpg" alt="sunil">                        </div>                        <div class="received_msg">                            <div class="received_withd_msg">                                <p>喔幹，他閃起來我就不喜歡了。</p>                                <span class="time_date"> 設計師同事</span>                            </div>                        </div>                    </div>                    <div class="incoming_msg">                        <div class="incoming_msg_img">                            <img src="/img/avatar.jpg" alt="sunil">                        </div>                        <div class="received_msg">                            <div class="received_withd_msg">                                <p>喔幹，他整條都會閃，超炫砲的啦！</p>                                <span class="time_date"> 工程師同事</span>                            </div>                        </div>                    </div>                    <div class="outgoing_msg">                        <div class="sent_msg">                            <p>然後它也可以關燈</p>                            <span class="time_date"> 乾太₍₍ ◝(･◡･)◟ ⁾⁾</span>                        </div>                    </div>                    <div class="incoming_msg">                        <div class="incoming_msg_img">                            <img src="/img/avatar.jpg" alt="sunil">                        </div>                        <div class="received_msg">                            <div class="received_withd_msg">                                <p>讚啦！</p>                                <span class="time_date"> 設計師同事</span>                            </div>                        </div>                    </div>                    <div class="incoming_msg">                        <div class="incoming_msg_img">                            <img src="/img/avatar.jpg" alt="sunil">                        </div>                        <div class="received_msg">                            <div class="received_withd_msg">                                <p>讚啦！</p>                                <span class="time_date"> 工程師同事</span>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div><style>.container {    width: 100%;    max-width: 960px !important;    padding-right: 15px !important;    padding-left: 15px !important;    margin-right: auto !important;    margin-left: auto !important;}.bg-funky {  background: #ff1744;}.heading {  color: #fff;  margin: 30px;  font-weight: 600;}img {  max-width: 100%;}.inbox_msg {  clear: both;  overflow: hidden;}.top_spac {  margin: 20px 0 0;}.recent_heading {  float: left;  width: 40%;}.headind_srch {  padding: 10px 29px 10px 20px;  overflow: hidden;  border-bottom: 1px solid #c4c4c4;}.recent_heading h4 {  color: #05728f;  font-size: 21px;  margin: auto;}.chat_ib h5 {  font-size: 15px;  color: #464646;  margin: 0 0 8px 0;}.chat_ib h5 span {  font-size: 13px;  float: right;}.chat_ib p {  font-size: 14px;  color: #989898;  margin: auto;}.chat_img {  float: left;  width: 11%;}.chat_ib {  float: left;  padding: 0 0 0 15px;  width: 88%;}.chat_people {  overflow: hidden;  clear: both;}.chat_list {  border-bottom: 1px solid #c4c4c4;  margin: 0;  padding: 18px 16px 10px;}.inbox_chat {  /* height: 550px;  overflow-y: scroll; */}.active_chat {  background: #ebebeb;}.incoming_msg_img {  display: inline-block;  width: 6%;}.received_msg {  display: inline-block;  padding: 0 0 0 10px;  vertical-align: top;  width: 92%;}.received_withd_msg p {  background: #e4e8fb none repeat scroll 0 0;  border-radius: 3px;  color: #646464;  font-size: 18px;  margin: 0;  padding: 5px 10px 5px 12px;  width: 100%;}.time_date {  color: #747474;  display: block;  font-size: 14px;  margin: 3px 0 0;}.received_withd_msg {  width: 70%;}.mesgs {  padding: 40px;}.sent_msg p {  background: #3f51b5 none repeat scroll 0 0;  border-radius: 3px;  font-size: 18px;  margin: 0;  color: #fff;  padding: 5px 10px 5px 12px;  width: 100%;}.outgoing_msg {  overflow: hidden;  margin: 26px 0 26px;}.sent_msg {  float: right;  width: auto;  text-align: right;}.input_msg_write input {  background: rgba(0, 0, 0, 0) none repeat scroll 0 0;  border: medium none;  color: #4c4c4c;  font-size: 15px;  min-height: 48px;  width: 100%;}.type_msg {  border-top: 1px solid #c4c4c4;  position: relative;}.msg_send_btn {  background: #05728f none repeat scroll 0 0;  border: medium none;  border-radius: 50%;  color: #fff;  cursor: pointer;  font-size: 17px;  height: 33px;  position: absolute;  right: 0;  top: 11px;  width: 33px;}.messaging {  background: #fff;}.msg_history {  overflow-y: auto;}.credit {  margin-bottom: 20px;  margin-top: 20px;}.credit a {  color: #fff;  font-weight: 300;  letter-spacing: 2px;  border-bottom: dotted 1px;}</style><hr><h2 id="外觀介紹"><a href="#外觀介紹" class="headerlink" title="外觀介紹"></a>外觀介紹</h2><p>▼ 十銓 T-Force Xtreem ARGB DDR4 外盒包裝<br><img src="/img/posts/TForceXtreemArgbDDR4/3.jpg" alt="外盒"></p><p>▼ 從旁邊推出內盒，內盒有點高質感<br><img src="/img/posts/TForceXtreemArgbDDR4/4.jpg" alt="拆開外盒"></p><p>▼ 打開內盒後，就看到記憶體本體了<br><img src="/img/posts/TForceXtreemArgbDDR4/5.jpg" alt="開箱"></p><p>▼ 記憶體底下放著一條眼鏡布，用來擦記憶體很適合<br><img src="/img/posts/TForceXtreemArgbDDR4/6.png" alt="眼鏡布"></p><p>▼ 記憶體外面包著一層膠膜，撕下的那個聲音有夠悅耳<br><img src="/img/posts/TForceXtreemArgbDDR4/7.jpg" alt="記憶體 獨立攝影"></p><p>▼ 把它交叉立起來<br><img src="/img/posts/TForceXtreemArgbDDR4/8.jpg" alt="記憶體 站立"></p><p>▼ 插上主機板<br><img src="/img/posts/TForceXtreemArgbDDR4/1.jpg" alt="記憶體 未點燈"></p><p>▼ 實際開機後的效果<br><img src="/img/posts/TForceXtreemArgbDDR4/2.jpg" alt="記憶體 點燈"></p><p>▼ 從另一個角度來看記憶體，這大概就是純靠北工程師需求幹話當中所謂黑色的光吧<br><img src="/img/posts/TForceXtreemArgbDDR4/9.jpg" alt="記憶體 點燈"></p><p>▼ 實際點燈的效果</p><iframe width="800" height="600" src="https://www.youtube.com/embed/Kb-GfCd_Bes" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><hr><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>測試平台的配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CPU 處理器    ： AMD Ryzen 9 3900X</span><br><span class="line">MB  主機板    ： Asus ROG Strix X570-E Gaming</span><br><span class="line">RAM 記憶體    ： T-FORCE XTREEM ARGB 8Gx2 3600MHz</span><br><span class="line">PSU 電源供應器： Corsair RM1000X</span><br><span class="line">OS  作業系統  ： Windows 10 Pro (1909) 64Bit</span><br></pre></td></tr></table></figure><p>▼ 在預設 DDR4-2400MHz 下，使用 AIDA64 跑記憶體測試得到以下結果<br><img src="/img/posts/TForceXtreemArgbDDR4/10.png" alt="2400"></p><p>▼ 開啟 D.O.C.P. 調整頻率到 3600MHz 後，使用 AIDA64 跑記憶體測試得到以下結果，讀寫明顯上升了 1.4 快要 1.5 倍。<br><img src="/img/posts/TForceXtreemArgbDDR4/11.png" alt="3600"></p><p>▼ 在記憶體顆粒的部分，使用 Thaiphoon Burner 可以看到 Xtreem 所採用的是 Hynix 的 C-Die 顆粒<br><img src="/img/posts/TForceXtreemArgbDDR4/12.png" alt="Thaiphoon Burner"></p><hr><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>因為我本身是使用 ASUS 的 X570 主機板，所以這裡就安裝 <code>ARMOURY CRATE</code>，使用裡面的 <code>AURA SYNC</code> 來控制 DRAM 的 ARGB 燈光效果，安裝完畢就可以直接使用了，相當方便。</p><p><img src="/img/posts/TForceXtreemArgbDDR4/13.png" alt="AURA SYNC"></p><p>不過廠商的<a href="https://www.teamgroupinc.com/tw/product/xtreem-argb-ddr4">產品說明頁面</a>也有特別標示它們這記憶體能支援多家燈效控制軟體，其中包含了 ASUS Aura Sync &#x2F; GIGABYTE RGB Fusion 2.0 &#x2F; MSI Mystic Light Sync &#x2F; ASROCK-Polychrome Sync。</p><blockquote><p>T-FORCE XTREEM ARGB 電競記憶體支援多家燈效控制軟體<br /><br /><br>T-FORCE XTREEM ARGB 支援 ASUS Aura Sync &#x2F; GIGABYTE RGB Fusion 2.0 &#x2F; MSI Mystic Light Sync &#x2F; ASROCK-Polychrome Sync 軟體[1]，玩家可讓 T-FORCE XTREEM ARGB 電競發光記憶體模組，透過這些燈效控制軟體來控制燈光特效及燈效同步，打造獨特耀眼絢爛色彩美學，呈現光彩奪目的 RGB 系統！<br /><br /><br>[1] 若欲進一步了解上述品牌之燈效控制軟體相關資訊，請洽各軟體開發廠商的官方網頁資訊。<br /><br /><br>資料來源: <a href="https://www.teamgroupinc.com/tw/product/xtreem-argb-ddr4">https://www.teamgroupinc.com/tw/product/xtreem-argb-ddr4</a></p></blockquote><hr><h2 id="商品資訊"><a href="#商品資訊" class="headerlink" title="商品資訊"></a>商品資訊</h2><p><a href="https://www.teamgroupinc.com/tw/product/xtreem-argb-ddr4">https://www.teamgroupinc.com/tw/product/xtreem-argb-ddr4</a></p><hr><h2 id="廠商資訊"><a href="#廠商資訊" class="headerlink" title="廠商資訊"></a>廠商資訊</h2><ul><li>廠商名稱：TEAMGROUP 十銓科技股份有限公司</li><li>廠商電話：0800-821-688</li><li>廠商網址：<a href="https://www.teamgroupinc.com/">www.teamgroupinc.com</a></li><li>Facebook 粉絲專頁：<a href="https://www.facebook.com/teamgroup.tw">十銓科技 Team Group Inc.</a></li></ul>]]></content>
    
    
    <summary type="html">十銓 T-Force Xtreem ARGB DDR4 電競記憶體，全鏡面、冷透光、ＲＧＢ，總之一句話，就是潮！</summary>
    
    
    
    <category term="開箱紀錄" scheme="https://blog.init.engineer/categories/%E9%96%8B%E7%AE%B1%E7%B4%80%E9%8C%84/"/>
    
    
    <category term="業配開箱" scheme="https://blog.init.engineer/tags/%E6%A5%AD%E9%85%8D%E9%96%8B%E7%AE%B1/"/>
    
  </entry>
  
  <entry>
    <title>淺入淺出 PHP 閉包 Closure</title>
    <link href="https://blog.init.engineer/posts/PhpClosureFunction/"/>
    <id>https://blog.init.engineer/posts/PhpClosureFunction/</id>
    <published>2020-02-24T16:00:00.000Z</published>
    <updated>2020-02-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Closure-類別"><a href="#Closure-類別" class="headerlink" title="Closure 類別"></a>Closure 類別</h1><blockquote><p>用於代表 <code>匿名函數</code> 的類別。<br>匿名函數(在 PHP 5.3 中被引入)會產生這個類型的對象。在過去，這個類別被認為是一個實現細節，但現在可以依賴它做一些事情。自 PHP 5.4 起，這個類別帶有一些方法，允許在匿名函數建立後對其進行更多的控制。<br>除了此處列出的方法外，還有一個 <code>__invoke</code> 方法。這是為了與其他實現了 <code>__invoke()</code> 魔術方法的對象保持一致性，但調用匿名函數的過程與它無關。</p><ul><li><a href="https://www.php.net/manual/en/class.closure.php">PHP: Closure - Manual</a></li></ul></blockquote><p>直接省略前言，畢竟會 Google PHP、Closure、閉包之類的，然後跑來這裏讀文章的人，通常已經知道自己要什麼了，所以我們就直接進入主題吧。</p><h1 id="閉包你是-WTF"><a href="#閉包你是-WTF" class="headerlink" title="閉包你是 WTF ?"></a>閉包你是 WTF ?</h1><p>如果我們希望有個功能是輸出「Hello $變數」，那我們會很直覺的直接 <code>echo &quot;Hello $變數&quot;</code> 來解決，如果思考到重複使用的話，可能就會把這段獨立出來變成一個方法，直接拿官方文件的範例來講的話，那就會像這樣：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createGreeter</span>(<span class="params"><span class="variable">$who</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$who</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hello <span class="subst">$who</span>&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$greeter</span> = <span class="title function_ invoke__">createGreeter</span>(<span class="string">&quot;World&quot;</span>);</span><br><span class="line"><span class="variable">$greeter</span>(); <span class="comment">// Hello World</span></span><br></pre></td></tr></table></figure><p>之後如果要重複使用的話，只要不斷 new 一個閉包，並且去執行閉包，那麼就可以做到重複使用同樣的功能。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$小明 = <span class="title function_ invoke__">createGreeter</span>(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">$小明(); <span class="comment">// Hello 小明</span></span><br><span class="line"></span><br><span class="line">$小美 = <span class="title function_ invoke__">createGreeter</span>(<span class="string">&quot;小美&quot;</span>);</span><br><span class="line">$小美(); <span class="comment">// Hello 小美</span></span><br><span class="line"></span><br><span class="line">$虛空雷神獸EX = <span class="title function_ invoke__">createGreeter</span>(<span class="string">&quot;虛空雷神獸EX&quot;</span>);</span><br><span class="line">$虛空雷神獸<span class="title function_ invoke__">EX</span>(); <span class="comment">// Hello 虛空雷神獸EX</span></span><br></pre></td></tr></table></figure><p>但這樣會變成要不斷建立閉包、執行閉包，所以如果要把這段程式碼精簡化的話，那麼直接在建立方法同時直接賦予到變數。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hello</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$who</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello <span class="subst">$who</span>&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$hello</span>(<span class="string">&quot;小明&quot;</span>); <span class="comment">// Hello 小明</span></span><br></pre></td></tr></table></figure><p>接下來就來個簡單的小範例，我們在 <code>model</code> 當中寫個 <code>scope</code> 方法來提供模糊搜尋，把 <code>Builder</code> 丟進去處理模糊搜尋，最後再把 <code>Builder</code> 丟回來給我。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   \Illuminate\Database\Eloquent\Builder $query</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   string  $column</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   string  $value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   string  $side</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   boolean $isNotLike</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   boolean $isAnd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  \Illuminate\Database\Eloquent\Builder</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopeLike</span>(<span class="params">Builder <span class="variable">$query</span>, <span class="variable">$column</span>, <span class="variable">$value</span>, <span class="variable">$side</span> = <span class="string">&#x27;both&#x27;</span>, <span class="variable">$isNotLike</span> = <span class="literal">false</span>, <span class="variable">$isAnd</span> = <span class="literal">true</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$operator</span> = <span class="variable">$isNotLike</span> ? <span class="string">&#x27;not like&#x27;</span> : <span class="string">&#x27;like&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 使用閉包將字串中包含萬用字元的內容取代為常數字元。</span></span><br><span class="line">    <span class="variable">$escape_like_str</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(</span><br><span class="line">            [<span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;_&#x27;</span>], </span><br><span class="line">            [<span class="string">&#x27;!!&#x27;</span>, <span class="string">&#x27;!%&#x27;</span>, <span class="string">&#x27;!_&#x27;</span>],</span><br><span class="line">            <span class="variable">$str</span></span><br><span class="line">        );</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 根據模糊方式來彙整出相對應的搜尋內容</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$side</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;none&#x27;</span>:</span><br><span class="line">            <span class="variable">$value</span> = <span class="variable">$escape_like_str</span>(<span class="variable">$value</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;before&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;left&#x27;</span>:</span><br><span class="line">            <span class="variable">$value</span> = <span class="string">&quot;%<span class="subst">&#123;$escape_like_str($value)&#125;</span>&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;after&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;right&#x27;</span>:</span><br><span class="line">            <span class="variable">$value</span> = <span class="string">&quot;<span class="subst">&#123;$escape_like_str($value)&#125;</span>%&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;both&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;all&#x27;</span>:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="variable">$value</span> = <span class="string">&quot;%<span class="subst">&#123;$escape_like_str($value)&#125;</span>%&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$isAnd</span> ? <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="variable">$column</span>, <span class="variable">$operator</span>, <span class="variable">$value</span>) : <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">orWhere</span>(<span class="variable">$column</span>, <span class="variable">$operator</span>, <span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="大-Guy-4-醬汁吧-ง๑-•̀-•́-ง"><a href="#大-Guy-4-醬汁吧-ง๑-•̀-•́-ง" class="headerlink" title="大 Guy 4 醬汁吧 (ง๑ •̀_•́)ง"></a>大 Guy 4 醬汁吧 (ง๑ •̀_•́)ง</h1>]]></content>
    
    
    <summary type="html">匿名函數(在 PHP 5.3 中被引入)會產生這個類型的對象。在過去，這個類別被認為是一個實現細節，但現在可以依賴它做一些事情。自 PHP 5.4 起，這個類別帶有一些方法，允許在匿名函數建立後對其進行更多的控制 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="PHP 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/PHP-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="PHP" scheme="https://blog.init.engineer/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Swift 當中透過 String Format 格式來簡單處理數值內容？</title>
    <link href="https://blog.init.engineer/posts/SwiftStringFormatTutorial/"/>
    <id>https://blog.init.engineer/posts/SwiftStringFormatTutorial/</id>
    <published>2019-08-25T16:00:00.000Z</published>
    <updated>2019-08-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在開發應用程式時，我們經常會需要做數值轉換成特定格式，例如將小數點數值取兩位就好，或者整數補 0 到十位數，諸如此類的功能，接下來我們就直接進入實際應用。</p><h2 id="實際應用"><a href="#實際應用" class="headerlink" title="實際應用"></a>實際應用</h2><h4 id="不做任何處理，直接將-Float-數值輸出"><a href="#不做任何處理，直接將-Float-數值輸出" class="headerlink" title="不做任何處理，直接將 Float 數值輸出"></a>不做任何處理，直接將 Float 數值輸出</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> floatValue: <span class="type">Float</span>! <span class="operator">=</span> <span class="number">1.23456789</span></span><br><span class="line"><span class="keyword">let</span> formatString: <span class="type">String</span>! <span class="operator">=</span> <span class="type">String</span>(format: <span class="string">&quot;%f&quot;</span>, floatValue)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Output: 1.234568</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="將-Float-數值捨去小數點至二位數"><a href="#將-Float-數值捨去小數點至二位數" class="headerlink" title="將 Float 數值捨去小數點至二位數"></a>將 Float 數值捨去小數點至二位數</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> floatValue: <span class="type">Float</span>! <span class="operator">=</span> <span class="number">1.23456789</span></span><br><span class="line"><span class="keyword">let</span> formatString: <span class="type">String</span>! <span class="operator">=</span> <span class="type">String</span>(format: <span class="string">&quot;%.2f&quot;</span>, floatValue)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Output: 1.23</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="將-Int-數值轉為-16-進位"><a href="#將-Int-數值轉為-16-進位" class="headerlink" title="將 Int 數值轉為 16 進位"></a>將 Int 數值轉為 16 進位</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hexValue: <span class="type">Int</span>! <span class="operator">=</span> <span class="number">255</span></span><br><span class="line"><span class="keyword">let</span> formatString: <span class="type">String</span>! <span class="operator">=</span> <span class="type">String</span>(format: <span class="string">&quot;%x&quot;</span>, hexValue)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Output: ff</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="將-Int-數值轉為-16-進位，並且補-0-到六位數"><a href="#將-Int-數值轉為-16-進位，並且補-0-到六位數" class="headerlink" title="將 Int 數值轉為 16 進位，並且補 0 到六位數"></a>將 Int 數值轉為 16 進位，並且補 0 到六位數</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hexValue: <span class="type">Int</span>! <span class="operator">=</span> <span class="number">255</span></span><br><span class="line"><span class="keyword">let</span> formatString: <span class="type">String</span>! <span class="operator">=</span> <span class="type">String</span>(format: <span class="string">&quot;%06x&quot;</span>, hexValue)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Output: 0000ff</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="不做任何處理，直接將-Int-數值輸出"><a href="#不做任何處理，直接將-Int-數值輸出" class="headerlink" title="不做任何處理，直接將 Int 數值輸出"></a>不做任何處理，直接將 Int 數值輸出</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> intValue: <span class="type">Int</span>! <span class="operator">=</span> <span class="number">123</span></span><br><span class="line"><span class="keyword">let</span> formatString: <span class="type">String</span>! <span class="operator">=</span> <span class="type">String</span>(format: <span class="string">&quot;%d&quot;</span>, intValue)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Output: 123</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="不做任何處理，直接將-Int-數值輸出，並且補-0-到六位數"><a href="#不做任何處理，直接將-Int-數值輸出，並且補-0-到六位數" class="headerlink" title="不做任何處理，直接將 Int 數值輸出，並且補 0 到六位數"></a>不做任何處理，直接將 Int 數值輸出，並且補 0 到六位數</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> intValue: <span class="type">Int</span>! <span class="operator">=</span> <span class="number">123</span></span><br><span class="line"><span class="keyword">let</span> formatString: <span class="type">String</span>! <span class="operator">=</span> <span class="type">String</span>(format: <span class="string">&quot;%06d&quot;</span>, intValue)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Output: 000123</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><hr><h2 id="番外實驗篇"><a href="#番外實驗篇" class="headerlink" title="番外實驗篇"></a>番外實驗篇</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> floatValue: <span class="type">Float</span>! <span class="operator">=</span> <span class="number">3.33333333</span></span><br><span class="line"><span class="keyword">let</span> formatString: <span class="type">String</span>! <span class="operator">=</span> <span class="type">String</span>(format: <span class="string">&quot;%f&quot;</span>, floatValue)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Output: 3.333333</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> floatValue: <span class="type">Float</span>! <span class="operator">=</span> <span class="number">4.44444444</span></span><br><span class="line"><span class="keyword">let</span> formatString: <span class="type">String</span>! <span class="operator">=</span> <span class="type">String</span>(format: <span class="string">&quot;%f&quot;</span>, floatValue)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Output: 4.444445</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>所以這意思是小數點第六位後會以四捨五入的方式來進位囉？這時候我產生了這個疑問，所以在 <code>3.33333345</code> 會因為四捨五入而進位成 <code>3.333334</code> 嗎？於是又做了一些額外實驗。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> floatValue: <span class="type">Float</span>! <span class="operator">=</span> <span class="number">3.33333345</span></span><br><span class="line"><span class="keyword">let</span> formatString: <span class="type">String</span>! <span class="operator">=</span> <span class="type">String</span>(format: <span class="string">&quot;%f&quot;</span>, floatValue)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Output: 3.333333</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> floatValue: <span class="type">Float</span>! <span class="operator">=</span> <span class="number">3.33333355</span></span><br><span class="line"><span class="keyword">let</span> formatString: <span class="type">String</span>! <span class="operator">=</span> <span class="type">String</span>(format: <span class="string">&quot;%f&quot;</span>, floatValue)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Output: 3.333333</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> floatValue: <span class="type">Float</span>! <span class="operator">=</span> <span class="number">3.33333366</span></span><br><span class="line"><span class="keyword">let</span> formatString: <span class="type">String</span>! <span class="operator">=</span> <span class="type">String</span>(format: <span class="string">&quot;%f&quot;</span>, floatValue)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Output: 3.333334</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> floatValue: <span class="type">Float</span>! <span class="operator">=</span> <span class="number">3.33333361</span></span><br><span class="line"><span class="keyword">let</span> formatString: <span class="type">String</span>! <span class="operator">=</span> <span class="type">String</span>(format: <span class="string">&quot;%f&quot;</span>, floatValue)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Output: 3.333333</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> floatValue: <span class="type">Float</span>! <span class="operator">=</span> <span class="number">3.33333362</span></span><br><span class="line"><span class="keyword">let</span> formatString: <span class="type">String</span>! <span class="operator">=</span> <span class="type">String</span>(format: <span class="string">&quot;%f&quot;</span>, floatValue)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Output: 3.333334</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>這個現象頗為奇妙的，總之先記錄起來，理論上應該無傷大雅。</p>]]></content>
    
    
    <summary type="html">在開發應用程式時，我們經常會需要做數值轉換成特定格式，例如將小數點數值取兩位就好，或者整數補 0 到十位數，諸如此類的功能，接下來我們就直接進入實際應用 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="iOS 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/iOS-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="Swift" scheme="https://blog.init.engineer/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>線上 String 字串亂數產生器</title>
    <link href="https://blog.init.engineer/posts/StringRandomGenerator/"/>
    <id>https://blog.init.engineer/posts/StringRandomGenerator/</id>
    <published>2019-07-20T16:00:00.000Z</published>
    <updated>2019-07-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<style>    /* The switch - the box around the slider */    .switch {        position: relative;        display: inline-block;        width: 60px;        height: 34px;    }    /* Hide default HTML checkbox */    .switch input {        opacity: 0;        width: 0;        height: 0;    }    /* The slider */    .slider {        position: absolute;        cursor: pointer;        top: 0;        left: 0;        right: 0;        bottom: 0;        background-color: #ccc;        -webkit-transition: .4s;        transition: .4s;    }    .slider:before {        position: absolute;        content: "";        height: 26px;        width: 26px;        left: 4px;        bottom: 4px;        background-color: white;        -webkit-transition: .4s;        transition: .4s;    }    input:checked + .slider {        background-color: #2196F3;    }    input:focus + .slider {        box-shadow: 0 0 1px #2196F3;    }    input:checked + .slider:before {        -webkit-transform: translateX(26px);        -ms-transform: translateX(26px);        transform: translateX(26px);    }    /* Rounded sliders */    .slider.round {        border-radius: 34px;    }    .slider.round:before {        border-radius: 50%;    }    .decode_textarea {        border: 6px solid #427035 !important;        border-top-width: 1px;        border-right-width: 1px;        border-bottom-width: 1px;        border-left-width: 1px;    }    .container {        margin: 0px auto;        max-width: 800px;    }    textarea {        margin-bottom: 0px !important;        border-radius: 12px;    }    .contact-form button[type="button"] {        display: inline;        padding: 19px 39px 18px 39px;        color: #fff;        font-size: 1.125rem;        width: 100%;        border: 1px solid #ba0009;            border-top-width: 1px;            border-right-width: 1px;            border-bottom-width: 1px;            border-left-width: 1px;        /* margin: 0px auto; */        margin-top: .625rem;        margin-bottom: .625rem;        cursor: pointer;        -webkit-transition: all .3s;        transition: all .3s;        outline: none;    }    .contact-form .generate {        background: #086770;        border: 6px solid #032629 !important;        border-width: 2px 4px 4px 2px !important;    }    .generate_number {        -webkit-box-sizing: border-box;        box-sizing: border-box;        outline: none;        display: block;        color: #333;        width: 100%;        padding: 7px;        border: none;            border-bottom-color: currentcolor;            border-bottom-style: none;            border-bottom-width: medium;        border-bottom: 1px solid #ddd;        margin-bottom: 10px;        font-family: inherit;        font-size: 1.125rem;        height: 2.813rem;    }    .generate_textarea {        -webkit-box-sizing: border-box;        box-sizing: border-box;        outline: none;        display: block;        color: #333;        width: 100%;        height: auto !important;        padding: 7px;        margin-top: 24px;        border: none;            border-bottom-color: currentcolor;            border-bottom-style: none;            border-bottom-width: medium;        border-bottom: 1px solid #ddd;        margin-bottom: 10px;        font-family: inherit;        font-size: 1.125rem;        height: 2.813rem;    }</style><p><img src="/img/posts/StringRandomGenerator/banner.png" alt="線上 String 字串亂數產生器 Banner"></p><!-- Rectangular switch --><div style="white-space: nowrap; padding-top: 16px; padding-bottom: 16px;">    <label class="switch">        <input type="checkbox" id="number_checked" checked>        <span class="slider round"></span>    </label>    <p style="display: inline; font-size: 1.2rem; vertical-align: middle;">亂數當中包含「數字（0123456789）」</p></div><!-- Rounded switch --><div style="white-space: nowrap; padding-bottom: 16px;">    <label class="switch">        <input type="checkbox" id="capital_checked" checked>        <span class="slider round"></span>    </label>    <p style="display: inline; font-size: 1.2rem; vertical-align: middle;">亂數當中包含「大寫英文（ABCDEFGHIJKLMNOPQRSTUVWXTZ）」</p></div><!-- Rounded switch --><div style="white-space: nowrap; padding-bottom: 16px;">    <label class="switch">        <input type="checkbox" id="small_checked" checked>        <span class="slider round"></span>    </label>    <p style="display: inline; font-size: 1.2rem; vertical-align: middle;">亂數當中包含「小寫英文（abcdefghijklmnopqrstuvwxyz）」</p></div><!-- Rounded switch --><div style="white-space: nowrap; padding-bottom: 16px;">    <label class="switch">        <input type="checkbox" id="number_index">        <span class="slider round"></span>    </label>    <p style="display: inline; font-size: 1.2rem; vertical-align: middle;">亂數的開頭加個數次（e.g.: 1. 2. 3. ...）</p></div><div class="container">    <div id="form" class="contact-form">        <label>亂數產生長度</label>        <input type="number" class="generate_number" id="generate_number_1" name="generate_number_1" value="64">        <label>亂數產生數量</label>        <input type="number" class="generate_number" id="generate_number_2" name="generate_number_2" value="1">        <button type="button" class="generate" id="generate" onclick="generate()">產生亂數</button>        <textarea type="text" class="generate_textarea" id="generate_value" name="generate_value" placeholder="這裡會生出亂數。" rows="12"></textarea>    </div></div><script>    /**     * @return string|null     */    function random_string() {        var number_checked  = document.getElementById('number_checked').checked,            capital_checked = document.getElementById('capital_checked').checked,            small_checked   = document.getElementById('small_checked').checked;        var number_chars  = '0123456789',            capital_chars = 'ABCDEFGHIJKLMNOPQRSTUVWXTZ',            small_chars   = 'abcdefghijklmnopqrstuvwxyz',            chars         = '';        if (number_checked) { chars += number_chars; }        if (capital_checked) { chars += capital_chars; }        if (small_checked) { chars += small_chars; }        if (chars == '') {            return null;        }        var random_string = '';        for (var i = 0; i < document.getElementById('generate_number_1').value; i++) {            var rnum = Math.floor(Math.random() * chars.length);            random_string += chars.substring(rnum, rnum + 1);        }        return random_string;    }    /**     * @return void     */    function generate() {        var result = '';        for (var i = 1; i <= document.getElementById('generate_number_2').value; i++) {            if (document.getElementById('number_index').checked) {                result += i + '. ' + random_string() + '\n';            } else {                result += random_string() + '\n';            }        }        document.getElementById('generate_value').value = result;        var textarea = document.createElement('textarea');        textarea.textContent = result;        document.body.appendChild(textarea);        var selection = document.getSelection();        var range = document.createRange();                range.selectNode(textarea);        selection.removeAllRanges();        selection.addRange(range);                console.log('copy success', document.execCommand('copy'));        selection.removeAllRanges();        document.body.removeChild(textarea);        Snackbar.show({text: '已自動複製內容。'});    }</script>]]></content>
    
    
    <summary type="html">一款簡單的 String 字串線上產生器，可用來產生自定義的長度、大寫小寫英文、數字、字元符號 ... 通通自定義。</summary>
    
    
    
    <category term="線上小工具" scheme="https://blog.init.engineer/categories/%E7%B7%9A%E4%B8%8A%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="String" scheme="https://blog.init.engineer/tags/String/"/>
    
    <category term="Random" scheme="https://blog.init.engineer/tags/Random/"/>
    
    <category term="Generator" scheme="https://blog.init.engineer/tags/Generator/"/>
    
  </entry>
  
  <entry>
    <title>線上編碼、解碼器 for Unicode</title>
    <link href="https://blog.init.engineer/posts/ToolsUnicode/"/>
    <id>https://blog.init.engineer/posts/ToolsUnicode/</id>
    <published>2019-07-16T16:00:00.000Z</published>
    <updated>2019-07-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<style type="text/css" media="screen">    .container {        margin: 0px auto;        max-width: 800px;    }    textarea {        margin-bottom: 0px !important;        border-radius: 12px;    }    .contact-form button[type="button"] {        display: inline;        padding: 19px 39px 18px 39px;        color: #fff;        font-size: 1.125rem;        width: 49%;        border: 1px solid #ba0009;            border-top-width: 1px;            border-right-width: 1px;            border-bottom-width: 1px;            border-left-width: 1px;        /* margin: 0px auto; */        margin-top: .625rem;        margin-bottom: .625rem;        cursor: pointer;        -webkit-transition: all .3s;        transition: all .3s;        outline: none;    }    select {        padding: 9px 18px 9px 18px;        width: 100%;        /* border: 6px solid #032629 !important; */        /* border-width: 2px 4px 4px 2px !important; */        border-radius: 12px;        margin: .625rem;        padding: .625rem;    }    .contact-form .encode {        width: 100%;        height: auto !important;        background: #086770;        border: 6px solid #032629 !important;        border-width: 2px 4px 4px 2px !important;    }    .contact-form .decode {        width: 100%;        height: auto !important;        background: #427035;        border: 6px solid #243e1d !important;        border-width: 2px 4px 4px 2px !important;    }    .encode_textarea {        width: 100%;        height: 240px !important;        border: 6px solid #086770 !important;            border-top-width: 1px;            border-right-width: 1px;            border-bottom-width: 1px;            border-left-width: 1px;    }    .decode_textarea {        width: 100%;        height: 240px !important;        border: 6px solid #427035 !important;        border-top-width: 1px;        border-right-width: 1px;        border-bottom-width: 1px;        border-left-width: 1px;    }</style><p><img src="/img/posts/ToolsUnicode/banner.png" alt="線上編碼、解碼器 for Unicode Banner"></p><div class="container" style="padding-top: 16px; padding-bottom: 16px;">    <div id="form" class="contact-form">        <textarea type="text" class="encode_textarea" id="encode_value" name="encode_value" placeholder="在此輸入您想要「編碼」為 URL 的文本內容 ..."></textarea>        <button type="button" class="encode" id="encode" onclick="encode()">編碼 Encode</button>        <button type="button" class="decode" id="decode" onclick="decode()">解碼 Decode</button>        <textarea type="text" class="decode_textarea" id="decode_value" name="decode_value" placeholder="在此輸入您想要「解碼」為文本的 URL 內容 ..."></textarea>    </div></div><script>    function encode() {        var sMyInput = document.getElementById('encode_value').value;        var sMyUnicode = sMyInput.toUnicode();        document.getElementById('decode_value').value = sMyUnicode;    };    function decode() {        var sMyUnicode = document.getElementById('decode_value').value;        var r = /\\u([\d\w]{4})/gi;        sMyUnicode = sMyUnicode.replace(r, function (match, grp) {            return String.fromCharCode(parseInt(grp, 16));        } );        sMyUnicode = unescape(sMyUnicode);        document.getElementById('encode_value').value = sMyUnicode    };    String.prototype.toUnicode = function() {        var result = "";        for(var i = 0; i < this.length; i++) {            // Assumption: all characters are < 0xffff            result += "\\u" + ("000" + this[i].charCodeAt(0).toString(16)).substr(-4);        }        return result;    };</script><blockquote><h1 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h1><p>Unicode（中文：萬國碼、國際碼、統一碼、單一碼）是電腦科學領域裡的一項業界標準。它對世界上大部分的文字系統進行了整理、編碼，使得電腦可以用更為簡單的方式來呈現和處理文字。<br>Unicode 伴隨著通用字元集的標準而發展，同時也以書本的形式對外發表。Unicode 至今仍在不斷增修，每個新版本都加入更多新的字元。目前最新的版本為 2019 年 5 月公布的 12.1.0，已經收錄超過13萬個字元（第十萬個字元在 2005 年獲採納）。Unicode 涵蓋的資料除了視覺上的字形、編碼方法、標準的字元編碼外，還包含了字元特性，如大小寫字母。<br>Unicode 發展由非營利機構統一碼聯盟負責，該機構致力於讓 Unicode 方案取代既有的字元編碼方案。因為既有的方案往往空間非常有限，亦不適用於多語環境。<br>Unicode 備受認可，並廣泛地應用於電腦軟體的國際化與在地化過程。有很多新科技，如可延伸標示語言（Extensible Markup Language，簡稱：XML）、Java 程式語言以及現代的作業系統，都採用 Unicode 編碼。</p><ul><li>資料來源：<a href="https://zh.wikipedia.org/wiki/url">統一資源定位符 - 維基百科，自由的百科全書</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">一款簡單的線上編碼、解碼器，Unicode 是一種電腦科學領域裡的一項業界標準。它對世界上大部分的文字系統進行了整理、編碼，使得電腦可以用更為簡單的方式來呈現和處理文字。</summary>
    
    
    
    <category term="線上小工具" scheme="https://blog.init.engineer/categories/%E7%B7%9A%E4%B8%8A%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Tools" scheme="https://blog.init.engineer/tags/Tools/"/>
    
    <category term="Unicode" scheme="https://blog.init.engineer/tags/Unicode/"/>
    
  </entry>
  
  <entry>
    <title>線上編碼、解碼器 for URL</title>
    <link href="https://blog.init.engineer/posts/ToolsURL/"/>
    <id>https://blog.init.engineer/posts/ToolsURL/</id>
    <published>2019-07-13T16:00:00.000Z</published>
    <updated>2019-07-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<style type="text/css" media="screen">    .container {        margin: 0px auto;        max-width: 800px;    }    textarea {        margin-bottom: 0px !important;        border-radius: 12px;    }    .contact-form button[type="button"] {        display: inline;        padding: 19px 39px 18px 39px;        color: #fff;        font-size: 1.125rem;        width: 49%;        border: 1px solid #ba0009;            border-top-width: 1px;            border-right-width: 1px;            border-bottom-width: 1px;            border-left-width: 1px;        /* margin: 0px auto; */        margin-top: .625rem;        margin-bottom: .625rem;        cursor: pointer;        -webkit-transition: all .3s;        transition: all .3s;        outline: none;    }    select {        padding: 9px 18px 9px 18px;        width: 100%;        /* border: 6px solid #032629 !important; */        /* border-width: 2px 4px 4px 2px !important; */        border-radius: 12px;        margin: .625rem;        padding: .625rem;    }    .contact-form .encode {        width: 100%;        height: auto !important;        background: #086770;        border: 6px solid #032629 !important;        border-width: 2px 4px 4px 2px !important;    }    .contact-form .decode {        width: 100%;        height: auto !important;        background: #427035;        border: 6px solid #243e1d !important;        border-width: 2px 4px 4px 2px !important;    }    .encode_textarea {        width: 100%;        height: 240px !important;        border: 6px solid #086770 !important;            border-top-width: 1px;            border-right-width: 1px;            border-bottom-width: 1px;            border-left-width: 1px;    }    .decode_textarea {        width: 100%;        height: 240px !important;        border: 6px solid #427035 !important;        border-top-width: 1px;        border-right-width: 1px;        border-bottom-width: 1px;        border-left-width: 1px;    }</style><p><img src="/img/posts/ToolsURL/banner.png" alt="線上編碼、解碼器 for URL Banner"></p><div class="container" style="padding-top: 16px; padding-bottom: 16px;">    <div id="form" class="contact-form">        <textarea type="text" class="encode_textarea" id="encode_value" name="encode_value" placeholder="在此輸入您想要「編碼」為 URL 的文本內容 ..."></textarea>        <button type="button" class="encode" id="encode" onclick="encode()">編碼 Encode</button>        <button type="button" class="decode" id="decode" onclick="decode()">解碼 Decode</button>        <textarea type="text" class="decode_textarea" id="decode_value" name="decode_value" placeholder="在此輸入您想要「解碼」為文本的 URL 內容 ..."></textarea>    </div></div><script>    function encode () {        var sMyInput = document.getElementById('encode_value').value;        var sMyURL = encodeURI(sMyInput);        document.getElementById('decode_value').value = sMyURL;    };    function decode () {        var sMyURL = document.getElementById('decode_value').value;        var sMyOutput = decodeURI(sMyURL);        document.getElementById('encode_value').value = sMyOutput;    };</script><blockquote><h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><p>統一資源定位符（英語：Uniform Resource Locator，縮寫：URL；或稱統一資源定位器、定位位址、URL 位址，俗稱網頁位址或簡稱網址）是網際網路上標準的資源的位址（Address），如同在網路上的門牌。它最初是由提姆·柏內茲-李發明用來作為全球資訊網的位址，現在它已經被全球資訊網協會編制為網際網路標準 RFC 1738。<br>在網際網路的歷史上，統一資源定位符的發明是一個非常基礎的步驟。統一資源定位符的語法是一般的，可延伸的，它使用美國資訊交換標準程式碼的一部分來表示網際網路的位址。統一資源定位符的開始，一般會標誌著一個電腦網路所使用的網路協定。</p><ul><li>資料來源：<a href="https://zh.wikipedia.org/wiki/url">統一資源定位符 - 維基百科，自由的百科全書</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">一款簡單的線上編碼、解碼器，URL 是一種網際網路上標準的資源的位址（Address），如同在網路上的門牌。</summary>
    
    
    
    <category term="線上小工具" scheme="https://blog.init.engineer/categories/%E7%B7%9A%E4%B8%8A%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Tools" scheme="https://blog.init.engineer/tags/Tools/"/>
    
    <category term="URL" scheme="https://blog.init.engineer/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>線上編碼、解碼器 for Base64</title>
    <link href="https://blog.init.engineer/posts/ToolsBase64/"/>
    <id>https://blog.init.engineer/posts/ToolsBase64/</id>
    <published>2019-07-08T16:00:00.000Z</published>
    <updated>2019-07-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<style type="text/css" media="screen">    .container {        margin: 0px auto;        max-width: 800px;    }    textarea {        margin-bottom: 0px !important;        border-radius: 12px;    }    .contact-form button[type="button"] {        display: inline;        padding: 19px 39px 18px 39px;        color: #fff;        font-size: 1.125rem;        width: 49%;        border: 1px solid #ba0009;            border-top-width: 1px;            border-right-width: 1px;            border-bottom-width: 1px;            border-left-width: 1px;        /* margin: 0px auto; */        margin-top: .625rem;        margin-bottom: .625rem;        cursor: pointer;        -webkit-transition: all .3s;        transition: all .3s;        outline: none;    }    select {        padding: 9px 18px 9px 18px;        width: 100%;        /* border: 6px solid #032629 !important; */        /* border-width: 2px 4px 4px 2px !important; */        border-radius: 12px;        margin: .625rem;        padding: .625rem;    }    .contact-form .encode {        width: 100%;        height: auto !important;        background: #086770;        border: 6px solid #032629 !important;        border-width: 2px 4px 4px 2px !important;    }    .contact-form .decode {        width: 100%;        height: auto !important;        background: #427035;        border: 6px solid #243e1d !important;        border-width: 2px 4px 4px 2px !important;    }    .encode_textarea {        width: 100%;        height: 240px !important;        border: 6px solid #086770 !important;            border-top-width: 1px;            border-right-width: 1px;            border-bottom-width: 1px;            border-left-width: 1px;    }    .decode_textarea {        width: 100%;        height: 240px !important;        border: 6px solid #427035 !important;            border-top-width: 1px;            border-right-width: 1px;            border-bottom-width: 1px;            border-left-width: 1px;    }</style><p><img src="/img/posts/ToolsBase64/banner.png" alt="線上編碼、解碼器 for Base64 Banner"></p><div class="container" style="padding-top: 16px; padding-bottom: 16px;">    <h3 style="margin-top: 1.625rem;margin-bottom: .125rem;">選擇編碼格式</h3>    <select id="select" name="select">        <option value="UTF-8">UTF-8 (預設)</option>        <option value="UTF-16">UTF-16</option>        <option value="Unicode">Unicode</option>    </select>    <div id="form" class="contact-form">        <textarea type="text" class="encode_textarea" id="encode_value" name="encode_value" placeholder="在此輸入您想要「編碼」為 Base64 的文本內容 ..."></textarea>        <button type="button" class="encode" id="encode" onclick="encode()">編碼 Encode</button>        <button type="button" class="decode" id="decode" onclick="decode()">解碼 Decode</button>        <textarea type="text" class="decode_textarea" id="decode_value" name="decode_value" placeholder="在此輸入您想要「解碼」為文本的 Base64 內容 ..."></textarea>    </div></div><script>    /**     * @return void     */    function encode() {        var sMyInput = document.getElementById('encode_value').value;        switch (document.getElementById('select').value) {            case 'UTF-8':                var aMyUTF8Input = strToUTF8Arr(sMyInput);                var sMyBase64 = base64EncArr(aMyUTF8Input);                break;            case 'UTF-16':                var sMyBase64 = btoaUTF16(sMyInput);                break;            case 'Unicode':                var sMyBase64 = b64EncodeUnicode(sMyInput);                break;        }        document.getElementById('decode_value').value = sMyBase64;    };    /**     * @return void     */    function decode() {        var sMyBase64 = document.getElementById('decode_value').value;        switch (document.getElementById('select').value) {            case 'UTF-8':                var aMyUTF8Output = base64DecToArr(sMyBase64);                var sMyOutput = UTF8ArrToStr(aMyUTF8Output);                break;            case 'UTF-16':                var sMyOutput = atobUTF16(sMyBase64);                break;            case 'Unicode':                var sMyOutput = b64DecodeUnicode(sMyBase64);                break;        }        document.getElementById('encode_value').value = sMyOutput;    };    /**     * Array of bytes to base64 string decoding     *      * @param char nChr     *      * @return char     */    function b64ToUint6(nChr) {        return nChr > 64 && nChr < 91 ?            nChr - 65          : nChr > 96 && nChr < 123 ?            nChr - 71          : nChr > 47 && nChr < 58 ?            nChr + 4          : nChr === 43 ?            62          : nChr === 47 ?            63          :            0;    }    /**     * @param string sBase64     * @param int nBlockSize     *      * @return      */    function base64DecToArr(sBase64, nBlockSize) {        var sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, ""), nInLen = sB64Enc.length,            nOutLen = nBlockSize ? Math.ceil((nInLen * 3 + 1 >>> 2) / nBlockSize) * nBlockSize : nInLen * 3 + 1 >>> 2, aBytes = new Uint8Array(nOutLen);        for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {            nMod4 = nInIdx & 3;            nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;            if (nMod4 === 3 || nInLen - nInIdx === 1) {                for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {                    aBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;                }                nUint24 = 0;            }        }        return aBytes;    }    /**     * Base64 string to array encoding     *      * @param char nUint6     *      * @return char     */    function uint6ToB64 (nUint6) {        return nUint6 < 26 ?            nUint6 + 65          : nUint6 < 52 ?            nUint6 + 71          : nUint6 < 62 ?            nUint6 - 4          : nUint6 === 62 ?            43          : nUint6 === 63 ?            47          :            65;    }    /**     * @param     *      * @return     */    function base64EncArr (aBytes) {        var eqLen = (3 - (aBytes.length % 3)) % 3, sB64Enc = "";        for (var nMod3, nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++) {            nMod3 = nIdx % 3;            /* Uncomment the following line in order to split the output in lines 76-character long: */            /* if (nIdx > 0 && (nIdx * 4 / 3) % 76 === 0) { sB64Enc += "\r\n"; } */            nUint24 |= aBytes[nIdx] << (16 >>> nMod3 & 24);            if (nMod3 === 2 || aBytes.length - nIdx === 1) {                sB64Enc += String.fromCharCode(uint6ToB64(nUint24 >>> 18 & 63), uint6ToB64(nUint24 >>> 12 & 63), uint6ToB64(nUint24 >>> 6 & 63), uint6ToB64(nUint24 & 63));                nUint24 = 0;            }        }        return eqLen === 0 ? sB64Enc : sB64Enc.substring(0, sB64Enc.length - eqLen) + (eqLen === 1 ? "=" : "==");    }    /* UTF-8 array to DOMString and vice versa */    function UTF8ArrToStr (aBytes) {        var sView = "";        for (var nPart, nLen = aBytes.length, nIdx = 0; nIdx < nLen; nIdx++) {            nPart = aBytes[nIdx];            sView += String.fromCharCode(                nPart > 251 && nPart < 254 && nIdx + 5 < nLen ? /* six bytes */                /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */                (nPart - 252) * 1073741824 + (aBytes[++nIdx] - 128 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128                : nPart > 247 && nPart < 252 && nIdx + 4 < nLen ? /* five bytes */                (nPart - 248 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128                : nPart > 239 && nPart < 248 && nIdx + 3 < nLen ? /* four bytes */                (nPart - 240 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128                : nPart > 223 && nPart < 240 && nIdx + 2 < nLen ? /* three bytes */                (nPart - 224 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128                : nPart > 191 && nPart < 224 && nIdx + 1 < nLen ? /* two bytes */                (nPart - 192 << 6) + aBytes[++nIdx] - 128                : /* nPart < 127 ? */ /* one byte */                nPart            );        }        return sView;    }    function strToUTF8Arr (sDOMStr) {        var aBytes,            nChr,            nStrLen = sDOMStr.length,            nArrLen = 0;        /* mapping... */        for (var nMapIdx = 0; nMapIdx < nStrLen; nMapIdx++) {            nChr = sDOMStr.charCodeAt(nMapIdx);            nArrLen += nChr < 0x80 ? 1 : nChr < 0x800 ? 2 : nChr < 0x10000 ? 3 : nChr < 0x200000 ? 4 : nChr < 0x4000000 ? 5 : 6;        }        aBytes = new Uint8Array(nArrLen);        /* transcription... */        for (var nIdx = 0, nChrIdx = 0; nIdx < nArrLen; nChrIdx++) {            nChr = sDOMStr.charCodeAt(nChrIdx);            if (nChr < 128) {                /* one byte */                aBytes[nIdx++] = nChr;            } else if (nChr < 0x800) {                /* two bytes */                aBytes[nIdx++] = 192 + (nChr >>> 6);                aBytes[nIdx++] = 128 + (nChr & 63);            } else if (nChr < 0x10000) {                /* three bytes */                aBytes[nIdx++] = 224 + (nChr >>> 12);                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);                aBytes[nIdx++] = 128 + (nChr & 63);            } else if (nChr < 0x200000) {                /* four bytes */                aBytes[nIdx++] = 240 + (nChr >>> 18);                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);                aBytes[nIdx++] = 128 + (nChr & 63);            } else if (nChr < 0x4000000) {                /* five bytes */                aBytes[nIdx++] = 248 + (nChr >>> 24);                aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);                aBytes[nIdx++] = 128 + (nChr & 63);            } else /* if (nChr <= 0x7fffffff) */ {                /* six bytes */                aBytes[nIdx++] = 252 + (nChr >>> 30);                aBytes[nIdx++] = 128 + (nChr >>> 24 & 63);                aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);                aBytes[nIdx++] = 128 + (nChr & 63);            }        }        return aBytes;    }    function btoaUTF16 (sString) {        var aUTF16CodeUnits = new Uint16Array(sString.length);        Array.prototype.forEach.call(aUTF16CodeUnits, function (el, idx, arr) { arr[idx] = sString.charCodeAt(idx); });        return btoa(String.fromCharCode.apply(null, new Uint8Array(aUTF16CodeUnits.buffer)));    }    function atobUTF16 (sBase64) {        var sBinaryString = atob(sBase64), aBinaryView = new Uint8Array(sBinaryString.length);        Array.prototype.forEach.call(aBinaryView, function (el, idx, arr) { arr[idx] = sBinaryString.charCodeAt(idx); });        return String.fromCharCode.apply(null, new Uint16Array(aBinaryView.buffer));    }    function b64EncodeUnicode(str) {    // first we use encodeURIComponent to get percent-encoded UTF-8,    // then we convert the percent encodings into raw bytes which    // can be fed into btoa.        return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,            function toSolidBytes(match, p1) {                return String.fromCharCode('0x' + p1);        }));    }    function b64DecodeUnicode(str) {        // Going backwards: from bytestream, to percent-encoding, to original string.        return decodeURIComponent(atob(str).split('').map(function(c) {            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);        }).join(''));    }</script><blockquote><h1 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h1><p>Base64 是一種基於 64 個可列印字元來表示二進位資料的表示方法。由於 2^6 &#x3D; 64，所以每 6 個位元為一個單元，對應某個可列印字元。3 個位元組有 24 個位元，對應於 4 個 Base64 單元，即 3 個位元組可由 4 個可列印字元來表示。它可用來作為電子郵件的傳輸編碼。在 Base64 中的可列印字元包括字母 A-Z、a-z、數字 0-9，這樣共有 62 個字元，此外兩個可列印符號在不同的系統中而不同。一些如 uuencode 的其他編碼方法，和之後 BinHex 的版本使用不同的 64 字元集來代表 6 個二進位數字，但是不被稱為 Base64。</p><ul><li>資料來源：<a href="https://zh.wikipedia.org/wiki/Base64">Base64 - 維基百科，自由的百科全書</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">一款簡單的線上編碼、解碼器，Base64 是一種基於 64 個可列印字元來表示二進位資料的表示方法。</summary>
    
    
    
    <category term="線上小工具" scheme="https://blog.init.engineer/categories/%E7%B7%9A%E4%B8%8A%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Tools" scheme="https://blog.init.engineer/tags/Tools/"/>
    
    <category term="Base64" scheme="https://blog.init.engineer/tags/Base64/"/>
    
  </entry>
  
  <entry>
    <title>Vue 前端工程師與 Laravel 後端工程師的權責分配問題</title>
    <link href="https://blog.init.engineer/posts/FrontendWorkWithBackend/"/>
    <id>https://blog.init.engineer/posts/FrontendWorkWithBackend/</id>
    <published>2019-07-03T16:00:00.000Z</published>
    <updated>2019-07-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天收到一則有趣的問題，問題大概是這樣子的：</p><blockquote><p>我是住在 Japari Park 的 COBOL，剛從大學畢業，之前就是讀資工系，但對前端比較有興趣，所以就在網路上購買了線上教學的課程，現在找到工作了，找的工作是 Vue 前端工程師，而面試時都是回覆我寫 Vue 等等都沒問題，但開始上班後發現並不是很純粹的前後端分離，而是前端人員在 Laravel 5.3 的 PHP 框架下面寫 Vue，這讓我壓力很大，因為完全是不同生態系的東西，而且前人也沒有留下交接文件！想詢問，我不想逃避問題，而是從中去成長，但是我應該怎麼做呢？能給予一些建議或分享一些建構的文章嗎？我翻遍網路上的範例，照著做卻遇到很多問題，實在是ＱＱ</p></blockquote><p>首先我們要釐清這個壓力很大的問題來源，從你的情境描述我們發現很有可能是對於權責的界線模糊不清，導致誤以為自己要負責、要學習的內容可能非常龐大，而且前人就算有留下交接文件，這份交接文件對你來說可能並沒有什麼實質幫助，事實上並沒有那麼複雜，單純分工不清楚而已，有許多種解決方案，以下我列舉各種情境：</p><p>如果是前後端分離，那基本上你不會碰到這些問題，但顯然今天這個解決方案是被 disable 的。</p><p>如果是要共同維護同一件專案，那對於 Laravel 後端工程師而言，他的工作內容可能就只是把 API 寫好，然後通過 PHPUnit 測試就沒他的事了，而對於一位前端工程師而言，其實只要管好 resources 下的 js、lang、sass、view，僅僅如此而已，你只需要會介接 API 或者 JWT(JSON Web Tokens) 即可。</p><blockquote><ul><li>JWT 參考資料 <a href="https://jwt.io/">JSON Web Tokens - jwt.io</a></li><li>科普 PHPUnit <a href="https://phpunit.de/">PHPUnit – The PHP Testing Framework</a></li></ul></blockquote><p>事實上 Laravel 本身也有定義好前端與後端這部分的權責界線，基本上來說，你到 Laravel 的官方文件當中，會有一個 MENU 是 Frontend 的說明文件，基本上那部分可以非常確定是前端的權責，如果確定是要共同維護同一專案的話，那麼你確實需要瞭解一下其內容。</p><ul><li><a href="https://laravel.com/docs/master/blade">Laravel - Blade Templates</a></li><li><a href="https://laravel.com/docs/master/localization">Laravel - Localization</a></li><li><a href="https://laravel.com/docs/master/frontend">Laravel - Frontend Scaffolding</a></li><li><a href="https://laravel.com/docs/master/mix">Laravel - Compiling Assets</a></li></ul><p>如果今天除了是要共同維護同一專案，並且不是以 JWT、OAuth 之類的方式開 API，而是要使用 Laravel 的 Model 來抓取資料，那麼你可能要去了解一些基本的 PHP 寫法，以及 ORM 相關知識，以便你在資料上的取用。</p><blockquote><ul><li>Eloquent ORM 參考資料 <a href="https://laravel.com/docs/master/eloquent">Eloquent: Getting Started - Laravel - The PHP Framework For Web Artisans</a></li><li>科普 OAuth <a href="https://en.wikipedia.org/wiki/OAuth">OAuth - Wikipedia</a></li></ul></blockquote><p>到這邊為止，基本上是作為一位前端工程師，如果要在共同維護同一專案的前提下，與 Laravel 後端工程師合作所需要了解的知識，乍看之下好像都是前端工程師要做什麼做什麼，而不是後端工程師該做什麼做什麼？但老實說我並不清楚你們後端工程師的程度到哪邊，但基本上後端工程師應該負責後端與資料庫，從 <code>Route</code> 定義基本的路由、<code>Middleware</code> 去做好權限、安全機制的管控，限定 <code>Request</code> 所該傳入的內容與格式，傳入資訊後透過 <code>Validation</code> 做內容審查，制定好 <code>Controller</code> 並且將商業邏輯寫在 <code>Service</code>，以及商業邏輯的觸發與監控 <code>Event&amp;Listener</code>，並且將資料庫邏輯的 <code>Repository</code> 寫清楚，到這邊會牽涉到 <code>Eloquent ORM</code>，也就是要把 <code>Model</code> 物件、關聯給寫好，以及很多軟體工程、資訊安全 ... 等等，基本該注意的。</p><blockquote><ul><li>後端基本上該注意的: <a href="https://blog.init.engineer/posts/P1HowDoYouRelyOnTheKaobeiEngineer/">P1. 純靠北工程師怎麼做的？就只是個簡單的後端架構而已。 · 乾太 Kantai</a></li></ul></blockquote><p>至於建議一些內容，如果你是說你想更了解如何更清楚的定義前端與後端的權責範圍，那你可以參考這兩本書，前者是在講 Laravel 的基本知識，後者是在講軟體開發架構。</p><ul><li>Matt Stauffer，2017&#x2F;05&#x2F;15，《Laravel 啟動與運行》，歐萊禮出版社</li><li>福勒，2010&#x2F;04&#x2F;01，《企業應用架構模式》，機械工業出版社</li><li></li></ul>]]></content>
    
    
    <summary type="html">事實上 Laravel 本身也有定義好前端與後端這部分的權責界線，基本上來說，你到 Laravel 的官方文件當中，會有一個 MENU 是 Frontend 的說明文件 ...</summary>
    
    
    
    <category term="經驗分享" scheme="https://blog.init.engineer/categories/%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Laravel" scheme="https://blog.init.engineer/tags/Laravel/"/>
    
    <category term="Vue" scheme="https://blog.init.engineer/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>在 HeroKu 上的 Laravel 專案突然爆掉 419 page expired 的解決方案</title>
    <link href="https://blog.init.engineer/posts/WhyMyLaravel419OnHeroku/"/>
    <id>https://blog.init.engineer/posts/WhyMyLaravel419OnHeroku/</id>
    <published>2019-06-13T16:00:00.000Z</published>
    <updated>2019-06-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="可憐的案例"><a href="#可憐的案例" class="headerlink" title="可憐的案例"></a>可憐的案例</h1><blockquote><p>大大救命啊啊啊啊啊啊！我的網站剛剛明明是好的，現在卻壞了，但我都沒有做任何事情，他就突然壞了！我把 Session 清掉，把 Cache 也清掉，把所有暫存都清掉，他終究告訴我 419 Page Expired，我把整個 HeroKu 都重啟，甚至整個專案都回滾到最初始的狀態，他都沒辦法救活，結果在本機端、開測試機卻正常運行，明明一模一樣的程式碼、一模一樣的所有配置啊！為什麼只有正式機會掛掉？跪求解答 20 點，急急急急急急。</p><ul><li>資料來源來自我的案發經歷</li></ul></blockquote><p>最近在部署專案到 HeroKu 上的時候，發生這樣莫名其妙的案例，於是將整個案例寫成文檔紀錄，之前介紹過把 Laravel 專案部署到 HeroKu 上的方法，這次要來分享在 HeroKu 上維護專案時，所發生的離奇案件。</p><blockquote><p>將 Laravel 部署到 HeroKu 上的教學: <a href="https://blog.init.engineer/posts/HowToBulidLaravelToHeroKu/">如何將你的 Laravel boilerplate 專案成功部署到 HeroKu · 乾太 Kantai</a></p></blockquote><hr><h1 id="419-Page-Expired"><a href="#419-Page-Expired" class="headerlink" title="419 Page Expired"></a>419 Page Expired</h1><p><img src="/img/posts/WhyMyLaravel419OnHeroku/1.png" alt="1.png"></p><p>基本上有學過 Laravel 的大家們，都知道 419 這個錯誤跟 CSRF 有關，我們正常會認為這可能是前台的 CSRF 過期了，導致使用者運行時把 TOKEN 丟到後端，中介層認為這 TOKEN 過期或無法驗證通過，而 Response HTTP CODE 419，所以在此我有一個大膽的想法，那就是去 <code>VerifyCsrfToken.php</code> 把所有的路由都取消 CSRF 認證，大概是這個樣子:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The URIs that should be excluded from CSRF verification.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$except</span> = [</span><br><span class="line">        <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>在 Laravel 當中如何取消 CSRF 的認證: <a href="https://blog.init.engineer/posts/ExcludingRoutesFromTheCSRFMiddleware/">在 Laravel 當中，如何移除特定 Router 的 CSRF？ · 乾太 Kantai</a></p></blockquote><p>取消 CSRF 驗證後，表單成功送出去了，伺服器也沒有出現 419 Page Expired，但結果是伺服器並沒有做任何與資料新增有關的動作，這就奇怪了呀，所以使用者端沒問題，伺服器也是沒問題的，最有可能有問題的地方可能在於資料庫這個部分，這時候我們打開 HeroKu JawsDB Maria 的 Plans 定價頁面(這邊我們以 JawsDB Maria 為例)。</p><p>HeroKu JawsDB Maria: <a href="https://elements.heroku.com/addons/jawsdb-maria">JawsDB Maria - Add-ons - Heroku Elements</a></p><p><img src="/img/posts/WhyMyLaravel419OnHeroku/2.png" alt="2.png"></p><p>HeroKu 會告訴你 Storage Capacity 5 MB，表面上意思是整個資料庫的容量給你 5 MB 的大小，但實際上可能是寫入的量，所以才會導致刪除可以運行，但要寫入新的資料就無法，而網站運行一段時間後，因為寫入的量過多了，所以 CSRF 的 Token 無法繼續寫入資料庫的 Sesstion 當中，而 Laravel 在驗證 CSRF 的時候找不到相對應的資料，才會回覆你 419 Page Expired。</p><h1 id="解決方案"><a href="#解決方案" class="headerlink" title="解決方案"></a>解決方案</h1><ol><li><p>課金<br>就這麼簡單，你只要把你的 HeroKu JawsDB 的 Plans 方案從 Free 升級，問題馬上就解決了。</p></li><li><p>改其他 Database<br>今天的問題主要是你目前連線的 Database 無法繼續寫入資料了，你只要改其他的服務，無論是 AWS、GCP 或自架，就可以解決這問題。</p></li></ol><hr><h1 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h1><p>這是一項很奇耙的問題，解決方案很簡單，但卻無法得知為什麼而出錯，找出解決方案有點靠經驗、觀落陰去解決，最重要的是 HeroKu 並沒有任何通知，他並不會寄封 Email 或系統跳通知來通知你的 Database 某項限制快抵達上限，這點我覺得是 HeroKu 需要修改的方向，不過對於開發、維護人員來講，可能先能夠找到問題、解決問題，才是首要目標吧，所以寫了這篇來紀錄。</p>]]></content>
    
    
    <summary type="html">大大救命啊啊啊啊啊啊！我的網站剛剛明明是好的，現在卻壞了，但我都沒有做任何事情，他就突然壞了！我把 Session 清掉，把 Cache 也清掉，把所有暫存都清掉，他終究告訴我 419 Page Expired ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="Laravel 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/Laravel-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="Laravel" scheme="https://blog.init.engineer/tags/Laravel/"/>
    
    <category term="Page Expired" scheme="https://blog.init.engineer/tags/Page-Expired/"/>
    
  </entry>
  
  <entry>
    <title>如何將你的 Laravel boilerplate 專案成功部署到 HeroKu</title>
    <link href="https://blog.init.engineer/posts/HowToBulidLaravelToHeroKu/"/>
    <id>https://blog.init.engineer/posts/HowToBulidLaravelToHeroKu/</id>
    <published>2019-05-06T16:00:00.000Z</published>
    <updated>2019-05-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="研究背景"><a href="#研究背景" class="headerlink" title="研究背景"></a>研究背景</h2><p>事情是這樣的，最近在研究 HeroKu 這家雲端平台，想要嘗試將一些服務部署到 HeroKu 上頭，但卻遇到一些問題，因此將一系列的問題解決過程記錄下來。</p><hr><h2 id="HeroKu-是什麼？"><a href="#HeroKu-是什麼？" class="headerlink" title="HeroKu 是什麼？"></a>HeroKu 是什麼？</h2><blockquote><p><strong>Heroku</strong>是一個支援多種 <a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80">程式語言</a> 的雲 <a href="https://zh.wikipedia.org/wiki/%E5%B9%B3%E5%8F%B0%E5%8D%B3%E6%9C%8D%E5%8A%A1">平台即服務</a> 。在2010年被 <a href="https://zh.wikipedia.org/wiki/Salesforce.com">Salesforce.com</a> 收購。Heroku作為最開始的 <a href="https://zh.wikipedia.org/wiki/%E4%BA%91%E7%AB%AF%E8%AE%A1%E7%AE%97">雲平台</a> 之一[1]，從 <a href="https://zh.wikipedia.org/wiki/2007%E5%B9%B46%E6%9C%88">2007年6月</a> 起開發，當時它僅支援 <a href="https://zh.wikipedia.org/wiki/Ruby">Ruby</a> ，但後來增加了對 <a href="https://zh.wikipedia.org/wiki/Java">Java</a> 、 <a href="https://zh.wikipedia.org/wiki/Node.js">Node.js</a> 、 <a href="https://zh.wikipedia.org/wiki/Scala">Scala</a> 、 <a href="https://zh.wikipedia.org/wiki/Clojure">Clojure</a> 、 <a href="https://zh.wikipedia.org/wiki/Python">Python</a> 以及（未記錄在正式檔案上） <a href="https://zh.wikipedia.org/wiki/PHP">PHP</a> 和 <a href="https://zh.wikipedia.org/wiki/Perl">Perl</a> 的支援。基礎作業系統是 <a href="https://zh.wikipedia.org/wiki/Debian">Debian</a> ，在最新的堆疊則是基於Debian的 <a href="https://zh.wikipedia.org/wiki/Ubuntu">Ubuntu</a> [2]。</p><p>資料來源：<a href="https://zh.wikipedia.org/wiki/Heroku">Heroku - 維基百科，自由的百科全書</a></p></blockquote><p>簡單來說，它就是提供一個平台讓你架設專案的服務，你只需要一個帳號，你就可以將你的 Laravel、MariaDB、Redis 一起架設上去，而且完全不收費，只是機器會睡覺而已，是個相當不錯的服務。</p><hr><h2 id="我應該怎麼開始？"><a href="#我應該怎麼開始？" class="headerlink" title="我應該怎麼開始？"></a>我應該怎麼開始？</h2><p>首先你會需要申請一個 HeroKu 的帳號，HeroKu 會需要你的 First name、Last name、Email address、Role、Country 這些基本資料。</p><blockquote><p>HeroKu 註冊網址：<a href="https://signup.heroku.com/login">Heroku | Sign up</a></p></blockquote><p><img src="/img/posts/HowToBulidLaravelToHeroKu/1.png" alt="1.png"><br>HeroKu 註冊新會員</p><p>接下來我們會需要建立一個新的應用程式，然後把 Laravel、MariaDB、Redis 放到應用程式當中，將整個服務建置起來。</p><p><img src="/img/posts/HowToBulidLaravelToHeroKu/2.png" alt="2.png"><br>選擇「Create new app」</p><p>輸入你這應用程式的名稱，以及選擇伺服器所架設的地區。</p><p><img src="/img/posts/HowToBulidLaravelToHeroKu/3.png" alt="3.png"><br>設定 App 的名稱、位置</p><p>建立應用程式成功之後，你會看到你應用程式的儀表板，這裡記錄著所有的歷史紀錄，無論是錯誤訊息、設定更改或者建立新部署，現在假設我們需要部署新的 Laravel 環境上去 HeroKu 的話，我們先進入「Deploy」的地方。</p><p><img src="/img/posts/HowToBulidLaravelToHeroKu/4.png" alt="4.png"><br>應用程式的儀表板</p><p>你會看到 HeroKu 提供了多種部署方式，有 Heroku Git、GitHub、Container Registry 這三種方式，這次我們使用 GitHub 的方式來將專案部署上去。</p><p><img src="/img/posts/HowToBulidLaravelToHeroKu/5.png" alt="5.png"><br>HeroKu 提供多種部署方式</p><p>透過 GitHub 部署的方式很簡單，你只需要連接你的 GitHub，然後搜尋你要部署的專案，舉例來說我想部署 kantai235.github.io 這個部落格，我就直接搜尋「kantai235」然後 Search(搜尋)，就能找到我的部落格專案，接下來直接按下「Connect(連接)」就能將專案部署到平台當中了。</p><p><img src="/img/posts/HowToBulidLaravelToHeroKu/6.png" alt="6.png"><br>透過 GitHub 部署到 HeroKu 平台當中。</p><p>不過這時候如果你的 Laravel 專案是以 rrappasoft&#x2F;laravel-5-boilerplate 為基礎的話，那你會碰到一個問題，HeroKu 會告訴你「There are no commands defined in the “ide-helper” namespace.」，你部署到自己的電腦(localhost)當中是沒有問題的，但是你部署到 HeroKu 的時候卻發生了問題。</p><blockquote><p><a href="https://github.com/rappasoft/laravel-5-boilerplate">GitHub - rappasoft&#x2F;laravel-5-boilerplate: A Laravel 5 Boilerplate Project - http://laravel-boilerplate.com</a></p></blockquote><p><img src="/img/posts/HowToBulidLaravelToHeroKu/7.png" alt="7.png"><br>There are no commands defined in the “ide-helper” namespace.</p><h2 id="什麼是-ide-helper？他害我沒辦法部署！"><a href="#什麼是-ide-helper？他害我沒辦法部署！" class="headerlink" title="什麼是 ide-helper？他害我沒辦法部署！"></a>什麼是 ide-helper？他害我沒辦法部署！</h2><p>基本上 Error Log 是在告訴你說專案可能在 composer 的 post-autoload-dump 這個階段出問題了，稍微查了一下 composer 文件，這個 function 的功能是「發生在自動載入器倒出之後，不管是在 install&#x2F;update 期間，或經由 dump-autoload 命令。」，簡單來說 HeroKu 在一開始運行時會運行 <code>composer install</code> 這項指令，然後開始下載整個專案所有會用到的套件，下載完了以後，將會依序執行 post-autoload-dump 的所有指令，而 HeroKu 就是在這些指令當中出錯了，疑似是 <code>@php artisan ide-helper:generate</code> 這項指令出錯了。</p><p><img src="/img/posts/HowToBulidLaravelToHeroKu/8.png" alt="8.png"><br>composer.json</p><p>Ide-helper 是一種會自動產生 IDE 文件的套件，簡單來說如果 composer 運行這些指令的話，ide-helper 會自動產生出一些魔術方法的文件給 IDE 讀取，讓你在開發的時候更為方便，語法提示跳得更多、提供更多的自動補完功能，但對於伺服器而言，這些文件是不必要的，因此你在部屬專案的時候，可以<strong>將 ide-helper 給拿掉（但沒辦法註解，因為 json 沒有註解)，你就可以正常將專案部署到 HeroKu 當中了</strong>。</p><ul><li><code>@php artisan ide-helper:generate</code><ul><li>會產生 <code>_ide_helper.php</code> 這份文件</li></ul></li><li><code>@php artisan ide-helper:meta</code><ul><li>會產生 <code>.phpstorm.meta.php</code> 這份文件</li></ul></li></ul><blockquote><p><a href="https://github.com/barryvdh/laravel-ide-helper">GitHub - barryvdh&#x2F;laravel-ide-helper: Laravel IDE Helper</a></p></blockquote><hr><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><blockquote><p>Wikipedia contributors. (2019, April 13). Heroku. In <em>Wikipedia, The Free Encyclopedia</em>. Retrieved 01:30, May 7, 2019, from <a href="https://en.wikipedia.org/w/index.php?title=Heroku&oldid=892252710">https://en.wikipedia.org/w/index.php?title=Heroku&oldid=892252710</a> </p></blockquote><blockquote><p>Composer contributors. (2019, April 13). Composer. In <em>指令碼- Composer 正體中文文件</em>. Retrieved 01:30, May 7, 2019, from <a href="https://getcomposer.ycnets.com/doc/articles/scripts.md">https://getcomposer.ycnets.com/doc/articles/scripts.md</a></p></blockquote><blockquote><p>barryvdh contributors. (2019, April 13). barryvdh. In * <a href="https://github.com/barryvdh">barryvdh</a> &#x2F; <a href="https://github.com/barryvdh/laravel-ide-helper">laravel-ide-helper</a> *. Retrieved 01:30, May 7, 2019, from <a href="https://github.com/barryvdh/laravel-ide-helper">GitHub - barryvdh&#x2F;laravel-ide-helper: Laravel IDE Helper</a></p></blockquote>]]></content>
    
    
    <summary type="html">事情是這樣的，最近在研究 HeroKu 這家雲端平台，想要嘗試將一些服務部署到 HeroKu 上頭，但卻遇到一些問題，因此將一系列的問題解決過程記錄下來 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="Laravel 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/Laravel-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="Laravel" scheme="https://blog.init.engineer/tags/Laravel/"/>
    
    <category term="HeroKu" scheme="https://blog.init.engineer/tags/HeroKu/"/>
    
  </entry>
  
  <entry>
    <title>EP1. 我要怎麼申請 Facebook API？好像很難又好像很簡單欸！</title>
    <link href="https://blog.init.engineer/posts/EP1HowDoYouRelyOnTheKaobeiEngineer/"/>
    <id>https://blog.init.engineer/posts/EP1HowDoYouRelyOnTheKaobeiEngineer/</id>
    <published>2019-03-23T16:00:00.000Z</published>
    <updated>2019-03-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在先前我們討論了如何透過 API 來將文章發表到社群平台當中、如何透過 API 來將社群平台的文章刪除，但我們中間略過了申請 API 的部分，所以接下來我們將要介紹如何申請相關社群的 API、申請經驗談、常用工具。</p><ul><li>EP1. 我要怎麼申請 Facebook API？好像很難又好像很簡單欸！(本篇)</li><li>EP2. 我要怎麼申請 Twitter API？好像很難又好像很簡單欸！</li><li>EP3. 我要怎麼申請 Plurk API？好像很難又好像很簡單欸！</li></ul><hr><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>本篇以 Facebook 為主，你需要先擁有 Facebook 的帳號，相信這部分大家都很熟悉，知道如何申請帳號，所以整篇文章會著重在如何申請應用程式、測試 API、提交應用程式審查，總共三個環節。</p><ul><li>Facebook 應用程式 - 申請</li><li>Facebook 應用程式 - 測試</li><li>Facebook 應用程式 - 審查</li></ul><hr><h2 id="Facebook-應用程式-申請"><a href="#Facebook-應用程式-申請" class="headerlink" title="Facebook 應用程式 - 申請"></a>Facebook 應用程式 - 申請</h2><p>我們直接透過 Facebook 開發者網站(連結如下)進入 Facebook 專給開發者的「我的應用程式」，去申請一個 Facebook 的應用程式。</p><blockquote><ul><li>網站連結：<a href="https://developers.facebook.com/apps/">所有應用程式 - Facebook for Developers</a></li></ul></blockquote><p><img src="/img/posts/EP1HowDoYouRelyOnTheKaobeiEngineer/1.png" alt="1.png"><br>所有應用程式 - Facebook for Developers</p><p>然後直接點選「新增應用程式」，Facebook 會要求你輸入兩個簡單的資訊，在這邊的顯示名稱、聯絡電子郵件事後都可以更改，顯示名稱顧名思義就是顯示的名稱，而聯絡電子信箱的用途在於如果應用程式審核通過&#x2F;未通過之類的情況時，會同步寄信到連絡信箱當中。</p><p><img src="/img/posts/EP1HowDoYouRelyOnTheKaobeiEngineer/2.png" alt="2.png"><br>建立新的應用程式</p><p>接下來我們就建立了一個 Facebook 應用程式了，你已經成功向前跨出一步，不過接下來我們還要填寫許多資料，我們點選「設定 &gt; 基本設定」，去填寫其他詳細的資訊。</p><p><img src="/img/posts/EP1HowDoYouRelyOnTheKaobeiEngineer/3.png" alt="3.png"><br>Facebook 應用程式 主控板</p><p>這邊你可以獲得幾些重要的參數，例如應用程式編號、應用程式密鑰，順便也可以把其他資訊也填寫一下，例如應用程式網域、隱私政策網址、類別，資訊填寫得越完整的話，對於後續審核也會比較有所幫助(或許啦)。</p><ul><li>應用程式編號 &#x3D; <code>FACEBOOK_APP_ID</code></li><li>應用程式密鑰 &#x3D; <code>FACEBOOK_APP_SECRET</code></li></ul><p><img src="/img/posts/EP1HowDoYouRelyOnTheKaobeiEngineer/4.png" alt="4.png"><br>Facebook 應用程式 設定 基本資料</p><p>往下拉還有聯絡資料，是針對歐盟所需要填寫的，根據 Facebook 的說法是這樣：</p><blockquote><p>一般資料保護規章（GDPR）規定在歐盟營業的特定公司指派一位資料保護長，一般大眾有關於其資料如何處理的問題時，可以聯絡該人員以取得資訊。<br>此聯絡資料以及其他有關你應用程式或網站的資訊都將提供給 Facebook 用戶。</p></blockquote><p>你可以如實填寫，也可以像我一樣不填寫，不過接下來的平台就真的必須填寫了，我們是以網站後端 Call API 的方式來使用這應用程式，所以理所當然我們要新增「網站」做為我們的平台。</p><p><img src="/img/posts/EP1HowDoYouRelyOnTheKaobeiEngineer/5.png" alt="5.png"><br>Facebook 應用程式 設定 基本資料</p><p>在進階設定的地方也有其他的詳細資訊可以設定，如果你對於安全上比較吹毛求疵，你也可以把這些資訊給設定一下。</p><p><img src="/img/posts/EP1HowDoYouRelyOnTheKaobeiEngineer/6.png" alt="6.png"><br>Facebook 應用程式 設定 進階</p><hr><h2 id="Facebook-應用程式-測試"><a href="#Facebook-應用程式-測試" class="headerlink" title="Facebook 應用程式 - 測試"></a>Facebook 應用程式 - 測試</h2><p>基本上申請應用程式不太會遇到什麼問題，在使用上、申請審核才會碰到比較多問題，尤其是申請審核的部分，這部分我們後面會再提到。</p><p>那我們接下來要來測試一下 Facebook 的 API 應該如何使用，你可以透過頂端導覽列的「工具」來看到三個主要的工具項目，不過我們應該會時常用到的分別會是「圖形 API 測試工具」以及「存取權杖偵錯工具」。</p><ul><li><code>圖形 API 測試工具</code> 你在測試 API 時會時常用到。</li><li><code>存取權杖偵錯工具</code> 如果你希望延長 Token 的授權期限、檢查 Token 所擁有的權限時，也會時常用到。</li></ul><blockquote><ul><li><a href="https://developers.facebook.com/docs?locale=zh_TW">Facebook 開發人員文件 | Facebook API、SDK、指南</a></li></ul></blockquote><p><img src="/img/posts/EP1HowDoYouRelyOnTheKaobeiEngineer/7.png" alt="7.png"><br>Facebook 圖形 API</p><p>我們先來測試看看圖形 API 測試工具，會有「Facebook 應用程式」、「用戶或粉絲專頁」這兩個下拉式選單，你需要選擇你的應用程式，以及你的操控目標，接下來才能使用 API 測試。</p><p><img src="/img/posts/EP1HowDoYouRelyOnTheKaobeiEngineer/8.png" alt="8.png"><br>圖型 API 測試工具</p><p>在選擇完畢之後，他會告知你目前有哪些權限，基本上只會有「<code>public_profile</code>」這個獲得基本資訊的權限，如果你的應用程式是用來發表、刪除粉絲專頁文章的話，你會需要「<code>manage_pages</code>」這項權限，然而根據 Facebook 所只是，如果你需要 <code>manage_pages</code> 這項權限的話，你還另外需要「<code>publish_pages</code>」這項權限，才能以粉絲專頁的身分發佈文章。</p><blockquote><ul><li>關於 manage_pages ...</li></ul><p>針對用戶所管理的粉絲專頁和應用程式，讓應用程式能夠擷取粉絲專頁存取權杖。<br>應用程式需要 manage_pages 和 publish_pages 才能以粉絲專頁的身分發佈。</p><ul><li><a href="https://developers.facebook.com/docs/facebook-login/permissions/#reference-manage_pages">manage_pages - 文件 - Facebook for Developers</a></li></ul></blockquote><blockquote><ul><li>關於 publish_pages …</li></ul><p>同時具備 manage_pages 權限時，應用程式能夠以應用程式用戶所管理的任何粉絲專頁身分發佈貼文、留言和按讚。<br>應用程式需要有 manage_pages 和 publish_pages 權限，才能以粉絲專頁的身分發佈內容。<br>此項權限無法讓您以個人帳號發佈內容。</p><ul><li><a href="https://developers.facebook.com/docs/facebook-login/permissions/#reference-publish_pages">publish_pages - 文件 - Facebook for Developers</a></li></ul></blockquote><p><img src="/img/posts/EP1HowDoYouRelyOnTheKaobeiEngineer/9.png" alt="9.png"><br>存取權杖設置</p><p>當你測試完 API，並且獲得你呼叫 API 時需要的 ACCESS TOKEN 時候，我們可以先去「<code>存取權杖偵錯工具</code>」檢查一下這個 TOKEN 的詳細資訊，你會發現他的有效期限非常短，不過我們可以透過「延伸存取權杖」來將有效期限延長。</p><p><img src="/img/posts/EP1HowDoYouRelyOnTheKaobeiEngineer/10.png" alt="10.png"><br>存取權杖偵錯工具</p><p>透過「延長存取權杖」可以將有效期限延長至兩個月。</p><p><img src="/img/posts/EP1HowDoYouRelyOnTheKaobeiEngineer/11.png" alt="11.png"><br>延伸存取權杖</p><p>不過 Facebook 有個很惱人的地方，以社群平台發表文章這件事為例子，如果你的應用程式發佈狀態是「關閉」的話，你所有透過該應用程式所發表的文章都無法被其他人看到，只有你自己看得到，因此我們需要將應用程式的狀態改為「開啟」。</p><p><img src="/img/posts/EP1HowDoYouRelyOnTheKaobeiEngineer/12.png" alt="12.png"><br>Facebook 應用程式 狀態</p><p>不過這麼做會遇到一個問題，我們分成幾個層面來講解，任何透過應用程式所發佈的文章，會在公開、不公開之間切換，會變成下面這兩種情況：</p><ul><li>狀態<code>關閉</code>：應用程式所發表的文章（包含曾經發表的文章）僅有應用程式相關人員（管理者、測試人員）可以正常瀏覽、點讚、分享。</li><li>狀態<code>開啟</code>：應用程式所發表的文章（包含曾經發表的文章）所有人都可以正常瀏覽、點讚、分享。</li></ul><p>再來是<code>權限</code>上的問題，應用程式的開啟與關閉狀態所能獲得的權限皆不同，會有下面兩種狀況：</p><ul><li>狀態<code>關閉</code>：你可以無視審查結果，獲取所有 Facebook 所提供的權限。</li><li>狀態<code>開啟</code>：你只能獲得 Facebook 審查通過的權限。</li></ul><p>聰明的你應該會想到一個方法想來嚐試鑽漏洞，就是將應用程式狀態設定為關閉，然後去獲得你所需要的權限、TOKEN，並且將 TOKEN 延長有效期限，再來去將應用程式開啟，這樣就可以獲得擁有權限且文章公開的 TOKEN 了！</p><p>但這個想法是沒辦法的，你的 TOKEN 雖然不會被收回去，但這個 TOKEN 尚未審查的權限都會被註銷，所以終究還是要將應用程式提交審查才能解決這問題。</p><hr><h2 id="Facebook-應用程式-審查"><a href="#Facebook-應用程式-審查" class="headerlink" title="Facebook 應用程式 - 審查"></a>Facebook 應用程式 - 審查</h2><p>基本上應用程式最後都會走到審查的這個步驟，不然你開發的應用程式將沒辦法正常的使用，所以我們回到應用程式設定當中，有個「應用程式審查」的選項，這邊可以看到每項權限的功能、獲取狀態以及需求條件 ... 等等訊息，也可以從這邊申請你所需要的權限。</p><p>如果以透過粉絲團發表文章這項功能來說的話，你需要申請 <code>manage_pages</code> 以及 <code>publish_pages</code> 這兩項權限。</p><blockquote><ul><li>manage_pages 審查條件</li></ul><p>如果您的應用程式要求此項權限，Facebook 將會 <a href="https://developers.facebook.com/docs/apps/review/login">審查</a> 應用程式運用該權限的方式。您可代表列於應用程式主控板「角色」部分的用戶授予此項權限，而無須經過 Facebook 審查。<br>提交審查時，請務必讓我們的團隊能輕鬆重現您的指示。舉例來說，如果您的「粉絲專頁管理工具」有自己的驗證系統，請務必提供有效的登入方式（如用戶名稱／密碼），以便審查團隊使用您的工具並測試其功能。</p><p><a href="https://developers.facebook.com/docs/facebook-login/permissions/#reference-manage_pages">manage_pages - 文件 - Facebook for Developers</a></p></blockquote><blockquote><ul><li>publish_pages 審查條件</li></ul><p>如果您的應用程式要求這項權限，Facebook 必須 <a href="https://developers.facebook.com/docs/apps/review/login">審查</a> 應用程式運用此權限的方式。<br>透過「應用程式審查」要求此項權限時，請務必提供詳細指示，以便我們的團隊輕鬆重現。</p><p><a href="https://developers.facebook.com/docs/facebook-login/permissions/#reference-publish_pages">publish_pages - 文件 - Facebook for Developers</a></p></blockquote><p><img src="/img/posts/EP1HowDoYouRelyOnTheKaobeiEngineer/13.png" alt="13.png"><br>Facebook 應用程式審查 - 權限和功能</p><p>如果你要求權限的話，你會需要提供一些資料給 Facebook 審查團隊，像是使用情境說明、步驟說明、畫面錄影甚至是提供測試帳號給 Facebook 審查團隊來測試使用，舉例來說，我申請 <code>manage_pages</code> 以及 <code>publish_pages</code> 這兩項權限的時候，我提交了以下內容給 Facebook：</p><blockquote><h2 id="這項應用程式是我個人要使用的，我想透過我的應用程式來方便我個人管理粉絲團，執行發布文章、刪除文章等各種管理的動作。1-透過-BitBucket、GitHub-或帳號密碼的方式登入本平台。2-撰寫發文內容、選擇樣式與字型，並且按下發表文章。3-本平台自動將文章發表至本平台的粉絲團。"><a href="#這項應用程式是我個人要使用的，我想透過我的應用程式來方便我個人管理粉絲團，執行發布文章、刪除文章等各種管理的動作。1-透過-BitBucket、GitHub-或帳號密碼的方式登入本平台。2-撰寫發文內容、選擇樣式與字型，並且按下發表文章。3-本平台自動將文章發表至本平台的粉絲團。" class="headerlink" title="這項應用程式是我個人要使用的，我想透過我的應用程式來方便我個人管理粉絲團，執行發布文章、刪除文章等各種管理的動作。1. 透過 BitBucket、GitHub 或帳號密碼的方式登入本平台。2. 撰寫發文內容、選擇樣式與字型，並且按下發表文章。3. 本平台自動將文章發表至本平台的粉絲團。"></a>這項應用程式是我個人要使用的，我想透過我的應用程式來方便我個人管理粉絲團，執行發布文章、刪除文章等各種管理的動作。<br>1. 透過 BitBucket、GitHub 或帳號密碼的方式登入本平台。<br>2. 撰寫發文內容、選擇樣式與字型，並且按下發表文章。<br>3. 本平台自動將文章發表至本平台的粉絲團。</h2><h2 id="平台網址：純靠北工程師-首頁"><a href="#平台網址：純靠北工程師-首頁" class="headerlink" title="平台網址：純靠北工程師 | 首頁"></a>平台網址：<a href="https://kaobei.engineer/">純靠北工程師 | 首頁</a></h2><h2 id="本平台的粉絲團：純靠北工程師-首頁-Facebook純靠北工程師-kobeengineer-首頁-Facebook"><a href="#本平台的粉絲團：純靠北工程師-首頁-Facebook純靠北工程師-kobeengineer-首頁-Facebook" class="headerlink" title="本平台的粉絲團：純靠北工程師 - 首頁 | Facebook純靠北工程師 kobeengineer - 首頁 | Facebook"></a>本平台的粉絲團：<br><a href="https://www.facebook.com/kaobei.engineer">純靠北工程師 - 首頁 | Facebook</a><br><a href="https://www.facebook.com/init.kobeengineer">純靠北工程師 kobeengineer - 首頁 | Facebook</a></h2><p>帳號: ＿＿＿＿＿＿＿＿＿<br>密碼: ＿＿＿＿＿＿＿＿＿</p></blockquote><p>除此之外還有整個發文流程的影片錄影、每個流程的詳細說明。</p><p><img src="/img/posts/EP1HowDoYouRelyOnTheKaobeiEngineer/14.png" alt="14.png"><br>Facebook 應用程式審查 - 目前的要求</p><p>不過儘管如此，Facebook 審查團隊有時候還是會打槍拒絕，這時候你可以修正你的流程，或者提出異議給審查團隊，提交問題時可以使用中文來撰寫問題描述，會有委外翻譯團隊負責將你的問題翻譯成英文，而審查團隊處理完畢後，雖然也是用英文來回覆，但委外翻譯團隊也會將回覆翻譯成中文，我自己個人覺得 Facebook 在這部分做得很好。</p><p><img src="/img/posts/EP1HowDoYouRelyOnTheKaobeiEngineer/15.png" alt="15.png"><br>Facebook 應用程式審查 - 被拒絕惹 QQ</p><p>不過 Facebook 審查團隊有時候會跳針，例如像下面這問題描述，Facebook 團隊是覺得可以批准應用程式，但希望提供測試帳號給 Facebook 團隊使用，當我補上測試帳號之後，Facebook 的審查者換別人了，審查者卻又以「<code>您的螢幕錄影檔案並未說明使用此權限如何能直接改善您應用程式的用戶體驗。此外，我們也無法藉由手動測試應用程式來判斷。</code>」來拒絕，這時候就會覺得很莫名其妙。</p><p><img src="/img/posts/EP1HowDoYouRelyOnTheKaobeiEngineer/16.png" alt="16.png"><br>Facebook 應用程式審查</p><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>總而言之，如果落數 Facebook、Twitter、Plurk 這三個社群平台的應用程式申請的話，我個人是任為 Facebook 最不親民、最麻煩的社群平台了，不僅 TOKEN 有期限限制，還有權限需經審核過於麻煩，每位審查人員對於審核標準不統一，不過也不是沒有優點，特別委外翻譯人員來協助翻譯問題回報、申訴，我覺得這點是大大加分的。</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><blockquote><ul><li><a href="https://developers.facebook.com/apps/">所有應用程式 - Facebook for Developers</a></li><li><a href="https://developers.facebook.com/docs/graph-api?locale=zh_TW">Graph API - 文件 - Facebook for Developers</a></li><li><a href="https://developers.facebook.com/docs/facebook-login/permissions/#reference-manage_pages">manage_pages - 文件 - Facebook for Developers</a></li><li><a href="https://developers.facebook.com/docs/facebook-login/permissions/#reference-publish_pages">publish_pages - 文件 - Facebook for Developers</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">在先前我們討論了如何透過 API 來將文章發表到社群平台當中、如何透過 API 來將社群平台的文章刪除，但我們中間略過了申請 API 的部分，所以接下來我們將要介紹如何申請相關社群的 API、申請經驗談、常用工具 ...</summary>
    
    
    
    <category term="開發日誌" scheme="https://blog.init.engineer/categories/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/"/>
    
    <category term="純靠北工程師" scheme="https://blog.init.engineer/categories/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/%E7%B4%94%E9%9D%A0%E5%8C%97%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    
    <category term="開發日誌" scheme="https://blog.init.engineer/tags/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/"/>
    
    <category term="純靠北工程師" scheme="https://blog.init.engineer/tags/%E7%B4%94%E9%9D%A0%E5%8C%97%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    <category term="Facebook API" scheme="https://blog.init.engineer/tags/Facebook-API/"/>
    
  </entry>
  
  <entry>
    <title>P5. 純靠北工程師怎麼做的？一顆按鈕就把你的文章 BANG 不見！</title>
    <link href="https://blog.init.engineer/posts/P5HowDoYouRelyOnTheKaobeiEngineer/"/>
    <id>https://blog.init.engineer/posts/P5HowDoYouRelyOnTheKaobeiEngineer/</id>
    <published>2019-03-16T16:00:00.000Z</published>
    <updated>2019-03-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>既然是社群匿名發文平台，那主要核心當然是發廢文、講幹話啦！可是這要怎麼做呢？文章管理三步驟：繪圖、發表文章、刪除文章。</p><ul><li>P3. 純靠北工程師怎麼做的？一顆按鈕就把你的文章發到世界各地了呢！(1&#x2F;2)</li><li>P4. 純靠北工程師怎麼做的？一顆按鈕就把你的文章發到世界各地了呢！(2&#x2F;2)</li><li><code>P5. 純靠北工程師怎麼做的？一顆按鈕就把你的文章 BANG 不見！ (本篇)</code></li><li>P6. 純靠北工程師怎麼做的？自幹前端一個繪圖、後端一個繪圖！前端篇</li><li>P7. 純靠北工程師怎麼做的？自幹前端一個繪圖、後端一個繪圖！後端篇</li></ul><hr><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>當我們完成社群平台發表文章之後，如果你只有在管理一個社群平台，那很輕鬆、很簡單，看到廢文直接手動刪掉就好了！可是如果今天你有兩個 Facebook 粉絲團要管理，以及 Twitter、Plurk 需要管理，使用者發表一篇廢文，你總共有四個社群平台帳號要切換，你可能就會覺得真心很累，所以接下來我們要做的就是把刪除文章這件事情給簡單化，當然整篇文章會聚焦在 API 的應用當中。</p><ul><li>Facebook API - delete&#x2F;{post_id} 串接</li><li>Twitter API - destroyTweet 串接</li><li>Plurk API - plurkDelete 串接</li></ul><p>接下來我們會透過一些第三方 Library 來完成我們串接 API 的事情，安裝 Library 的方法可以回顧一下 <code>[P3. 純靠北工程師怎麼做的？一顆按鈕就把你的文章發到世界各地了呢！(1/2)]</code> 當中有提到。</p><blockquote><ul><li><a href="https://github.com/SammyK/LaravelFacebookSdk">GitHub - SammyK&#x2F;LaravelFacebookSdk: Fully unit tested Facebook SDK v5 integration for Laravel &amp; Lumen</a></li><li><a href="https://github.com/thujohn/twitter">GitHub - thujohn&#x2F;twitter: Twitter API for Laravel 4&#x2F;5</a></li><li><a href="https://github.com/CQD/qlurk">GitHub - CQD&#x2F;qlurk: A Plurk API library in PHP</a></li></ul></blockquote><hr><h2 id="設計流程"><a href="#設計流程" class="headerlink" title="設計流程"></a>設計流程</h2><p>在寫程式之前，我們總是要先來思考一下流程，以確保整個設計思維是對的，如果你的軟體有設計 Backend、Frontend 的話，那麼很顯然發表文章的功能是泛用於 Backend 與 Frontend，而刪除文章的這項功能則是真真切切的只存在於 Backend，接下來就是流程的問題，假設管理員現在找到一篇廢文需要刪掉，所以管理員按下刪除按鈕之後，系統就要準備進行刪除文章的流程，首先逐一平台去將文章刪除，無論刪除成功與否，都要儲存文章狀態(是否被刪除)，每個平台刪除完了以後，再透過軟刪除的方式將文章移除，這篇文章已經進入垃圾桶了，最後將網頁重新導向到已刪除文章的列表當中。</p><p><img src="/img/posts/P5HowDoYouRelyOnTheKaobeiEngineer/1.png" alt="1.png"><br>構思整個刪除文章的流程</p><p>眼尖的讀者應該會發現說，這邊流程上的設計跟發表文章有點像，刪除文章的動作無論失敗、成功，最後都會導向下一個動作，其實像這種針對同一個物件不斷處理事情，都可以用這種方式來撰寫。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span>(<span class="params">SocialCardsRequest <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Code ...</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$social_cards</span> = <span class="variable language_">$this</span>-&gt;socialCardsService-&gt;<span class="title function_ invoke__">deletedFacebook</span>(<span class="variable">$social_cards</span>);</span><br><span class="line"><span class="variable">$social_cards</span> = <span class="variable language_">$this</span>-&gt;socialCardsService-&gt;<span class="title function_ invoke__">deletedTwitter</span>(<span class="variable">$social_cards</span>);</span><br><span class="line"><span class="variable">$social_cards</span> = <span class="variable language_">$this</span>-&gt;socialCardsService-&gt;<span class="title function_ invoke__">deletedPlurk</span>(<span class="variable">$social_cards</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Code ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Controller 當中呼叫 Service 的參考做法</p><hr><h2 id="透過-Facebook-API-來刪除文章"><a href="#透過-Facebook-API-來刪除文章" class="headerlink" title="透過 Facebook API 來刪除文章"></a>透過 Facebook API 來刪除文章</h2><p>既然要透過 Facebook 來刪除文章，那我們要先申請 Facebook 相關的 App Secret、Access Token ... 之類的呀！這方面的教學，我們將會在 <code>[EP1. 我要怎麼申請 Facebook API？好像很難又好像很簡單欸！]</code> 當中詳細解說。</p><p>完成前置步驟之後，假設我們已經要準備進行刪除文章的動作了，現在要把指定文章從 Facebook 平台當中移除，所以可以打開 API 文件來看一下。</p><blockquote><ul><li><a href="https://developers.facebook.com/docs/graph-api?locale=zh_TW">Graph API - 文件 - Facebook for Developers</a></li></ul></blockquote><p>根據我們之前發表文章的範例，發表文章是透過 <code>/Post/post-id - Publishing</code> 以及 <code>/&#123;page_id&#125;/photos - Creating</code> 來完成：</p><blockquote><ul><li><a href="https://developers.facebook.com/docs/graph-api/reference/v3.2/post#publishing">貼文 - Graph API - 文件 - Facebook for Developers</a></li><li><a href="https://developers.facebook.com/docs/graph-api/reference/photo/#Creating">Graph API Photo Node - Documentation - Facebook for Developers</a></li></ul></blockquote><p>那麼也就是說，我們可以透過 <code>/Post/post-id - deleting</code> 以及 <code>/&#123;page_id&#125;/photos - deleting</code> 來完成刪除文章的動作囉？沒錯，這個思維是正確的：</p><blockquote><ul><li><a href="https://developers.facebook.com/docs/graph-api/reference/v3.2/post#deleting">貼文 - Graph API - 文件 - Facebook for Developers</a></li><li><a href="https://developers.facebook.com/docs/graph-api/reference/photo/#Deleting">Graph API Photo Node - Documentation - Facebook for Developers</a></li></ul></blockquote><p>既然我們已經知道我們要使用的 API 是什麼了，那麼我們接下來就可以直接寫功能了，不外乎是寫在 Service 當中，可能會有一個 deletedFacebook 的方法，其功能是負責把特定社群平台的指定文章給刪除。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Facebook</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SocialCardsService.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocialCardsService</span> <span class="keyword">extends</span> <span class="title">BaseRepository</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> SocialCards $social_cards</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> SocialCards</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deletedFacebook</span>(<span class="params">SocialCards <span class="variable">$social_cards</span></span>) : <span class="title">SocialCards</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Code ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SocialCardsService - deletedFacebook</p><p>在這邊我們要透過 <code>Facebook::delete </code> 去刪除指定文章，只要在 <code>API URL </code> 帶入 <code>post_id </code>，不需要帶任何參數，就可以將文章刪除，刪除後會有個 response 告訴你有沒有成功、詳細資訊之類的，我們要再寫個方法確認一下是否成功，如果有例外就直接 <code>throw exception</code>，如果一切都順利的話，就呼叫 Repostory 去把資料紀錄一下，結束這個回合。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> SocialCards $social_cards</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> SocialCards</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deletedFacebook</span>(<span class="params">SocialCards <span class="variable">$social_cards</span></span>) : <span class="title">SocialCards</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$social_cards</span>-&gt;facebook_card_active) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="title class_">Facebook</span>::<span class="title function_ invoke__">setDefaultAccessToken</span>(<span class="title function_ invoke__">env</span>(<span class="string">&#x27;FACEBOOK_USER_ACCESS_TOKEN&#x27;</span>));</span><br><span class="line"><span class="variable">$response</span> = <span class="title class_">Facebook</span>::<span class="title function_ invoke__">delete</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$social_cards</span>-&gt;facebook_card_id, <span class="keyword">array</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkDeletedResponse</span>(<span class="variable">$response</span>))</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GeneralException</span>(...);</span><br><span class="line"></span><br><span class="line"><span class="variable">$social_cards</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">socialCardsRepostory</span>(...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$social_cards</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span>(\Facebook\Exceptions\FacebookSDKException <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="title class_">\Log</span>::<span class="title function_ invoke__">error</span>(<span class="string">&#x27;...&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$social_cards</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="title class_">\Log</span>::<span class="title function_ invoke__">error</span>(<span class="string">&#x27;...&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$social_cards</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title class_">\Log</span>::<span class="title function_ invoke__">error</span>(<span class="string">&#x27;...&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$social_cards</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>deletedFacebook(SocialCards $social_cards)</p><hr><h2 id="透過-Twitter-API-來刪除文章"><a href="#透過-Twitter-API-來刪除文章" class="headerlink" title="透過 Twitter API 來刪除文章"></a>透過 Twitter API 來刪除文章</h2><p>既然要透過 Twitter 來刪除文章，那我們要先申請 Twitter 相關的 App Secret、Access Token ... 之類的呀！這方面的教學，我們將會在 <code>[EP2. 我要怎麼申請 Twitter API？好像很難又好像很簡單欸！]</code> 當中詳細解說。</p><p>完成前置步驟之後，假設我們已經要準備進行刪除文章的動作了，現在要把指定文章從 Twitter 平台當中移除，所以可以打開 API 文件來看一下。</p><blockquote><ul><li><a href="https://developer.twitter.com/">Twitter Developer Platform — Twitter      Developers</a></li></ul></blockquote><p>根據我們之前發表文章的範例，發表文章是透過 <code>statuses/update </code> 來完成，換句話說刪除文章的功能應該也在 <code>statuses/* </code> 當中的某一支，仔細找一下會發現 <code>statuses/destroy/:id </code> 這項 API 就是我們需要的。</p><blockquote><p>Destroys the status specified by the required ID parameter. The authenticating user must be the author of the specified status. Returns the destroyed status if successful.</p><ul><li><a href="https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-destroy-id">POST statuses&#x2F;destroy&#x2F;:id — Twitter      Developers</a></li></ul></blockquote><p>我們再反向去找 <code>thujohn/twitter</code>，會找到 <code>destroyTweet($id, $parameters = [])</code> 這個方法，正是我們要使用的目標。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Destroys the status specified by the required ID parameter. The authenticating user must be the author of the specified status. Returns the destroyed status if successful.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Parameters :</span></span><br><span class="line"><span class="comment"> * - trim_user (0|1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroyTweet</span>(<span class="params"><span class="variable">$id</span>, <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;statuses/destroy/&#x27;</span>.<span class="variable">$id</span>, <span class="variable">$parameters</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>destroyTweet($id, $parameters &#x3D; [])</p><p>既然已經找到我們需要用的方法了，那接下來就是開始動工，一樣會在 Service 當中撰寫功能，會有個 deletedTwitter 來寫刪除 Twitter 文章相關的功能。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Twitter</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SocialCardsService.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocialCardsService</span> <span class="keyword">extends</span> <span class="title">BaseRepository</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> SocialCards $social_cards</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> SocialCards</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deletedTwitter</span>(<span class="params">SocialCards <span class="variable">$social_cards</span></span>) : <span class="title">SocialCards</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Code ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SocialCardsService - deletedTwitter</p><p>在這邊我們要透過 <code>Twitter::destroyTweet</code> 去刪除指定文章，只要帶入 <code>post_id</code>，就可以將文章刪除，刪除後會有個 response 告訴你有沒有成功、詳細資訊之類的，我們要再寫個方法確認一下是否成功，如果有例外就直接 <code>throw exception</code>，如果一切都順利的話，就呼叫 Repostory 去把資料紀錄一下，結束這個回合。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> SocialCards $social_cards</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> SocialCards</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deletedTwitter</span>(<span class="params">SocialCards <span class="variable">$social_cards</span></span>) : <span class="title">SocialCards</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$social_cards</span>-&gt;twitter_card_active) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="variable">$response</span> = <span class="title class_">Twitter</span>::<span class="title function_ invoke__">destroyTweet</span>(<span class="variable">$social_cards</span>-&gt;twitter_card_id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkDeletedResponse</span>(<span class="variable">$response</span>))</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GeneralException</span>(...);</span><br><span class="line"></span><br><span class="line"><span class="variable">$social_cards</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">socialCardsRepostory</span>(...)</span><br><span class="line">            </span><br><span class="line"><span class="keyword">return</span> <span class="variable">$social_cards</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="title class_">\Log</span>::<span class="title function_ invoke__">error</span>(<span class="string">&#x27;...&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$social_cards</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title class_">\Log</span>::<span class="title function_ invoke__">error</span>(<span class="string">&#x27;...&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$social_cards</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>deletedTwitter(SocialCards $social_cards)</p><hr><h2 id="透過-Plurk-API-來刪除文章"><a href="#透過-Plurk-API-來刪除文章" class="headerlink" title="透過 Plurk API 來刪除文章"></a>透過 Plurk API 來刪除文章</h2><p>最後我們來到 Plurk 刪除文章的部分，既然要透過 Plurk 來刪除文章，那我們要先申請 Plurk 相關的 App Secret、Access Token ... 之類的呀！這方面的教學，我們將會在 <code>[EP3. 我要怎麼申請 Plurk API？好像很難又好像很簡單欸！]</code> 當中詳細解說。</p><p>完成前置步驟之後，假設我們已經要準備進行刪除文章的動作了，現在要把指定文章從 Plurk 平台當中移除，所以可以打開 API 文件來看一下。</p><blockquote><ul><li>官方：<a href="https://www.plurk.com/API">Plurk API 2.0</a></li></ul></blockquote><p>再來安麗一下，老實說我覺得 Plurk 的 API Docs 非常難以閱讀，整個篇幅太過於陽春了，所以我將整份文件使用 lord&#x2F;slate 來稍微美化一下，你在瀏覽上會更加方便。</p><blockquote><ul><li>Kantai版 Plurk API Docs：<a href="https://blog.init.engineer/Plurk-API-Docs/build/#plurk-api-2-0">Plurk API 2.0</a><br>lord&#x2F;slate：<a href="https://github.com/lord/slate">GitHub - lord&#x2F;slate: Beautiful static documentation for your API</a></li></ul></blockquote><p>回到正題，我們會看到 <code>/APP/Timeline/plurkDelete</code> 這項 API，顯然這項功能就是刪除指定的一則噗文，既然我們已經找到我們需要的 API 了，那接下來我們要做的事情就是撰寫功能了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SocialCardsService.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocialCardsService</span> <span class="keyword">extends</span> <span class="title">BaseRepository</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> SocialCards $social_cards</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> SocialCards</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deletedPlurk</span>(<span class="params">SocialCards <span class="variable">$social_cards</span></span>) : <span class="title">SocialCards</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Code ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SocialCardsService - deletedPlurk</p><p>在這邊我們要透過 <code>/APP/Timeline/plurkDelete</code> 去刪除指定文章，只要帶入 <code>plurk_id</code>，就可以將文章刪除，這邊需要注意的是 <code>plurk_id</code> 指的是 10 進位的，而瀏覽噗文的網址則是 36 進位，刪除後會有個 response 告訴你有沒有成功、詳細資訊之類的，我們要再寫個方法確認一下是否成功，如果有例外就直接 <code>throw exception</code>，如果一切都順利的話，就呼叫 Repostory 去把資料紀錄一下，結束這個回合。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deletedPlurk</span>(<span class="params">SocialCards <span class="variable">$social_cards</span></span>) : <span class="title">SocialCards</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$social_cards</span>-&gt;plurk_card_active) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="variable">$qlurk</span> = <span class="keyword">new</span> <span class="title class_">\Qlurk\ApiClient</span>(</span><br><span class="line"><span class="title function_ invoke__">env</span>(<span class="string">&#x27;PLURK_CLIENT_ID&#x27;</span>),</span><br><span class="line"><span class="title function_ invoke__">env</span>(<span class="string">&#x27;PLURK_CLIENT_SECRET&#x27;</span>),</span><br><span class="line"><span class="title function_ invoke__">env</span>(<span class="string">&#x27;PLURK_TOKEN&#x27;</span>),</span><br><span class="line"><span class="title function_ invoke__">env</span>(<span class="string">&#x27;PLURK_TOKEN_SECRET&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="variable">$response</span> = <span class="variable">$qlurk</span>-&gt;<span class="title function_ invoke__">call</span>(<span class="string">&#x27;/APP/Timeline/plurkDelete&#x27;</span>, [</span><br><span class="line"><span class="string">&#x27;plurk_id&#x27;</span> =&gt; <span class="title function_ invoke__">base_convert</span>(<span class="variable">$social_cards</span>-&gt;plurk_card_id, <span class="number">36</span>, <span class="number">10</span>)</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkDeletedResponse</span>(<span class="variable">$response</span>))</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GeneralException</span>(...);</span><br><span class="line"></span><br><span class="line"><span class="variable">$social_cards</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">socialCardsRepostory</span>(...)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="variable">$social_cards</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="title class_">\Log</span>::<span class="title function_ invoke__">error</span>(<span class="string">&#x27;...&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$social_cards</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title class_">\Log</span>::<span class="title function_ invoke__">error</span>(<span class="string">&#x27;...&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$social_cards</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>deletedPlurk(SocialCards $social_cards)</p><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>基本上發表文章、刪除文章你都做完了，你不只做完核心功能了，管理上還很方便，只需要按一個按鈕就可以批次把所有社群平台的文章刪除，基本上整個純靠北工程師刪除文章的方法就是這樣，實際走一次看看：</p><p><img src="/img/posts/P5HowDoYouRelyOnTheKaobeiEngineer/2.png" alt="2.png"><br>文章列表 - 全部的文章</p><p><img src="/img/posts/P5HowDoYouRelyOnTheKaobeiEngineer/3.png" alt="3.png"><br>點選要刪除的文章</p><p><img src="/img/posts/P5HowDoYouRelyOnTheKaobeiEngineer/4.png" alt="4.png"><br>確認刪除文章</p><p><img src="/img/posts/P5HowDoYouRelyOnTheKaobeiEngineer/5.png" alt="5.png"><br>文章列表 - 已刪除的文章</p><p>除此之外，最會遇到問題的應該就是社群平台的應用程式申請，在這邊獨立開 EP 章節來帶大家走一次申請流程、介紹相關工具的應用。</p><p>社群平台 應用程式申請：</p><ul><li>EP1. 我要怎麼申請 Facebook API？好像很難又好像很簡單欸！</li><li>EP2. 我要怎麼申請 Twitter API？好像很難又好像很簡單欸！</li><li>EP3. 我要怎麼申請 Plurk API？好像很難又好像很簡單欸！</li></ul><hr><h2 id="資料參考"><a href="#資料參考" class="headerlink" title="資料參考"></a>資料參考</h2><blockquote><ul><li><a href="https://developers.facebook.com/docs/graph-api?locale=zh_TW">Graph API - 文件 - Facebook for Developers</a></li><li><a href="https://developer.twitter.com/">Twitter Developer Platform — Twitter      Developers</a></li><li><a href="https://www.plurk.com/API">Plurk API 2.0</a></li><li><a href="https://blog.init.engineer/Plurk-API-Docs/build/#plurk-api-2-0">Plurk API 2.0</a></li><li><a href="https://github.com/SammyK/LaravelFacebookSdk">GitHub - SammyK&#x2F;LaravelFacebookSdk: Fully unit tested Facebook SDK v5 integration for Laravel &amp; Lumen</a></li><li><a href="https://github.com/thujohn/twitter">GitHub - thujohn&#x2F;twitter: Twitter API for Laravel 4&#x2F;5</a></li><li><a href="https://github.com/CQD/qlurk">GitHub - CQD&#x2F;qlurk: A Plurk API library in PHP</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">既然是社群匿名發文平台，那主要核心當然是發廢文、講幹話啦！可是這要怎麼做呢？文章管理三步驟：繪圖、發表文章、刪除文章 ...</summary>
    
    
    
    <category term="開發日誌" scheme="https://blog.init.engineer/categories/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/"/>
    
    <category term="純靠北工程師" scheme="https://blog.init.engineer/categories/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/%E7%B4%94%E9%9D%A0%E5%8C%97%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    
    <category term="開發日誌" scheme="https://blog.init.engineer/tags/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/"/>
    
    <category term="純靠北工程師" scheme="https://blog.init.engineer/tags/%E7%B4%94%E9%9D%A0%E5%8C%97%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    <category term="Laravel" scheme="https://blog.init.engineer/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>P4. 純靠北工程師怎麼做的？一顆按鈕就把你的文章發到世界各地了呢！(2/2)</title>
    <link href="https://blog.init.engineer/posts/P4HowDoYouRelyOnTheKaobeiEngineer/"/>
    <id>https://blog.init.engineer/posts/P4HowDoYouRelyOnTheKaobeiEngineer/</id>
    <published>2019-03-09T16:00:00.000Z</published>
    <updated>2019-03-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>既然是社群匿名發文平台，那主要核心當然是發廢文、講幹話啦！可是這要怎麼做呢？文章管理三步驟：繪圖、發表文章、刪除文章。</p><ul><li>P3. 純靠北工程師怎麼做的？一顆按鈕就把你的文章發到世界各地了呢！(1&#x2F;2)</li><li><code>P4. 純靠北工程師怎麼做的？一顆按鈕就把你的文章發到世界各地了呢！(2/2)(本篇)</code></li><li>P5. 純靠北工程師怎麼做的？一顆按鈕就把你的文章 BANG 不見！</li><li>P6. 純靠北工程師怎麼做的？自幹前端一個繪圖、後端一個繪圖！前端篇</li><li>P7. 純靠北工程師怎麼做的？自幹前端一個繪圖、後端一個繪圖！後端篇</li></ul><hr><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>這篇文章的主軸會環繞於 Facebook、Twitter、Plurk 這三個平台的 API 串接，</p><ul><li>Twitter API - uploadMedia&#x2F;postTweet 串接</li><li>Plurk API - &#x2F;APP&#x2F;Timeline&#x2F;uploadPicture、&#x2F;APP&#x2F;Timeline&#x2F;plurkAdd 串接</li></ul><p>延續上篇 <code>[P3. 純靠北工程師怎麼做的？一顆按鈕就把你的文章發到世界各地了呢！(1/2)]</code> 的內容，我們接下來要開始著手 Twitter、Plurk 的發文功能了，這部分我們會用到其他兩套第三方 Library，分別是 <code>thujohn/twitter</code> 以及 <code>CQD/qlurk</code>，相關的安裝教學可以在 <code>[P3. 純靠北工程師怎麼做的？一顆按鈕就把你的文章發到世界各地了呢！(1/2)]</code> 的 <code>[前置步驟]</code> 當中獲得詳細介紹。</p><ul><li><a href="https://github.com/thujohn/twitter">GitHub - thujohn&#x2F;twitter: Twitter API for Laravel 4&#x2F;5</a></li><li><a href="https://github.com/CQD/qlurk">GitHub - CQD&#x2F;qlurk: A Plurk API library in PHP</a></li></ul><hr><h2 id="透過-Twitter-API-來發表文章"><a href="#透過-Twitter-API-來發表文章" class="headerlink" title="透過 Twitter API 來發表文章"></a>透過 Twitter API 來發表文章</h2><p>既然要透過 Twitter 來發表文章，那我們要先申請 Twitter 相關的 App Secret、Access Token ... 之類的呀！這方面的教學，我們將會在 <code>[EP2. 我要怎麼申請 Twitter API？好像很難又好像很簡單欸！]</code> 當中詳細解說。</p><p>完成前置步驟之後，假設我們已經完成了表單、收到表單 ... 等等動作，現在要把文章發表到 Twitter 平台上了，這時候分成兩個路線，一種是透過查看 Twitter API Docs 去找出自己需要使用的 function，一種是直接透過 Library Docs 去找出自己需要使用的 function，這邊我們兩種都採用，先透過 Twitter API Docs 來找尋我們需要使用的 function，所以我們可以打開 API 文件來看一下。</p><blockquote><p><a href="https://developer.twitter.com/">Twitter Developer Platform — Twitter Developers</a></p></blockquote><p>我們會在 statuses 當中找到 update 這項 API，內容說明如下：</p><blockquote><ul><li>Updates the authenticating user&#39;s current status, also known as Tweeting.</li><li>For each update attempt, the update text is compared with the authenticating user&#39;s recent Tweets. Any attempt that would result in duplication will be blocked, resulting in a 403 error. A user cannot submit the same status twice in a row.</li><li>While not rate limited by the API, a user is limited in the number of Tweets they can create at a time. If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.</li><li><a href="https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-update.html">POST statuses&#x2F;update — Twitter      Developers</a></li></ul></blockquote><p>看來這就是我們需要的 API，我們接下來只需要在 Library 當中尋找看看有沒有 <code>statuses/update </code> 相關的 function，我們最後會在 <code>StatusTrait.php</code> 當中找到這段 function：</p><p>[CODE01]</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Updates the authenticating user’s current status, also known as tweeting.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Parameters :</span></span><br><span class="line"><span class="comment"> * - status</span></span><br><span class="line"><span class="comment"> * - in_reply_to_status_id</span></span><br><span class="line"><span class="comment"> * - lat</span></span><br><span class="line"><span class="comment"> * - long</span></span><br><span class="line"><span class="comment"> * - place_id</span></span><br><span class="line"><span class="comment"> * - display_coordinates (0|1)</span></span><br><span class="line"><span class="comment"> * - trim_user (0|1)</span></span><br><span class="line"><span class="comment"> * - media_ids</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">postTweet</span>(<span class="params"><span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;status&#x27;</span>, <span class="variable">$parameters</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">BadMethodCallException</span>(<span class="string">&#x27;Parameter required missing : status&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;statuses/update&#x27;</span>, <span class="variable">$parameters</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>StatusTrait.php - postTweet($parameters = [])</code></p><p>由此可知我們需要利用 <code>postTweet</code> 來發表推文，甚至註解也告訴你參數可以帶入哪些了。</p><p>除此之外我們可以透過查看 Library 來尋找我們需要的 function，直接打開 Library 的 GitHub 就可以看到 README.md 當中有附註 Library 所有 function 的說明。</p><blockquote><p><a href="https://github.com/thujohn/twitter">GitHub - thujohn&#x2F;twitter: Twitter API for Laravel 4&#x2F;5</a></p></blockquote><p>仔細查看一下我們會在 Status 這個分類當中看到 <code>postTweet()</code> 這個 function，其說明為：</p><blockquote><p>postTweet() - Updates the authenticating user’s current status, also known as tweeting.</p></blockquote><p>除此之外我們還可以看到 Media 這個分類當中有一個 <code>uploadMedia()</code>，這個我們可以用來上傳圖片，並且坎入 Tweet 當中，就會變成圖文發表的模式了。</p><blockquote><p>uploadMedia() - Upload media (images) to Twitter, to use in a Tweet or Twitter-hosted Card.</p></blockquote><p>充分了解我們所需要的 API function 之後，接下來我們要開始把功能實作出來，跟前篇 <code>[P3. 純靠北工程師怎麼做的？一顆按鈕就把你的文章發到世界各地了呢！(1/2)]</code> 的 Service、Repository 一樣，我們會將功能實作在 Service 當中，其餘的儲存步驟我們要透過 Repository 來去完成，因此我們在 Service 當中會有一個 <code>releaseTwitter(SocialCards $social_cards)</code> 的方法，其功能跟 releaseFacebook 差不多，差別只在於一個是將文章發表至 Facebook 社群平台，另一個則是將文章發表至 Twitter 當中。</p><p>[CODE02]</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Twitter</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SocialCardsService.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocialCardsService</span> <span class="keyword">extends</span> <span class="title">BaseService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> SocialCards $social_cards</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> SocialCards</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">releaseTwitter</span>(<span class="params">SocialCards <span class="variable">$social_cards</span></span>) : <span class="title">SocialCards</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Code ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SocialCardsService - releaseTwitter</code></p><p>接下來我們需要將發表文章的功能寫入 releaseTwitter 當中，並且順利將文章的圖片透過 <code>uploadMedia</code> 來上傳，不過 Twitter 會特別一些，因為 Twitter 不像 Facebook 並沒有限制文章內容的上限，<code>Twitter 有限制 Content 必須在英文 280 字以下，或者中文 140 字以下</code>，因此你必須在發文之前檢查內容的長度，舉例來說你可以透過 <code>mb_strlen</code> 去判斷內容是否符合長度，如果不符合就透過 <code>mb_substr</code> 去切割內容，將剩餘的內容改為「...」。</p><p>[CODE03]</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">releaseTwitter</span>(<span class="params">SocialCards <span class="variable">$social_cards</span></span>) : <span class="title">SocialCards</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$social_cards</span>-&gt;twitter_card_id == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$social_cards</span>-&gt;content;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">mb_strlen</span>(<span class="variable">$content</span>, <span class="string">&quot;utf-8&quot;</span>) &gt; <span class="number">48</span>)</span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$content</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="string">&quot;utf-8&quot;</span>) . <span class="string">&quot; ...&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$twitter_uploaded_media</span> = <span class="title class_">Twitter</span>::<span class="title function_ invoke__">uploadMedia</span>([</span><br><span class="line"><span class="string">&#x27;media&#x27;</span> =&gt; <span class="title class_">Storage</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;file_url&#x27;</span>)</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$twitter_post</span> = <span class="title class_">Twitter</span>::<span class="title function_ invoke__">postTweet</span>([</span><br><span class="line"><span class="string">&#x27;status&#x27;</span> =&gt; <span class="variable">$content</span>,</span><br><span class="line"><span class="string">&#x27;media_ids&#x27;</span> =&gt; <span class="variable">$twitter_uploaded_media</span>-&gt;media_id_string</span><br><span class="line">]);</span><br><span class="line">    </span><br><span class="line"><span class="variable">$social_cards</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">socialCardsRepostory</span>(...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$social_cards</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="title class_">\Log</span>::<span class="title function_ invoke__">error</span>(<span class="string">&#x27;...&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$social_cards</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title class_">\Log</span>::<span class="title function_ invoke__">error</span>(<span class="string">&#x27;...&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$social_cards</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>releaseTwitter(SocialCards $social_cards)</code></p><p>整個步驟是這樣子，我們先透過 <code>mb_strlen</code> 來判斷內文的長度大小，如果過長就用 <code>mb_substr</code> 來做切割，接下來透過 <code>Storage::get</code> 來將圖片抓出來，並且透過 <code>Twitter::uploadMedia</code> 將圖片上傳至 Twitter，再透過 <code>media_id_string</code> 將圖片連結抓出來，丟給 <code>postTweet</code> 的 <code>media_ids</code>，整個圖文內容上傳至 Twitter 的流程到這邊就完成了。</p><hr><h2 id="透過-Plurk-API-來發表文章"><a href="#透過-Plurk-API-來發表文章" class="headerlink" title="透過 Plurk API 來發表文章"></a>透過 Plurk API 來發表文章</h2><p>既然要透過 Plurk 來發表文章，那我們要先申請 Plurk 相關的 App Secret、Access Token ... 之類的呀！這方面的教學，我們將會在 <code>[EP3. 我要怎麼申請 Plurk API？好像很難又好像很簡單欸！]</code> 當中詳細解說。</p><p>完成了 Facebook、Twitter 串接以後，我們接下來要串接最簡單(我覺得)的社群平台了，同樣假設我們已經完成了表單、收到表單 ... 等等動作，現在要把文章發表到 Plurk 平台上了，我們首當其衝要先瀏覽 Plurk API Docs。</p><blockquote><p>官方：<a href="https://www.plurk.com/API">Plurk API 2.0</a></p></blockquote><p>老實說我覺得 Plurk 的 API Docs 非常難以閱讀，整個篇幅太過於陽春了，所以我將整份文件使用 lord&#x2F;slate 來稍微美化一下，你在瀏覽上會更加方便。</p><blockquote><p>Kantai版 Plurk API Docs：<a href="https://blog.init.engineer/Plurk-API-Docs/build/#plurk-api-2-0">Plurk API 2.0</a><br>lord&#x2F;slate：<a href="https://github.com/lord/slate">GitHub - lord&#x2F;slate: Beautiful static documentation for your API</a></p></blockquote><p>我們會看到 <code>/APP/Timeline/plurkAdd</code> 這項 API，顯然這項功能就是發表一則噗文，另外還會找到 <code>/APP/Timeline/uploadPicture</code> 這項 API，功能顯然也就是將圖片上傳至噗浪，並取得圖片網址，既然我們已經找到我們需要的 API 了，那接下來我們要做的事情就是撰寫功能了。</p><p>[CODE04]</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SocialCardsService.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocialCardsService</span> <span class="keyword">extends</span> <span class="title">BaseService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> SocialCards $social_cards</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> SocialCards</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">releasePlurk</span>(<span class="params">SocialCards <span class="variable">$social_cards</span></span>) : <span class="title">SocialCards</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Code ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SocialCardsService - releasePlurk</code></p><p>這邊眼尖的讀者們應該會發現，前面 Facebook、Twitter 都會需要 use，為什麼這邊不用？這是因為 CQD&#x2F;qlurk 本身沒有 providers、aliases，但並不代表它不好，他還是非常好用的，<code>至少他幫你解決了 OAuth 上的一堆麻煩事</code>。</p><blockquote><p><a href="https://github.com/CQD/qlurk">GitHub - CQD&#x2F;qlurk: A Plurk API library in PHP</a></p></blockquote><p>[CODE05]</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">releasePlurk</span>(<span class="params">SocialCards <span class="variable">$social_cards</span></span>) : <span class="title">SocialCards</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$social_cards</span>-&gt;plurk_card_id == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$social_cards</span>-&gt;content;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">mb_strlen</span>(<span class="variable">$content</span>, <span class="string">&quot;utf-8&quot;</span>) &gt; <span class="number">220</span>)</span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$content</span>, <span class="number">0</span>, <span class="number">220</span>, <span class="string">&quot;utf-8&quot;</span>) . <span class="string">&quot; ...&quot;</span>;</span><br><span class="line">    </span><br><span class="line"><span class="variable">$qlurk</span> = <span class="keyword">new</span> <span class="title class_">\Qlurk\ApiClient</span>(</span><br><span class="line"><span class="title function_ invoke__">env</span>(<span class="string">&#x27;PLURK_CLIENT_ID&#x27;</span>),</span><br><span class="line"><span class="title function_ invoke__">env</span>(<span class="string">&#x27;PLURK_CLIENT_SECRET&#x27;</span>),</span><br><span class="line"><span class="title function_ invoke__">env</span>(<span class="string">&#x27;PLURK_TOKEN&#x27;</span>),</span><br><span class="line"><span class="title function_ invoke__">env</span>(<span class="string">&#x27;PLURK_TOKEN_SECRET&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="variable">$picture</span> = <span class="variable">$qlurk</span>-&gt;<span class="title function_ invoke__">call</span>(<span class="string">&#x27;/APP/Timeline/uploadPicture&#x27;</span>, [<span class="string">&#x27;image&#x27;</span>=&gt;<span class="title class_">Storage</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;file_url&#x27;</span>)]);</span><br><span class="line"><span class="variable">$resp</span> = <span class="variable">$qlurk</span>-&gt;<span class="title function_ invoke__">call</span>(<span class="string">&#x27;/APP/Timeline/plurkAdd&#x27;</span>, [</span><br><span class="line"><span class="string">&#x27;content&#x27;</span>   =&gt; <span class="variable">$picture</span>[<span class="string">&#x27;full&#x27;</span>] . <span class="variable">$content</span>,</span><br><span class="line"><span class="string">&#x27;qualifier&#x27;</span> =&gt; <span class="string">&#x27;says&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lang&#x27;</span>      =&gt; <span class="string">&#x27;tr_ch&#x27;</span></span><br><span class="line">]);</span><br><span class="line">         </span><br><span class="line"><span class="variable">$social_cards</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">socialCardsRepostory</span>(...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$social_cards</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="title class_">\Log</span>::<span class="title function_ invoke__">error</span>(<span class="string">&#x27;...&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$social_cards</span>;</span><br><span class="line">&#125;    </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$social_cards</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>releasePlurk(SocialCards $social_cards)</code></p><p>整個步驟是這樣子，我們先透過 <code>mb_strlen</code> 來判斷內文的長度大小，如果過長就用 <code>mb_substr</code> 來做切割，接下來透過 <code>Storage::get</code> 來將圖片抓出來，並且透過 <code>/APP/Timeline/uploadPicture</code> 將圖片上傳至 Plurk，再透過 <code>$picture[&#39;full&#39;]</code> 將圖片連結抓出來，丟給 <code>/APP/Timeline/plurkAdd</code>，Plurk 是把它當作 url 嵌入文章當中，整個圖文內容上傳至 Plurk 的流程到這邊就完成了。</p><hr><h2 id="後續動作、衍伸做法"><a href="#後續動作、衍伸做法" class="headerlink" title="後續動作、衍伸做法"></a>後續動作、衍伸做法</h2><p>如果我們把每個平台都獨立寫成一個 function，並且傳入固定 Entity、回傳固定 Entity 的話，那麼我們在 Controller 去呼叫 Service 的時候就可以用很特別的做法，例如在發文的 Controller 當中，當你要觸發發表文章的 Service 的時候，你可以這樣寫：</p><p>[CODE06]</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Store a newly created resource in storage.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  App\Http\Requests\Frontend\Social\SocialCardsRequest $request</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> \Illuminate\Http\Response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span>(<span class="params">SocialCardsRequest <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Code ...</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$social_cards</span> = <span class="variable language_">$this</span>-&gt;socialCardsService-&gt;<span class="title function_ invoke__">releaseFacebook</span>(<span class="variable">$social_cards</span>);</span><br><span class="line"><span class="variable">$social_cards</span> = <span class="variable language_">$this</span>-&gt;socialCardsService-&gt;<span class="title function_ invoke__">releaseTwitter</span>(<span class="variable">$social_cards</span>);</span><br><span class="line"><span class="variable">$social_cards</span> = <span class="variable language_">$this</span>-&gt;socialCardsService-&gt;<span class="title function_ invoke__">releasePlurk</span>(<span class="variable">$social_cards</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Code ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>在 Controller 當中呼叫 Service 的參考做法</code></p><p>Controller 只負責把這件事情委派給 Service 去處理，無論處理得如何，Controller 就只需要靜靜的等待結果、取得結果，然後針對結果來做事情，而 Service 則是負責把文章發表到社群平台當中，無論有沒有成功發表，最後一定要回傳結果給 Controller，講到這邊，是不是有點熟悉？就留給讀者慢慢思考。</p><p>如果仔細觀察的話，你會發現 Twitter、Plurk 都需要寫個判斷文章內容長度的程式碼，如果更近一步優化的話，我們可以把這段程式碼分割出來寫個 function，並且針對每個社群平台去處理不同的事項，做成一個內容產生 function。</p><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>基本上我覺得程式是沒什麼問題的，真正麻煩的會是申請應用程式的這個部分，Twitter、Plurk 放得很寬，但 Facebook 可是史上無敵麻煩，你需要說明每個步驟、錄影並提交給審核人員查看，在這些部分我們將在其他篇幅來解答，不過你會遇到一個問題，如果文章量越來越大，那使用者發一篇文，我就要切換三個平台來刪文，會不會太麻煩了啊？所以接下來我們將要介紹 [P5. 純靠北工程師怎麼做的？一顆按鈕就把你的文章 BANG 不見！] 來把麻煩解決掉！</p><p>社群平台 應用程式申請：</p><ul><li>EP1. 我要怎麼申請 Facebook API？好像很難又好像很簡單欸！</li><li>EP2. 我要怎麼申請 Twitter API？好像很難又好像很簡單欸！</li><li>EP3. 我要怎麼申請 Plurk API？好像很難又好像很簡單欸！</li></ul><hr><h2 id="資料參考"><a href="#資料參考" class="headerlink" title="資料參考"></a>資料參考</h2><blockquote><ul><li><a href="https://developers.facebook.com/docs/graph-api?locale=zh_TW">Graph API - 文件 - Facebook for Developers</a></li><li><a href="https://developer.twitter.com/">Twitter Developer Platform — Twitter      Developers</a></li><li><a href="https://www.plurk.com/API">Plurk API 2.0</a></li><li><a href="https://blog.init.engineer/Plurk-API-Docs/build/#plurk-api-2-0">Plurk API 2.0</a></li><li><a href="https://github.com/SammyK/LaravelFacebookSdk">GitHub - SammyK&#x2F;LaravelFacebookSdk: Fully unit tested Facebook SDK v5 integration for Laravel &amp; Lumen</a></li><li><a href="https://github.com/thujohn/twitter">GitHub - thujohn&#x2F;twitter: Twitter API for Laravel 4&#x2F;5</a></li><li><a href="https://github.com/CQD/qlurk">GitHub - CQD&#x2F;qlurk: A Plurk API library in PHP</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">既然是社群匿名發文平台，那主要核心當然是發廢文、講幹話啦！可是這要怎麼做呢？文章管理三步驟：繪圖、發表文章、刪除文章 ...</summary>
    
    
    
    <category term="開發日誌" scheme="https://blog.init.engineer/categories/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/"/>
    
    <category term="純靠北工程師" scheme="https://blog.init.engineer/categories/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/%E7%B4%94%E9%9D%A0%E5%8C%97%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    
    <category term="開發日誌" scheme="https://blog.init.engineer/tags/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/"/>
    
    <category term="純靠北工程師" scheme="https://blog.init.engineer/tags/%E7%B4%94%E9%9D%A0%E5%8C%97%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    <category term="Laravel" scheme="https://blog.init.engineer/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>P3. 純靠北工程師怎麼做的？一顆按鈕就把你的文章發到世界各地了呢！(1/2)</title>
    <link href="https://blog.init.engineer/posts/P3HowDoYouRelyOnTheKaobeiEngineer/"/>
    <id>https://blog.init.engineer/posts/P3HowDoYouRelyOnTheKaobeiEngineer/</id>
    <published>2019-03-02T16:00:00.000Z</published>
    <updated>2019-03-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>既然是社群匿名發文平台，那主要核心當然是發廢文、講幹話啦！可是這要怎麼做呢？文章管理三步驟：繪圖、發表文章、刪除文章。</p><ul><li><code>P3. 純靠北工程師怎麼做的？一顆按鈕就把你的文章發到世界各地了呢！(1/2)(本篇)</code></li><li>P4. 純靠北工程師怎麼做的？一顆按鈕就把你的文章發到世界各地了呢！(2&#x2F;2)</li><li>P5. 純靠北工程師怎麼做的？一顆按鈕就把你的文章 BANG 不見！</li><li>P6. 純靠北工程師怎麼做的？自幹前端一個繪圖、後端一個繪圖！前端篇</li><li>P7. 純靠北工程師怎麼做的？自幹前端一個繪圖、後端一個繪圖！後端篇</li></ul><hr><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>這篇文章的主軸會環繞於 Facebook、Twitter、Plurk 這三個平台的 API 串接，</p><ul><li>流程圖(Flowchart)</li><li>Facebook API - fileToUpload&#x2F;post&#x2F;photo 串接</li></ul><hr><h2 id="我應該怎麼開始？"><a href="#我應該怎麼開始？" class="headerlink" title="我應該怎麼開始？"></a>我應該怎麼開始？</h2><p>首先我們需要先思考這整個流程，使用者情境大概是首先我們會有一個頁面(如圖一)提供使用者寫文章、選擇主題、選擇字型或上傳圖片，使用者做完這些事情後，按下按鈕直接送出，後端開始會處理圖片、將文章發佈至各平台當中，最後將顯示畫面結果(如圖二)，更詳細一點的話就是畫成<code>流程圖(Flowchart)</code>。</p><blockquote><p>[!] 流程圖(Flowchart) 科普一下 -&gt; <a href="https://zh.wikipedia.org/zh-tw/%E6%B5%81%E7%A8%8B%E5%9B%BE">流程圖 - 維基百科，自由的百科全書</a></p></blockquote><p><img src="/img/posts/P3HowDoYouRelyOnTheKaobeiEngineer/1.png" alt="1.png"><br>圖一、發表文章範例介面</p><p><img src="/img/posts/P3HowDoYouRelyOnTheKaobeiEngineer/2.png" alt="2.png"><br>圖二、顯示畫面結果</p><hr><h2 id="發表文章的流程大概是"><a href="#發表文章的流程大概是" class="headerlink" title="發表文章的流程大概是 ... ?"></a>發表文章的流程大概是 ... ?</h2><p>我們大致上設計成這樣，假設使用者把表單內容都填寫好了，並且發送出去，那麼我們應該啟動發表文章的流程，但在開始動工之前，我們先把使用者傳入的表單資訊給儲存起來，如果在這個步驟就遇到不知名的錯誤掛掉了，那乾脆當作什麼事都沒發生，趕快 rollback 回去，如果一切都沒問題，那麼接下來開始製作圖片，假如前面沒問題，卻在這邊掛掉了，那接下來的事情還是不要做好了，就在這邊停下，剩下的讓排程去處理。</p><p>以上的步驟基本上不太會有問題，因為都是在本機上執行，有問題通常都是開發者哪裡寫錯而導致的，但接下來的流程如果出問題，就不一定是開發者的問題了。</p><p>表單資訊、圖片資訊都處理好了，接下來該逐一發表至社群平台當中了，有可能碰上程式沒問題，但社群平台卻掛掉了，規避的方法有很多種，這邊舉個例子，可以正常發表到社群平台，就把該社群平台的文章資訊儲存起來，如果遇到意外，那直接進行下一個社群平台的發表，最終顯示發表文章後的頁面。</p><p><img src="/img/posts/P3HowDoYouRelyOnTheKaobeiEngineer/3.png" alt="3.png"><br>發表文章的流程圖</p><p>不過這部分我們要注意到文章資料表的設計，發文者編號、圖片、文章資訊 ... 這些資料基本上沒什麼問題，如果照著上面的邏輯，正常狀況下會是整列資料列都有資料，但眼尖的你一定會發現 編號3 編號4 這兩筆資料居然包含 Null，以及 編號2 的文章狀態是 false，這邊針對這些資料來做解說：</p><ul><li>編號1: 正常流程的結果。</li><li>編號2: 文章已正常發佈至各社群平台當中，但事後將文章從社群平台當中刪除。</li><li>編號3: 文章已正常紀錄並產生圖片檔，但尚未發表至 Facebook、Twitter 社群平台當中。</li><li>編號4: 文章已正常紀錄並產生圖片檔，已發表至 Facebook 當中，但尚未發表至 Twitter 社群平台。</li></ul><p>[文章資料表範例]<br>[image:02EF82DD-6A87-4052-AB61-CAEAB215E736-407-000118F6812DD408&#x2F;文章資料表範例.png]<br>文章資料表範例</p><p>如果資料表設計沒問題的話，那我們繼續流程圖的部分，如果你還記得 <code>[P1.純靠北工程師怎麼做的？就只是個簡單的後端架構而已。]</code> 內容的話，我們把每個流程上個色一下，顏色分別是：</p><ul><li><code>紅色 Presenter</code> 處理顯示邏輯，例如社群平台的文章連結。</li><li><code>綠色 Service</code> 處理商業邏輯，例如在社群平台發表文章。</li><li><code>藍色 Repostory</code> 處理資料庫邏輯，例如在資料庫當中寫入一筆文章資料。</li></ul><blockquote><p>[!] P1.純靠北工程師怎麼做的？就只是個簡單的後端架構而已。 科普一下 -&gt; <a href="https://pressplay.cc/project/vippPage/P1%2B%E7%B4%94%E9%9D%A0%E5%8C%97%E5%B7%A5%E7%A8%8B%E5%B8%AB%E6%80%8E%E9%BA%BC%E5%81%9A%E7%9A%84%EF%BC%9F%E5%B0%B1%E5%8F%AA%E6%98%AF%E5%80%8B%E7%B0%A1%E5%96%AE%E7%9A%84%E5%BE%8C%E7%AB%AF%E6%9E%B6%E6%A7%8B%E8%80%8C%E5%B7%B2/49F0EDD097A8C7CF9791F4987A3990E0">純靠北工程師怎麼做的？就只是個簡單的後端架構而已！</a></p></blockquote><p><img src="/img/posts/P3HowDoYouRelyOnTheKaobeiEngineer/4.png" alt="4.png"><br>為每個流程都上對應的顏色，紅色 Presenter、綠色 Service、藍色 Repostory</p><p>這樣應該知道哪些功能應該寫在哪些地方，整個程式的流程應該怎麼走，至於詳細應該怎麼寫，就留給讀者們去嘗試了，要不然在這邊把每個都詳細解釋的話，篇幅會太～過～冗～長，所以我們接下來將會把重點聚焦在如何透過 API 來發表文章至社群平台當中。</p><hr><h2 id="前置步驟"><a href="#前置步驟" class="headerlink" title="前置步驟"></a>前置步驟</h2><p>因為純靠北工程師是用 Laravel 來寫的，所以我們會需要引用一些第三方的 Library，分別是介接 Facebook API 的 <code>SammyK/LaravelFacebookSdk</code>，以及介接 Twitter API 的 <code>thujohn/twitter</code>，最後是介接 Plurk 的 <code>CQD/qlurk</code>。</p><blockquote><ul><li><a href="https://github.com/SammyK/LaravelFacebookSdk">GitHub - SammyK&#x2F;LaravelFacebookSdk: Fully unit tested Facebook SDK v5 integration for Laravel &amp; Lumen</a></li><li><a href="https://github.com/thujohn/twitter">GitHub - thujohn&#x2F;twitter: Twitter API for Laravel 4&#x2F;5</a></li><li><a href="https://github.com/CQD/qlurk">GitHub - CQD&#x2F;qlurk: A Plurk API library in PHP</a></li></ul></blockquote><p>首先我們會<code>需要在終端機(Terminal)透過 composer 下載</code>這些第三方 Library，相信已經使用 Laravel 開發的讀者們對這部分應該不陌生。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">composer require sammyk/laravel-facebook-sdk</span><br><span class="line">composer require thujohn/twitter</span><br><span class="line">composer require qlurk/qlurk</span><br></pre></td></tr></table></figure><p>透過 composer 下載第三方 Library</p><p>再來我們需要在你的應用程式配置當中，<code>將 ServiceProvider 添加到 providers 當中</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;providers&#x27;</span> =&gt; [</span><br><span class="line">SammyK<span class="title class_">\LaravelFacebookSdk\LaravelFacebookSdkServiceProvider</span>::<span class="variable language_">class</span>,</span><br><span class="line"><span class="title class_">Thujohn\Twitter\TwitterServiceProvider</span>::<span class="variable language_">class</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>將 ServiceProvider 添加到 providers 當中</p><p>再來<code>將 Facade 添加到 aliases 當中</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;aliases&#x27;</span> =&gt; [</span><br><span class="line"><span class="string">&#x27;Facebook&#x27;</span> =&gt; SammyK<span class="title class_">\LaravelFacebookSdk\FacebookFacade</span>::<span class="variable language_">class</span>,</span><br><span class="line"><span class="string">&#x27;Twitter&#x27;</span> =&gt; <span class="title class_">Thujohn\Twitter\Facades\Twitter</span>::<span class="variable language_">class</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>將 Facade 添加到 aliases 當中</p><p>最後我們需要<code>在 .env 添加我們之後會用到的一些參數</code>，例如 App Secret、Access Token ... 之類的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FACEBOOK_APP_ID=</span><br><span class="line">FACEBOOK_APP_SECRET=</span><br><span class="line">FACEBOOK_DEFAULT_GRAPH_VERSION=</span><br><span class="line">FACEBOOK_USER_ID=</span><br><span class="line">FACEBOOK_USER_ACCESS_TOKEN=</span><br><span class="line"></span><br><span class="line">TWITTER_CONSUMER_KEY=</span><br><span class="line">TWITTER_CONSUMER_SECRET=</span><br><span class="line">TWITTER_ACCESS_TOKEN=</span><br><span class="line">TWITTER_ACCESS_TOKEN_SECRET=</span><br><span class="line"></span><br><span class="line">PLURK_CLIENT_ID=</span><br><span class="line">PLURK_CLIENT_SECRET=</span><br><span class="line">PLURK_REDIRECT=$&#123;APP_URL&#125;/login/plurk/callback</span><br><span class="line">PLURK_TOKEN=</span><br><span class="line">PLURK_TOKEN_SECRET=</span><br></pre></td></tr></table></figure><p>在 .env 添加我們之後會用到的一些參數</p><hr><h2 id="透過-Facebook-API-來發表文章"><a href="#透過-Facebook-API-來發表文章" class="headerlink" title="透過 Facebook API 來發表文章"></a>透過 Facebook API 來發表文章</h2><p>既然要透過 Facebook 來發表文章，那我們要先申請 Facebook 相關的 App Secret、Access Token ... 之類的呀！這方面的教學，我們將會在 <code>[EP1. 我要怎麼申請 Facebook API？好像很難又好像很簡單欸！]</code> 當中詳細解說。</p><p>完成前置步驟之後，假設我們已經完成了表單、收到表單 ... 等等動作，現在要把文章發表到 Facebook 平台上了，所以可以打開 API 文件來看一下。</p><blockquote><p><a href="https://developers.facebook.com/docs/graph-api?locale=zh_TW">Graph API - 文件 - Facebook for Developers</a></p></blockquote><p>如果你整份文件都讀完的話，你會發現一個問題，你可能會需要使用的 API 有兩個，分別是 <code>Post/post-id - Publishing </code> 以及 <code>/&#123;page_id&#125;/photos - Creating</code></p><blockquote><ul><li><a href="https://developers.facebook.com/docs/graph-api/reference/v3.2/post#publishing">貼文 - Graph API - 文件 - Facebook for Developers</a></li><li><a href="https://developers.facebook.com/docs/graph-api/reference/photo/#Creating">Graph API Photo Node - Documentation - Facebook for Developers</a></li></ul></blockquote><p>在這邊稍微解釋一下，如果你是純文字發表的話，那麼你就要使用 <code>Post/post-id - Publishing </code>，反之如果你的發文內容會包含圖片的話，那你則是需要使用 <code>/&#123;page_id&#125;/photos - Creating</code>，接下來我們以發表包含圖片的貼文為例，因為發表文章的這段功能會在 Service 當中進行，儲存資料的部分會丟給 Repository 去處理，所以我們聚焦在 Service 當中，而 Service 大概會像這樣：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Facebook</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SocialCardsService.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocialCardsService</span> <span class="keyword">extends</span> <span class="title">BaseService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> SocialCards $social_cards</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> SocialCards</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">releaseFacebook</span>(<span class="params">SocialCards <span class="variable">$social_cards</span></span>) : <span class="title">SocialCards</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Code ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SocialCardsService - releaseFacebook</p><p>接下來我們會需要把發表文章的方法寫在 releaseFacebook 當中，而每次呼叫 releaseFacebook 的時候，必須傳入一個 SocialCards 的 Entity 實體，這個實體記錄著發文資料表的 Cell，需要被發表文章的 Cell，其他社群平台的 release 方法都傳入同樣的 Cell，並且必定回傳該 Cell，至於為什麼要這樣做，會在結尾的時候做說明。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$social_cards</span>-&gt;facebook_card_id == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="title class_">Facebook</span>::<span class="title function_ invoke__">setDefaultAccessToken</span>(<span class="title function_ invoke__">env</span>(<span class="string">&#x27;FACEBOOK_USER_ACCESS_TOKEN&#x27;</span>));</span><br><span class="line"><span class="variable">$response</span> = <span class="title class_">Facebook</span>::<span class="title function_ invoke__">post</span>(</span><br><span class="line"><span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;/%s/photos&#x27;</span>, <span class="title function_ invoke__">env</span>(<span class="string">&#x27;FACEBOOK_USER_ID&#x27;</span>)),</span><br><span class="line"><span class="keyword">array</span>(</span><br><span class="line"><span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;source&#x27;</span> =&gt; <span class="title class_">Facebook</span>::<span class="title function_ invoke__">fileToUpload</span>(<span class="string">&#x27;file_url&#x27;</span>)</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"><span class="variable">$social_cards</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">socialCardsRepostory</span>(...)</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$social_cards</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span>(\Facebook\Exceptions\FacebookSDKException <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="title class_">\Log</span>::<span class="title function_ invoke__">error</span>(...);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$social_cards</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="title class_">\Log</span>::<span class="title function_ invoke__">error</span>(...);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$social_cards</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$social_cards</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>releaseFacebook</p><p>在這邊解釋一下，一開始的 $social_cards-&gt;facebook_card_id 是用來判斷該篇文章有沒有被發表至 Facebook 過，避免重複發文的情形出現。</p><p>接下來你需要透過 <code>Facebook::setDefaultAccessToken </code> 來注入 <code>Token</code>，再來是 post 的用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Facebook</span>::<span class="title function_ invoke__">post</span>(</span><br><span class="line"><span class="string">&#x27;你要 Call 的 API URL&#x27;</span>,</span><br><span class="line"><span class="keyword">array</span>(相關參數)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Facebook::post 的用法</p><p>接下來你會發現 <code>Facebook::fileToUpload</code> 這個東西，這是負責把你的檔案傳到 Facebook 當中的方法，傳入的<code>並不是檔案或本機路徑，而是 URL(ex: https://example.com/image.png)</code>。</p><p>最後再呼叫一下 socialCardsRepostory 把一些資訊儲存起來，並且刷新實體，最後 Return 那個實體就大功告成了，如果有任何 Exception 發生的話，一樣把實體回傳。</p><p>正常的情況下會可以會直接將文章發表至粉絲團當中，不過會牽涉到應用程式權限問題，這部分我們也將會在 <code>[EP1. 我要怎麼申請 Facebook API？好像很難又好像很簡單欸！]</code> 當中解答。</p><hr><h2 id="待續"><a href="#待續" class="headerlink" title="待續"></a>待續</h2><p>因為篇幅太長，所以將文章切成上篇、下篇，大概就是這樣。</p>]]></content>
    
    
    <summary type="html">既然是社群匿名發文平台，那主要核心當然是發廢文、講幹話啦！可是這要怎麼做呢？文章管理三步驟：繪圖、發表文章、刪除文章 ...</summary>
    
    
    
    <category term="開發日誌" scheme="https://blog.init.engineer/categories/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/"/>
    
    <category term="純靠北工程師" scheme="https://blog.init.engineer/categories/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/%E7%B4%94%E9%9D%A0%E5%8C%97%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    
    <category term="開發日誌" scheme="https://blog.init.engineer/tags/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/"/>
    
    <category term="純靠北工程師" scheme="https://blog.init.engineer/tags/%E7%B4%94%E9%9D%A0%E5%8C%97%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    <category term="Laravel" scheme="https://blog.init.engineer/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>P2. 純靠北工程師怎麼做的？就只是個簡單的資料庫模型而已。</title>
    <link href="https://blog.init.engineer/posts/P2HowDoYouRelyOnTheKaobeiEngineer/"/>
    <id>https://blog.init.engineer/posts/P2HowDoYouRelyOnTheKaobeiEngineer/</id>
    <published>2019-02-23T16:00:00.000Z</published>
    <updated>2019-02-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>既然是工程師，那網站當然要自幹啊！在開始介紹如何寫功能以前，要先通過兩項前置任務（如果已經有點軟體架構概念、資料庫基本知識，則可以直接跳過）：</p><ul><li>P1.純靠北工程師怎麼做的？就只是個簡單的後端架構而已。</li><li><code>P2.純靠北工程師怎麼做的？就只是個簡單的資料庫模型而已。(本篇)</code></li></ul><hr><h2 id="怎麼做資料庫模型？"><a href="#怎麼做資料庫模型？" class="headerlink" title="怎麼做資料庫模型？"></a>怎麼做資料庫模型？</h2><p>有在做資料庫規劃的話，基本上看了 <code>ER-Model</code> 就知道該如何使用了，如果你對資料庫這方面不太熟悉，但又可能有機會需要用到，那麼你會需要稍微了解一些眉眉角角，在資料庫的世界稱之為「::正規化::」，而正規化有第一正規化、第二正規化、第三正規化、BC正規化 ... 到第六正規化，不過會建議至少要符合第三正規化、BC正規化，對於整個資料庫的效能來說有非常顯著的改善。</p><blockquote><p>ER-Model 科普一下 <a href="https://zh.wikipedia.org/zh-tw/ER%E6%A8%A1%E5%9E%8B">ER模型 - 維基百科，自由的百科全書</a></p></blockquote><ul><li>第一正規化-&gt; 去除重複性</li><li>第二正規化-&gt; 去除部分相依</li><li>第三正規化-&gt; 去除間接相依</li><li>BC 正規化-&gt; 複合主鍵需皆為外來鍵</li></ul><blockquote><p>[!] 資料庫正規化 科普一下</p><ul><li>-&gt; <a href="https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%B8%80%E6%AD%A3%E8%A6%8F%E5%8C%96">第一正規化 - 維基百科，自由的百科全書</a></li><li>-&gt; <a href="https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%BA%8C%E6%AD%A3%E8%A6%8F%E5%8C%96">第二正規化 - 維基百科，自由的百科全書</a></li><li>-&gt; <a href="https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%B8%89%E6%AD%A3%E8%A6%8F%E5%8C%96">第三正規化 - 維基百科，自由的百科全書</a></li><li>-&gt; <a href="https://zh.wikipedia.org/wiki/BC%E6%AD%A3%E8%A6%8F%E5%8C%96">BC正規化 - 維基百科，自由的百科全書</a></li></ul></blockquote><p>基本上資料庫設計至少會做到第三正規化，除非有特殊需求才會繼續往上做，不過對我而言我是會做到 BC 正規化，所以接下來我們就以純靠北工程師的資料庫作為範例，把資料庫設計出來。</p><p>首先我們一定會有一張表，那張表可能紀錄著文章相關資訊，每篇文章一定會對應一個發文者，所以還需要紀錄發文者相關資訊，再來每篇文章可能會有零獲多筆留言的內容，所以我們需要把每筆留言都記錄下來，最好順便告訴我總共有幾筆留言，整張表最後看起來大概會像下面這張表：</p><p><img src="/img/posts/P2HowDoYouRelyOnTheKaobeiEngineer/1.png" alt="1.png"><br>Table - Sample 1</p><p>設計完之後，這樣的資料表顯然不是很好，你在取用資料的時候，可能會拿到太多你可能不需要的資料，造成 Network I&#x2F;O 上不必要的浪費，甚至紀錄了許多重複的資料，像是使用者資料，如果使用者發了 10 篇文章，那這個使用者的資料就被重複寫入 10 遍，種種不理想的原因，所以我們要開始來做正規化這件事，首先我們要做第一正規化，將去除重複性，但意思不是把重複的資料刪光光！像是上面那張表的留言、留言內容 ... 那個欄位有可能有零或多筆留言，因此我們需要把他的資料切開，效果如下：</p><p><img src="/img/posts/P2HowDoYouRelyOnTheKaobeiEngineer/2.png" alt="2.png"><br>Table - Sample 2</p><p>乍看之下好像寫入的資料量變多了欸！但接下來的才是重點，通常我會把第二正規化與第三正規化一起做，去除部分相依、去除間接相依，今天一張資料表是負責儲存使用者資料，就應該只儲存使用者資料，而不是把其他有點關係但不相干的資料也儲存進來，按照這樣的邏輯，我們會切成三張表，分別是文章資料表、使用者資料表、留言資料表，資料表樣本如下：</p><p><img src="/img/posts/P2HowDoYouRelyOnTheKaobeiEngineer/3.jpg" alt="3.jpg"><br>Table - Sample 3</p><p>在這時候還有一個概念，就是如果這個欄位的內容可以透過其他欄位或其他表格的欄位算出來，那麼這個欄位就不應該被儲存，就像是留言資料表的留言數量，留言數量可以透過 <code>GROUP BY</code> 文章編號來 <code>COUNT</code> 出來，那麼留言數量這個欄位就是多餘的，可以被刪除。</p><p><img src="/img/posts/P2HowDoYouRelyOnTheKaobeiEngineer/4.jpg" alt="4.jpg"><br>Table - Sample 4</p><p>接下來要講的 BC 正規化是複合主鍵需皆為外來鍵，我們可以擴增一個功能來當作範例，目前是一篇文章會固定搭配一張圖片，但我們讓功能更完善些，一篇文章可以搭配零或多張圖片，首要步驟是將圖片資訊切出來作為獨立的資料表，並且在文章資料表與圖片資料表當中有個連接這兩張資料表的關聯表，關聯表會以這兩張資料表的主鍵作為外來鍵參考，形成複合主鍵，同時也符合 BC 正規化的要求。</p><blockquote><ul><li>[!] 主鍵(Primary Key) 科普一下 -&gt; <a href="https://www.1keydata.com/tw/sql/sql-primary-key.html">SQL 主鍵 - 1Keydata SQL 語法教學</a></li><li>[!] 外來鍵(Foreign Key) 科普一下 -&gt; <a href="https://www.1keydata.com/tw/sql/sql-foreign-key.html">SQL 外來鍵 - 1Keydata SQL 語法教學</a></li><li>[!] 關聯表 科普一下 -&gt;</li><li>關聯表是兩張資料表的中間，在建立一張資料表作為兩張表之中的關聯，如果你不想改變原本表格的結構，那麼關聯表可以在不改變原表格之下，獨立儲存額外的資料，舉例來說，你的資料庫當中有產品資料表、訂單資料表，你的產品資料表記錄著產品名稱、定價 ... 等等相關資訊，而訂單資料表記錄著客戶資訊、出貨日期、訂單日期 ... 等等資訊，然而每個產品可能都有不同折扣，且每筆訂單都有多個產品，這時候你就可以在產品與訂單資料表當中，建立一個訂單詳細資料的關聯表，用來記錄產品的單價、折扣，資料表圖片可參考下列連結中的[連結三個資料表以建立多對多關聯性]。</li><li><a href="https://support.office.com/zh-hk/article/%E5%BD%B1%E7%89%87%EF%BC%9A%E5%BB%BA%E7%AB%8B%E5%A4%9A%E5%B0%8D%E5%A4%9A%E9%97%9C%E8%81%AF%E6%80%A7-e65bcc53-8e1c-444a-b4fb-1c0b8c1f5653">影片：建立多對多關聯性 - Access</a></li></ul></blockquote><p><img src="/img/posts/P2HowDoYouRelyOnTheKaobeiEngineer/5.png" alt="5.png"><br>Table - Sample 5</p><hr><h2 id="資料庫模型的採用"><a href="#資料庫模型的採用" class="headerlink" title="資料庫模型的採用"></a>資料庫模型的採用</h2><p>上篇 <code>[P1. 純靠北工程師怎麼做的？就只是個簡單的後端架構而已。]</code> 當中，文章尾端有提到純靠北工程師是以一項 <code>[Laravel 5 Boilerplate]</code> 專案下去修改而成的，他本身就擁有 <code>RBAC (以角色為基礎的存取控制)</code> 的設計，這方面讓我們在角色與權限上的管控可以更為方便。</p><blockquote><p>[!] RBAC 科普一下 -&gt; <a href="https://zh.wikipedia.org/wiki/%E4%BB%A5%E8%A7%92%E8%89%B2%E7%82%BA%E5%9F%BA%E7%A4%8E%E7%9A%84%E5%AD%98%E5%8F%96%E6%8E%A7%E5%88%B6">以角色為基礎的存取控制 - 維基百科，自由的百科全書</a><br><a href="https://github.com/rappasoft/laravel-boilerplate">GitHub - rappasoft&#x2F;laravel-boilerplate: The Laravel Boilerplate Project.</a></p></blockquote><p><img src="/img/posts/P2HowDoYouRelyOnTheKaobeiEngineer/6.png" alt="6.png"><br>Laravel Boilerplate 的 ER-Model</p><p>這樣的做法可以讓你在人員上的管理更為直覺、輕鬆，舉例來說今天如果純靠北工程師希望多些管理員來一同維護，我只要賦予使用者 Social Cards Administrator(管理文章的角色)，這名使用者就擁有相關的權限了，如果今天有使用者發了不適當的文章，除了直接把使用者 BAN 掉以外，也可以選擇直接把使用者的發文權限給拿掉。</p><p><img src="/img/posts/P2HowDoYouRelyOnTheKaobeiEngineer/7.png" alt="7.png"><br>純靠北工程師的 Role Management</p><hr><h2 id="加入文章的-Table"><a href="#加入文章的-Table" class="headerlink" title="加入文章的 Table"></a>加入文章的 Table</h2><p>接下來我們要開始添加些平台會需要用到的資料表，首當其衝就是文章(social_cards)了，這張資料表會需要紀錄誰發表的、文章內容是什麼、文章是否啟用、社群平台的文章 id、社群平台的讚數量、社群平台的分享數量，除此之外為了有軟刪除的功能，要加上新增時間、修改時間、刪除時間，最好再加上誰刪除的、刪除原因。</p><blockquote><p>軟刪除 科普一下 <a href="https://laravel.com/docs/5.7/eloquent#soft-deleting">Eloquent: Getting Started - Laravel - The PHP Framework For Web Artisans</a></p></blockquote><p><img src="/img/posts/P2HowDoYouRelyOnTheKaobeiEngineer/8.png" alt="8.png"><br>加上 social_cards</p><hr><h2 id="加入紀錄圖片的-Tabel"><a href="#加入紀錄圖片的-Tabel" class="headerlink" title="加入紀錄圖片的 Tabel"></a>加入紀錄圖片的 Tabel</h2><p>有時候使用者是上傳自己的圖片來發文，這時候我們就需要有張表來記錄使用者這張圖被儲存的位置，以及這張圖的相關資訊(例如上傳者、紀錄時間、軟刪除 ... 等等)。</p><p>這邊圖片資訊的部分，我們要考慮到多磁碟管理，所以需要再細切一下欄位：</p><ul><li><code>disk</code> 來自哪個硬碟。</li><li><code>file_path</code> 檔案的相對路徑。</li><li><code>file_name</code> 檔案的名稱。</li><li><code>file_type</code> 檔案的副檔名。</li></ul><p>這時候你可能會衍生出一個問題說：這樣我在 View 取用這張圖片的時候，我不就要寫成像下面這樣子嗎？這樣很醜欸！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="variable">$image</span>-&gt;disk . <span class="variable">$image</span>-&gt;file_path . <span class="variable">$image</span>-&gt;file_name . <span class="variable">$image</span>-&gt;file_type</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>我會推薦大家透過 <code>Eloquent</code> 的 <code>Attribute</code> 來解決這問題，並且結合 <code>sprintf</code> 來把路徑拼湊成完整的位址，舉例來說：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUrlAttribute</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="title function_ invoke__">sprintf</span>(</span><br><span class="line"><span class="string">&#x27;%s/%s.%s&#x27;</span>,</span><br><span class="line"><span class="variable">$this</span>-&gt;file_path,</span><br><span class="line"><span class="variable">$this</span>-&gt;file_name,</span><br><span class="line"><span class="variable">$this</span>-&gt;file_type</span><br><span class="line">);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>[!] Eloquent - Attribute 科普一下 -&gt; <a href="https://laravel.com/docs/5.7/eloquent-mutators#defining-an-accessor">Eloquent: Mutators - Laravel - The PHP Framework For Web Artisans</a></p></blockquote><p><img src="/img/posts/P2HowDoYouRelyOnTheKaobeiEngineer/9.png" alt="9.png"><br>加上 cards_image</p><hr><h2 id="記錄所有社群平台留言的-Table"><a href="#記錄所有社群平台留言的-Table" class="headerlink" title="記錄所有社群平台留言的 Table"></a>記錄所有社群平台留言的 Table</h2><p>接下來為了能夠記錄每個社群平台的貼文留言，我們需要再新增一個負責記錄留言的 Tabel，分別記錄是哪篇貼文、來自哪個社群平台、留言者的社群 id、留言內容，比較需要注意的是 Facebook 這個社群平台有「留言中的留言」，所以會需要多一個 reply_by 的欄位，負責記錄這是回覆哪比留言的。</p><p><img src="/img/posts/P2HowDoYouRelyOnTheKaobeiEngineer/10.png" alt="10.png"><br>加上 social_comments</p><hr><h2 id="加入-Issues-所需的相關-Table"><a href="#加入-Issues-所需的相關-Table" class="headerlink" title="加入 Issues 所需的相關 Table"></a>加入 Issues 所需的相關 Table</h2><p>這是自幹一個 Issues 問題回報系統的時候，所設計的簡易資料表，首先會有主體 issues 用來記錄誰回報的、問題內容、是否被關閉，以及運用上面 reply_by 的概念，就可以少建一個結構相似的表。</p><p>而 Issues 問題回報都會需要標上 Tag 標籤，像是 Bug、Wish、Question … 等等的標籤，所以會需要 labels 以及與 issues 之間的關聯表 issues_has_labels。</p><p>到這邊為止就差不多可以依據這樣的資料庫設計，開發出純靠北工程師了，相關的功能都有所需的資料表了。</p><p><img src="/img/posts/P2HowDoYouRelyOnTheKaobeiEngineer/11.png" alt="11.png"><br>加上 issues 需要的 table，分別為 issues、issues_has_labels、labels</p><hr><h2 id="下一步為文章與圖片加個關聯表"><a href="#下一步為文章與圖片加個關聯表" class="headerlink" title="下一步為文章與圖片加個關聯表"></a>下一步為文章與圖片加個關聯表</h2><p>這時候有個問題，每篇文章都固定會有一張圖片，但可不可以支援純文字發表或多圖片發表？這時候就需要在 social_cards 與 cards_image 之間多放個關聯表 card_has_images，一篇文章可以有零個或多個的圖片，而圖片只會對應到唯一的貼文。</p><p><img src="/img/posts/P2HowDoYouRelyOnTheKaobeiEngineer/12.png" alt="12.png"><br>讓文章格式並不僅限於一張附圖</p><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>在開發系統的時候，多多少少避免不了資料庫，無論是設計還是建置，有可能你有配合的資料庫管理師(DBA)可以為你操刀這一切大小事，但大多數的情況可能沒有，這時候我會很推薦後端工程師多多少少點一下這方面的技能，資料庫易學難精，學好資料庫可以讓你在後續的開發上少掉很多事情，舉例來說如果資料表一開始沒有切好，就如同文章開頭的第一張表那樣，那你可能要在後端為他開發許多 function 來使用，就算你開發好一系列的 function，你接下來會面臨的問題是效能不佳、Network I&#x2F;O 過於肥大的問題，種種問題我會建議你還是直接把資料庫設計好。</p><hr><h2 id="資料參考"><a href="#資料參考" class="headerlink" title="資料參考"></a>資料參考</h2><p>如果你也想嘗試自己寫個靠北 XXX 網站的話，專案的使用你可以參考這個專案，這項專案已經幫你完成很多事情了，例如權限與角色、信箱認證、以社群平台登入串接 ... 等等功能，純靠北工程師也是以這個專案下去修改而成的，這部分在後端架構篇有提到，一天自幹出自己的靠北網站不是夢！</p><blockquote><p><a href="https://github.com/rappasoft/laravel-5-boilerplate">GitHub - rappasoft&#x2F;laravel-5-boilerplate: A Laravel 5 Boilerplate Project - http://laravel-boilerplate.com</a></p></blockquote>]]></content>
    
    
    <summary type="html">既然是工程師，那網站當然要自幹啊！在開始介紹如何寫功能以前，要先通過兩項前置任務（如果已經有點軟體架構概念、資料庫基本知識，則可以直接跳過） ...</summary>
    
    
    
    <category term="開發日誌" scheme="https://blog.init.engineer/categories/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/"/>
    
    <category term="純靠北工程師" scheme="https://blog.init.engineer/categories/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/%E7%B4%94%E9%9D%A0%E5%8C%97%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    
    <category term="開發日誌" scheme="https://blog.init.engineer/tags/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/"/>
    
    <category term="純靠北工程師" scheme="https://blog.init.engineer/tags/%E7%B4%94%E9%9D%A0%E5%8C%97%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    <category term="Laravel" scheme="https://blog.init.engineer/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>P1. 純靠北工程師怎麼做的？就只是個簡單的後端架構而已。</title>
    <link href="https://blog.init.engineer/posts/P1HowDoYouRelyOnTheKaobeiEngineer/"/>
    <id>https://blog.init.engineer/posts/P1HowDoYouRelyOnTheKaobeiEngineer/</id>
    <published>2019-02-13T16:00:00.000Z</published>
    <updated>2019-02-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>既然是工程師，那網站當然要自幹啊！在開始介紹如何寫功能以前，要先通過兩項前置任務（如果已經有點軟體架構概念、資料庫基本知識，則可以直接跳過）：</p><ul><li><code>P1.純靠北工程師怎麼做的？就只是個簡單的後端架構而已。(本篇)</code></li><li>P2.純靠北工程師怎麼做的？就只是個簡單的資料庫模型而已。</li></ul><hr><h2 id="我們舉個壞例子"><a href="#我們舉個壞例子" class="headerlink" title="我們舉個壞例子"></a>我們舉個壞例子</h2><p>補充一點軟體架構上的知識，讓你後續閱讀起來更順手、開發更順利，如果用經驗談軟體架構的話，剛學 MVC 時，會把所有的商業邏輯、資料庫邏輯都一股腦的塞到 Controller 控制器當中，舉個發表文章的壞例子來說，使用者在送出請求之後，後端程式大概會這樣寫：</p><p>發表文章的事件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class PostsController.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Request <span class="variable">$request</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Step 1. 把 $request 的資料抓出來，並且驗證符不符合規範</span></span><br><span class="line"><span class="comment">// Step 2. 開始製作文章與圖片</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Step 3. 發表文章到 A 社群平台</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="comment">// Step 3. 如果失敗了的話 ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Step 4. 發表文章到 B 社群平台</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="comment">// Step 4. 如果失敗了的話 ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 5. 上面流程都沒問題的話，把這些資訊都存入資料庫做紀錄</span></span><br><span class="line"><span class="keyword">return</span> ... </span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="comment">// 不可預料的 Error</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>壞例子的 Action 大概是這樣</p><p>簡單的一個 Action 卻包含了驗證、製圖、發文、寫入資料庫 ... 一大堆的功能，程式碼寫越多就越難以維護與除錯，而且這樣寫的缺點有幾些，我大致整理了幾點：</p><ol><li>如果任何一個步驟的過程掛掉了，那麼後面通通都跟著掛掉了。</li><li>相同功能的程式碼，你可能在整個專案當中到處都看得到。</li><li>你可能會遇到文章已經發表到 A 社群平台，但 B 社群平台並沒有，且資料庫卻沒有這筆紀錄。</li><li>程式碼的層數可能比千層派還多。</li></ol><p>除了壞例子在後端架構上的問題以外，壞例子還有可能在 View 視圖當中塞入過多顯示邏輯，像是發表文章之後要把結果顯示給使用者看，而在 View 視圖社群平台連結的部分可能會像這樣：</p><p>文章訊息的視圖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">@if ( 判斷是否有在 A 社群平台發文 )</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;h4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge badge-pill badge-primary mt-2&quot;</span>&gt;</span>A 社群平台<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">@else</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;h4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge badge-pill badge-danger mt-2&quot;</span>&gt;</span>A 社群平台<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">@endif</span><br><span class="line"></span><br><span class="line">@if ( 判斷是否有在 B 社群平台發文 )</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;h4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge badge-pill badge-primary mt-2&quot;</span>&gt;</span>B 社群平台<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">@else</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;h4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge badge-pill badge-danger mt-2&quot;</span>&gt;</span>B 社群平台<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">@endif</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>壞例子的 Blade 大概是這樣</p><p>硬生生地把顯示邏輯塞入到 Blade 切版當中，會使你的視圖無上限的增肥，也會造成重複的程式碼在各種視圖當中不斷出現。</p><blockquote><p>[!] MVC 科普一下 -&gt; <a href="https://zh.wikipedia.org/wiki/MVC">MVC - 維基百科，自由的百科全書</a></p></blockquote><p>綜合以上的壞例子，接下來我們要做的就是逐一改善，推演成現在純靠北工程師網站的架構，下圖是壞例子的架構圖：</p><p><img src="/img/posts/P1HowDoYouRelyOnTheKaobeiEngineer/1.png" alt="1.png"><br>如果以壞例子為基礎，那麼其架構會是這樣</p><hr><h2 id="把程式碼抽離出來"><a href="#把程式碼抽離出來" class="headerlink" title="把程式碼抽離出來"></a>把程式碼抽離出來</h2><p>首先我們要把塞在 Controller 控制器當中處理的商業邏輯、資料庫邏輯抽離出來，以及塞在 View 視圖當中的顯示邏輯給抽離出來。</p><ul><li><code>Repostory</code> 處理資料庫邏輯，例如在資料庫當中寫入一筆文章資料。</li><li><code>Service</code> 處理商業邏輯，例如在社群平台發表文章。</li><li><code>Presenter</code> 處理顯示邏輯，例如社群平台的文章連結。</li></ul><p><img src="/img/posts/P1HowDoYouRelyOnTheKaobeiEngineer/2.png" alt="2.png"><br>把商業邏輯、資料庫邏輯與顯示邏輯抽離出來後的架構</p><hr><h2 id="加入些防範措施"><a href="#加入些防範措施" class="headerlink" title="加入些防範措施"></a>加入些防範措施</h2><p>如果我們能像 MVVM 一樣，弄個 ViewModel 去制約事件傳入的表單資料，並且做到驗證表單的功能，可以的話再多些判斷使用者登入狀況、使用者所擁有的角色或權限，那我們就可以在 Controller 少掉一大堆重複且功能相近的程式碼，因此我們可以加上 Middleware、Request。</p><ul><li><code>Middleware</code> 驗證使用者身份、角色或權限。</li><li><code>Request</code> 驗證表單傳入的資料格式。</li><li><del><code>Validation</code> 用來發神經的，功能跟 Request 一模一樣，明明同樣一個 Action 有 Request 就可以了，卻還是硬生生要在 Controller 裡面再寫一次 Validation，真是奇怪的版主，自己嘴自己一下。</del></li></ul><blockquote><p>[!] MVVM 科普一下 -&gt; <a href="https://zh.wikipedia.org/wiki/MVVM">MVVM - 維基百科，自由的百科全書</a></p></blockquote><p><img src="/img/posts/P1HowDoYouRelyOnTheKaobeiEngineer/3.png" alt="3.png"><br>再加入些 Middleware、Request</p><hr><h2 id="加入監聽器事件"><a href="#加入監聽器事件" class="headerlink" title="加入監聽器事件"></a>加入監聽器事件</h2><p>平台的運作總是少不了 Log 日誌，如果可以的話希望收到些事件執行的日誌，甚至每次執行都順便做某件事情，像是使用者登入就紀錄個來源、版主什麼時候把自己的學長 BAN 掉又解 BAN 又 BAN 掉又再解 BAN，這時候我們就會需要 Event 事件與 Listener 監聽器來達成我們的目的。</p><blockquote><p>[!] 事件與監聽器 科普一下 -&gt; <a href="https://laravel.tw/docs/5.2/events">事件 - Laravel - 為網頁藝術家創造的 PHP 框架</a></p></blockquote><p><img src="/img/posts/P1HowDoYouRelyOnTheKaobeiEngineer/4.png" alt="4.png"><br>加入事件與監聽器後</p><hr><h2 id="加入觀察者模式"><a href="#加入觀察者模式" class="headerlink" title="加入觀察者模式"></a>加入觀察者模式</h2><p>既然有事件上的監聽，那也就少不了資料庫上的觀察，如果可以的話，<code>Eloquent ORM</code> 的新增、刪除、修改及查詢(CRUD)都來觀察一下，最好有連動事件，像是如果有新發表的文章就順便通知一下版主。</p><blockquote><p>[!] 觀察者 科普一下 -&gt; <a href="https://laravel.com/docs/5.7/eloquent#observers">Eloquent: Getting Started - Laravel - The PHP Framework For Web Artisans</a></p></blockquote><p><img src="/img/posts/P1HowDoYouRelyOnTheKaobeiEngineer/5.png" alt="5.png"><br>再加入觀察者模式</p><hr><h2 id="除了-Presenter-以外，還有-Helpers"><a href="#除了-Presenter-以外，還有-Helpers" class="headerlink" title="除了 Presenter 以外，還有 Helpers"></a>除了 Presenter 以外，還有 Helpers</h2><p>Presenter 主要目的是在於處理一些顯示邏輯，而不是把顯示邏輯塞在 View 視圖當中，例如上面壞例子所提到社群平台連結的部分，你就可以把程式碼寫在 Presenter 當中，而在 View 視圖就僅只需要一個 <code>&#123;!! $post-&gt;getSpanLink() !!&#125;</code> 就解決。</p><p>但有些顯示邏輯是到處都會用到的，甚至每個 Presenter 都會有的，就會寫到 <code>Helpers </code> 當中，例如時間 format、Form 表單的送出與取消按鈕。</p><p><img src="/img/posts/P1HowDoYouRelyOnTheKaobeiEngineer/6.png" alt="6.png"><br>放上 Helpers</p><hr><h2 id="下一步-RESTful"><a href="#下一步-RESTful" class="headerlink" title="下一步 RESTful"></a>下一步 RESTful</h2><p>接下來要考慮到之後如果要做前後端分離或 APP 化，會需要開發 API 時候的需求，因此除了 View 視圖以外，我們還會多出一個 Response，這部分就不會有 Presenter 與 Helpers 的使用了，因為沒有畫面，只有資料上的傳遞。</p><p><img src="/img/posts/P1HowDoYouRelyOnTheKaobeiEngineer/7.png" alt="7.png"><br>除了 View 視圖，我們還要考慮到 RESTful 的開發</p><hr><h2 id="資料標準化"><a href="#資料標準化" class="headerlink" title="資料標準化"></a>資料標準化</h2><p>我們會需要前台與後台的資料不一樣，例如文章資訊的 API，前台(使用者)收到的就只會是文章圖片、文章內容與發表時間 ... 等等基本資料，不會收到這篇文章是誰發表的敏感資料，而後台(管理者)則是會收到包含誰發表的敏感資料，這時候我們就需要加上 <code>Transformer </code> 來轉換資料內容。</p><p>資料都 OK 了，最後希望每次 Response 的格式都有個規範、規則，像是加上 Hypermedia 之類的，這時候我們就需要加上 <code>Formatter</code> 來把資料格式統一化。</p><ul><li><code>Transformer</code> 轉換資料的內容，讓前台與後台所需要的資料不一樣。</li><li><code>Formatter</code> 把資料格式統一化，讓每次 Response 的格式都有個規範、規則。</li></ul><blockquote><p>[!] Hypermedia 科普一下 <a href="https://msdn.microsoft.com/en-us/magazine/jj883957.aspx">ASP.NET - Building Hypermedia Web APIs with ASP.NET Web API</a></p></blockquote><p><img src="/img/posts/P1HowDoYouRelyOnTheKaobeiEngineer/8.png" alt="8.png"><br>為 RESTful 加上 Transformer 與 Formatter</p><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>在開發上如果打從一開始就把架構給定好的話，後續無論維護、追加需求或者任何方面，其實都有非常大的顯著效果，你可能會突然興起腦中激盪想出一個很好的功能，但當你要付諸行動時卻可能因為義大利麵式的程式碼而放棄，如果你沒有因此放棄，那麼接下來你要面對的是一連串必要卻很無用的腦力激盪，起初你的熱情可能會在種種障礙當中一點一滴的消磨殆盡，與其這樣不如前面先麻煩一點，後面就不用為了這些麻煩事而讓你的專案遙遙無期。</p><hr><h2 id="資料參考"><a href="#資料參考" class="headerlink" title="資料參考"></a>資料參考</h2><p>因為是以 Laravel 為主，所以多多少少會參考一下大家架構是怎麼定的，然後在參雜一些可能在別的地方所學到的觀念， <del>最後摻在一起做成撒 ...</del>，下面兩個是這次寫文章時，又重新找出來的資料參考。</p><ul><li><a href="https://oomusou.io/laravel/architecture/">Laravel 的中大型專案架構 點燈坊</a></li><li><a href="https://hackmd.io/s/S1dlnXB4Z">LaravelConf2017 筆記 - HackMD</a></li></ul><p>如果你也想嘗試自己寫個靠北 XXX 網站的話，專案的使用你可以參考這個專案，這項專案已經幫你完成很多事情了，例如權限與角色、信箱認證、以社群平台登入串接 ... 等等功能，純靠北工程師也是以這個專案下去修改而成的，這部分在資料庫模型篇會再次提到，一天自幹出自己的靠北網站不是夢！</p><ul><li><a href="https://github.com/rappasoft/laravel-boilerplate">GitHub - rappasoft&#x2F;laravel-boilerplate: The Laravel Boilerplate Project.</a></li></ul>]]></content>
    
    
    <summary type="html">既然是工程師，那網站當然要自幹啊！在開始介紹如何寫功能以前，要先通過兩項前置任務（如果已經有點軟體架構概念、資料庫基本知識，則可以直接跳過） ...</summary>
    
    
    
    <category term="開發日誌" scheme="https://blog.init.engineer/categories/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/"/>
    
    <category term="純靠北工程師" scheme="https://blog.init.engineer/categories/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/%E7%B4%94%E9%9D%A0%E5%8C%97%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    
    <category term="開發日誌" scheme="https://blog.init.engineer/tags/%E9%96%8B%E7%99%BC%E6%97%A5%E8%AA%8C/"/>
    
    <category term="純靠北工程師" scheme="https://blog.init.engineer/tags/%E7%B4%94%E9%9D%A0%E5%8C%97%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    <category term="Laravel" scheme="https://blog.init.engineer/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>【臺灣鐵路GO】隱私權條款</title>
    <link href="https://blog.init.engineer/posts/TrainGoPrivacyPolicy/"/>
    <id>https://blog.init.engineer/posts/TrainGoPrivacyPolicy/</id>
    <published>2018-10-13T16:00:00.000Z</published>
    <updated>2018-10-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>非常歡迎您光臨「臺灣鐵路GO」（以下簡稱本應用程式），為了讓您能夠安心的使用本應用程式的各項服務與資訊，特此向您說明本應用程式的隱私權保護政策，以保障您的權益，請您詳閱下列內容：</p><h3 id="一、隱私權保護政策的適用範圍"><a href="#一、隱私權保護政策的適用範圍" class="headerlink" title="一、隱私權保護政策的適用範圍"></a>一、隱私權保護政策的適用範圍</h3><p>隱私權保護政策內容，包括本應用程式如何處理在您使用應用程式服務時收集到的個人識別資料。隱私權保護政策不適用於本應用程式以外的相關連結應用程式，也不適用於非本應用程式所委託或參與管理的人員。</p><h3 id="二、個人資料的蒐集、處理及利用方式"><a href="#二、個人資料的蒐集、處理及利用方式" class="headerlink" title="二、個人資料的蒐集、處理及利用方式"></a>二、個人資料的蒐集、處理及利用方式</h3><ul><li>當您造訪本應用程式或使用本應用程式所提供之功能服務時，我們將視該服務功能性質，請您提供必要的個人資料，並在該特定目的範圍內處理及利用您的個人資料；非經您書面同意，本應用程式不會將個人資料用於其他用途。</li><li>本應用程式在您使用服務信箱、問卷調查等互動性功能時，會保留您所提供的姓名、電子郵件地址、聯絡方式及使用時間等。</li><li>於一般瀏覽時，伺服器會自行記錄相關行徑，包括您使用連線設備的IP位址、使用時間、使用的瀏覽器、瀏覽及點選資料記錄等，做為我們增進應用程式服務的參考依據，此記錄為內部應用，決不對外公佈。</li><li>為提供精確的服務，我們會將收集的問卷調查內容進行統計與分析，分析結果之統計數據或說明文字呈現，除供內部研究外，我們會視需要公佈統計數據及說明文字，但不涉及特定個人之資料。</li></ul><h3 id="三、資料之保護"><a href="#三、資料之保護" class="headerlink" title="三、資料之保護"></a>三、資料之保護</h3><ul><li>本應用程式主機均設有防火牆、防毒系統等相關的各項資訊安全設備及必要的安全防護措施，加以保護應用程式及您的個人資料採用嚴格的保護措施，只由經過授權的人員才能接觸您的個人資料，相關處理人員皆簽有保密合約，如有違反保密義務者，將會受到相關的法律處分。</li><li>如因業務需要有必要委託其他單位提供服務時，本應用程式亦會嚴格要求其遵守保密義務，並且採取必要檢查程序以確定其將確實遵守。</li></ul><h3 id="四、應用程式對外的相關連結"><a href="#四、應用程式對外的相關連結" class="headerlink" title="四、應用程式對外的相關連結"></a>四、應用程式對外的相關連結</h3><p>本應用程式的網頁提供其他應用程式的網路連結，您也可經由本應用程式所提供的連結，點選進入其他應用程式。但該連結應用程式不適用本應用程式的隱私權保護政策，您必須參考該連結應用程式中的隱私權保護政策。</p><h3 id="五、與第三人共用個人資料之政策"><a href="#五、與第三人共用個人資料之政策" class="headerlink" title="五、與第三人共用個人資料之政策"></a>五、與第三人共用個人資料之政策</h3><p>本應用程式絕不會提供、交換、出租或出售任何您的個人資料給其他個人、團體、私人企業或公務機關，但有法律依據或合約義務者，不在此限。</p><p>前項但書之情形包括不限於：</p><ul><li>經由您書面同意。</li><li>法律明文規定。</li><li>為免除您生命、身體、自由或財產上之危險。</li><li>與公務機關或學術研究機構合作，基於公共利益為統計或學術研究而有必要，且資料經過提供者處理或蒐集者依其揭露方式無從識別特定之當事人。</li><li>當您在應用程式的行為，違反服務條款或可能損害或妨礙應用程式與其他使用者權益或導致任何人遭受損害時，經應用程式管理單位研析揭露您的個人資料是為了辨識、聯絡或採取法律行動所必要者。</li><li>有利於您的權益。</li><li>本應用程式委託廠商協助蒐集、處理或利用您的個人資料時，將對委外廠商或個人善盡監督管理之責。</li></ul><h3 id="六、Cookie-之使用"><a href="#六、Cookie-之使用" class="headerlink" title="六、Cookie 之使用"></a>六、Cookie 之使用</h3><p>為了提供您最佳的服務，本應用程式會在您的電腦中放置並取用我們的Cookie，若您不願接受Cookie的寫入，您可在您使用的瀏覽器功能項中設定隱私權等級為高，即可拒絕Cookie的寫入，但可能會導至應用程式某些功能無法正常執行 。</p><h3 id="七、隱私權保護政策之修正"><a href="#七、隱私權保護政策之修正" class="headerlink" title="七、隱私權保護政策之修正"></a>七、隱私權保護政策之修正</h3><p>本應用程式隱私權保護政策將因應需求隨時進行修正，修正後的條款將刊登於應用程式上。</p>]]></content>
    
    
    <summary type="html">非常歡迎您光臨「臺灣鐵路GO」（以下簡稱本應用程式），為了讓您能夠安心的使用本應用程式的各項服務與資訊，特此向您說明本應用程式的隱私權保護政策，以保障您的權益，請您詳閱下列內容 ...</summary>
    
    
    
    <category term="隱私權條款" scheme="https://blog.init.engineer/categories/%E9%9A%B1%E7%A7%81%E6%AC%8A%E6%A2%9D%E6%AC%BE/"/>
    
    
    <category term="臺灣鐵路GO" scheme="https://blog.init.engineer/tags/%E8%87%BA%E7%81%A3%E9%90%B5%E8%B7%AFGO/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Linux/macOS 當中，利用 XAMPP 一次運行多個網站</title>
    <link href="https://blog.init.engineer/posts/HowToRunMultipleWebsitesOnXAMPP/"/>
    <id>https://blog.init.engineer/posts/HowToRunMultipleWebsitesOnXAMPP/</id>
    <published>2018-10-05T16:00:00.000Z</published>
    <updated>2018-10-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>身為一位自由工作者，時常會接到不同廠商的網站案子，但同一時間下可能不會只有開發一個網站，但同一個通訊埠(Port)又只能連結一個網站，這時候就需要 <code>VirtualHost</code> 這種東西來解決這樣的問題了，它可以達成讓你根據 URL 的不同而觸發不同的網站來源。</p><ol><li>步驟一、首先我們必須告訴作業系統一些基本的路由，你必須打開你的 <code>終端機</code> 並且輸入以下指令:</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure><blockquote><p>補充知識：Vim是從vi發展出來的一個文字編輯器。其代碼補完、編譯及錯誤跳轉等方便編程的功能特別豐富，在程式設計師中被廣泛使用。和Emacs並列成為類Unix系統用戶最喜歡的編輯器。<br>資料來源取自於 WiKi 維基百科</p></blockquote><ol start="2"><li>步驟二、開始新增一些路由，這些路由讓你比較方便管理你的專案開發:</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">##</span><br><span class="line"># Host Database</span><br><span class="line">#</span><br><span class="line"># localhost is used to configure the loopback interface</span><br><span class="line"># when the system is booting.  Do not change this entry.</span><br><span class="line">##</span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">255.255.255.255 broadcasthost</span><br><span class="line">::1             localhost</span><br><span class="line"></span><br><span class="line">127.0.0.1       local.exampleA.com</span><br><span class="line">127.0.0.1       local.exampleB.com</span><br><span class="line">127.0.0.1       local.exampleC.com</span><br></pre></td></tr></table></figure><ol start="3"><li>步驟三、輸入完畢後，按一下 <code>ESC</code> 並且輸入 <code>:wq!</code> 即可儲存並退出，做完這些步驟後，電腦就知道如果你在瀏覽器輸入 <code>local.exampleA.com</code>、<code>local.exampleB.com</code>、<code>local.exampleC.com</code> 這些地方，那麼這些的目的地就是 <code>127.0.0.1</code> 這個 IP，但這樣還是沒辦法完成多網站的功能，因為 <code>XAMPP</code> 並不曉得哪些網域對應的是哪些專案。</li></ol><blockquote><p>補充知識： <code>:wq!</code> 這是 <code>Vim</code> 的指令，功能是 <code>w</code>(Write) 寫入檔案、<code>q</code>(Quit) 退出檔案，而驚嘆號 <code>!</code> 則是強制的意思，所以 <code>wq!</code> 意思則是強制寫入檔案並且退出。</p></blockquote><ol start="4"><li>步驟四、所以接下來才真正要使用到 <code>VirtualHost</code> 這東西，首先我們要先開啟 XAMPP 的設定檔案:</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim `路徑`</span><br></pre></td></tr></table></figure><ul><li>macOS 路徑 <code>/Applications/XAMPP/xamppfiles/etc/httpd.conf</code></li><li>Linux 路徑 <code>/opt/lampp/etc/httpd.conf</code></li></ul><ol start="5"><li>步驟五、找到一個 <code>&lt;VirtualHost *:80&gt;</code> 的地方，並且改成以下內容:</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerAdmin youremail@example.com</span><br><span class="line">    ServerName local.exampleA.com</span><br><span class="line">    DocumentRoot &quot;/Applications/XAMPP/xamppfiles/htdocs/local.exampleA.com&quot;</span><br><span class="line">    ErrorLog &quot;logs/kghs-eserc.com.tw-error.log&quot;</span><br><span class="line">    CustomLog &quot;logs/kghs-eserc.com.tw-access.log&quot; combined</span><br><span class="line">    &lt;Directory /&gt;</span><br><span class="line">        Options Indexes FollowSymLinks Includes execCGI</span><br><span class="line">        AllowOverride none</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:443&gt;</span><br><span class="line">    ServerAdmin youremail@example.com</span><br><span class="line">    ServerName local.exampleA.com</span><br><span class="line">    DocumentRoot &quot;/Applications/XAMPP/xamppfiles/htdocs/local.exampleA.com&quot;</span><br><span class="line">    ErrorLog &quot;logs/local.exampleA.com-error.log&quot;</span><br><span class="line">    CustomLog &quot;logs/local.exampleA.com-access.log&quot; combined</span><br><span class="line">    &lt;Directory /&gt;</span><br><span class="line">        Options Indexes FollowSymLinks Includes execCGI</span><br><span class="line">        AllowOverride none</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">    SSLEngine on</span><br><span class="line">    SSLCertificateFile &quot;/Applications/XAMPP/xamppfiles/apache2/conf/ssl.crt/certificate.crt&quot;</span><br><span class="line">    SSLCertificateKeyFile &quot;/Applications/XAMPP/xamppfiles/apache2/conf/ssl.key/private.key&quot;</span><br><span class="line">    SSLCertificateChainFile &quot;/Applications/XAMPP/xamppfiles/apache2/conf/ssl.crt/ca_bundle.crt&quot;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>主要注意 <code>ServerName</code>(主機名稱)、<code>DocumentRoot</code>(檔案根目錄) 這兩個地方，一個是你剛剛在 <code>hosts</code> 設定的 <code>URL</code>，一個則是你專案的位置，設定完之後重啟 <code>apache</code> 就可以依據 <code>hosts</code> 所設定的位址來瀏覽不同專案。</p>]]></content>
    
    
    <summary type="html">身為一位自由工作者，時常會接到不同廠商的網站案子，但同一時間下可能不會只有開發一個網站，但同一個通訊埠(Port)又只能連結一個網站，這時候就需要 VirtualHost ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="VirtualHost" scheme="https://blog.init.engineer/tags/VirtualHost/"/>
    
  </entry>
  
  <entry>
    <title>在 Laravel 當中，如何移除特定 Router 的 CSRF？</title>
    <link href="https://blog.init.engineer/posts/ExcludingRoutesFromTheCSRFMiddleware/"/>
    <id>https://blog.init.engineer/posts/ExcludingRoutesFromTheCSRFMiddleware/</id>
    <published>2018-09-25T16:00:00.000Z</published>
    <updated>2018-09-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Laravel</code> 在默認的情況之下，所有的路由(Route)它會自動啟用 <code>CSRF</code> 保護，這在開發的過程當中，是一個非常方便的功能。</p><p>但有時候，如果您在使用其他第三方服務時，你不需要設置 <code>Token</code> 的保護，那麼就產生了一個問題，如果第三方網站在訪問網站時，會發現網站告訴你該頁面已過期的訊息。</p><blockquote><p>The page has expired due to inactivity.<br>Please refresh and try again.</p></blockquote><p>然而在 <code>Laravel 5.1</code> 開始，<code>app/Http/Middleware/VerifyCsrfToken</code> 提供了一個 <code>$except</code> 變數屬性，這個可以讓您自定義哪些路由可以忽略 <code>CSRF</code> 的保護，舉例來說：</p><p><code>VerifyCsrfToken.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The URIs that should be excluded from CSRF verification.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$except</span> = [</span><br><span class="line">        <span class="string">&#x27;example/*&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>這樣子 <code>Laravel</code> 就會自動將你 <code>http://example.com/example/*</code> 的所有路由都忽略 <code>CSRF</code> 的保護了。</p>]]></content>
    
    
    <summary type="html">Laravel 在默認的情況之下，所有的路由(Route)它會自動啟用 CSRF 保護，這在開發的過程當中，是一個非常方便的功能 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="Laravel 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/Laravel-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="Laravel" scheme="https://blog.init.engineer/tags/Laravel/"/>
    
    <category term="CSRF" scheme="https://blog.init.engineer/tags/CSRF/"/>
    
  </entry>
  
  <entry>
    <title>如何建立 NoCaptcha（我不是機器人）的 Key、Secret？</title>
    <link href="https://blog.init.engineer/posts/HowToCreateGoogleNoCaptcha/"/>
    <id>https://blog.init.engineer/posts/HowToCreateGoogleNoCaptcha/</id>
    <published>2018-09-08T16:00:00.000Z</published>
    <updated>2018-09-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>無論在手機應用程式或者網頁應用程式，你時常會看到「我不是機器人」或「請點選下面有包含汽車的圖」的功能，這功能其實來自於 Google 提供的 <a href="https://www.google.com/recaptcha/intro/v3beta.html">reCAPTCHA</a> 服務。</p><blockquote><p>reCAPTCHA計畫是由卡內基美濃大學所發展的系統，主要目的是利用CAPTCHA技術來幫助典籍數位化的進行，這個計畫將由書本掃描下來無法準確的被光學文字辨識技術（OCR, Optical Character Recognition）識別的文字顯示在CAPTCHA問題中，讓人類在回答CAPTCHA問題時用人腦加以識別[1]。reCAPTCHA正數位化《紐約時報》（New York Times）的掃描存檔[2]，目前已經完成20年份的資料，並希望在2010年完成110年份的資料。2009年9月17日，Google宣布收購reCAPTCHA。[3]</p><ul><li>取自於 WIKI</li></ul></blockquote><p><img src="/img/posts/HowToCreateGoogleNoCaptcha/1.jpg" alt="reCAPTCHA 官方"></p><br /><hr /><br /><p>申請的方式很簡單，你只要進入官方後，點擊右上角的「My reCAPTCHA」按鈕，或者點擊<a href="https://www.google.com/recaptcha/admin">這裡</a>直接進入，你就可以看到詳細的列表、申請表單了。</p><p><img src="/img/posts/HowToCreateGoogleNoCaptcha/2.png" alt="reCAPTCHA 列表、申請表單"></p><br /><hr /><br /><p>只要填入相對應的資料，就可以直接申請 reCAPTCHA 了，「Label」是給你自己方便辨識用，你可以填寫你這個 reCAPTCHA 是用在哪個應用程式上，如果你申請很多的時候，找東西會比較方便。</p><p>接下來比較重要的是選擇你的 reCAPTCHA 種類(Choose the type of reCAPTCHA)，總共有分別三個種類，我們依序來介紹：</p><ol><li>reCAPTCHA v2</li></ol><ul><li>這個就是典型的「我不是機器人」方塊，如果使用者短時間內點太多次的話，會跳出一個類似「請點選下面有包含汽車的圖」的功能，作為防堵機器人的機制。<br><img src="/img/posts/HowToCreateGoogleNoCaptcha/3.png" alt="reCAPTCHA v2"></li></ul><ol start="2"><li>Invisible reCAPTCHA</li></ol><ul><li>這是 reCAPTCHA 提供的新功能，這個防堵機器人的機制會隱藏在後台（螢幕的右下角），當有需要時才跳出來防堵。<br><img src="/img/posts/HowToCreateGoogleNoCaptcha/4.png" alt="Invisible reCAPTCHA"></li></ul><ol start="3"><li>reCAPTCHA Android</li></ol><ul><li>這是 Android 原生裝置專用的 reCAPTCHA，這在我之前的文章有寫過詳細介紹、教學。</li><li><a href="https://blog.init.engineer/posts/AndroidSafetyNetReCAPTCHAAPI/">如何在 Android 當中引用 reCAPTCHA 來做防堵機器人的驗證。</a><br><img src="/img/posts/HowToCreateGoogleNoCaptcha/5.png" alt="reCAPTCHA Android"></li></ul><br /><hr /><br /><p>如果你選擇了「reCAPTCHA v2」、「Invisible reCAPTCHA」，那麼接下來表單會再追問你你的網域(Domains)是什麼？只要簡單的寫上即可，例如: localhost.com</p><p>如果你選擇了「reCAPTCHA Android」，那麼接下來表單會再追問你你的專案名稱(Package Names)是什麼？也是一樣簡單的寫上即可，例如: com.yourname.appname</p><p>最後同意 reCAPTCHA 團隊的服務守則，基本上同意就對了。</p><p><img src="/img/posts/HowToCreateGoogleNoCaptcha/6.png" alt="reCAPTCHA From"></p><br /><hr /><br /><p>最後你就可以獲得最重要的 Key、Secret 了，以及 reCAPTCHA 提供的簡易教學步驟，</p><p><img src="/img/posts/HowToCreateGoogleNoCaptcha/7.png" alt="reCAPTCHA"></p>]]></content>
    
    
    <summary type="html">無論在手機應用程式或者網頁應用程式，你時常會看到「我不是機器人」或「請點選下面有包含汽車的圖」的功能，這功能其實來自於 Google 提供的 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="Android 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/Android-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="Android" scheme="https://blog.init.engineer/tags/Android/"/>
    
    <category term="NoCaptcha" scheme="https://blog.init.engineer/tags/NoCaptcha/"/>
    
  </entry>
  
  <entry>
    <title>我的 GitHub 部落格收到了 warning 信件，這是怎麼回事？</title>
    <link href="https://blog.init.engineer/posts/WowGithubNotSupportRedcarpet/"/>
    <id>https://blog.init.engineer/posts/WowGithubNotSupportRedcarpet/</id>
    <published>2018-09-07T16:00:00.000Z</published>
    <updated>2018-09-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在整理 Blog 的時候收到一封信，內容大致上是這樣：</p><ul><li>[Kantai235&#x2F;Kantai235.github.io] Page build warning</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">The page build completed successfully, but returned the following warning for the `master` branch:</span><br><span class="line"></span><br><span class="line">You are currently using the &#x27;redcarpet&#x27; Markdown engine, which is no longer supported by GitHub Pages and may cease working at any time. To ensure your site continues to build, remove the &#x27;markdown&#x27; setting in your site&#x27;s &#x27;_config.yml&#x27; file and confirm your site renders as expected. For more information, see https://help.github.com/articles/updating-your-markdown-processor-to-kramdown/.</span><br><span class="line"></span><br><span class="line">For information on troubleshooting Jekyll see:</span><br><span class="line"></span><br><span class="line">  https://help.github.com/articles/troubleshooting-jekyll-builds</span><br><span class="line"></span><br><span class="line">If you have any questions you can contact us by replying to this email.</span><br></pre></td></tr></table></figure><p>大致上是在說你的 <code>_config</code> 引用了過期的套件(redcarpet)，GitHub Page 已經不支援這東西了，請你改引用 <code>kramdown</code>。</p><p>所以我們只要打開 <code>_config.yml</code> 這份設定檔文件，尋找 <code>markdown:</code> 的設定，並且將 <code>redcarpet</code> 更改為 <code>kramdown</code> 就可以解決問題了。</p>]]></content>
    
    
    <summary type="html">今天在整理 Blog 的時候收到一封信，內容大致上是這樣：[Kantai235/Kantai235.github.io] Page build warning ...</summary>
    
    
    
    <category term="經驗分享" scheme="https://blog.init.engineer/categories/%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="GitHub Pages" scheme="https://blog.init.engineer/tags/GitHub-Pages/"/>
    
  </entry>
  
  <entry>
    <title>如何建立一個自己的 Git - Gitea 架設教學</title>
    <link href="https://blog.init.engineer/posts/CreateYourGiteaServer/"/>
    <id>https://blog.init.engineer/posts/CreateYourGiteaServer/</id>
    <published>2017-07-13T16:00:00.000Z</published>
    <updated>2017-07-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果有在撰寫程式語言的人，或許就會知道 <a href="https://github.com/">GitHub</a> 這很好用的版本控制平台，另一方面很多企業徵求資訊人員的時候，通常也會要求應徵者提供自己的 <a href="https://github.com/">GitHub</a> 來讓公司知道該應徵者的 Code 能力位於哪個階段，或者該名人才有開發過哪些專案。</p><p>不過有時候礙於專案各種條款，不方便公開，但使用 <a href="https://github.com/">GitHub</a> 的話，又會限制 Private 的專案必須收費，所以今天要來推薦一套開源的產品，叫做「<a href="http://gitea.io/">Gitea</a>」，這東西它可以將類似於 <a href="https://github.com/">GitHub</a> 的網站架設於自己的伺服器當中，那我們接下來就直接開始吧！</p><p><a href="https://gitea.io/zh-TW/">Gitea</a> &#x3D;&gt; <a href="https://gitea.io/zh-TW/">https://gitea.io/zh-TW/</a></p><p><img src="/img/posts/CreateYourGiteaServer/1.png" alt="Gitea"></p><p>以下教學的作業系統為 macOS High Sierra 10.13</p><p>首先我們必須要安裝 <a href="https://brew.sh/index_zh-tw.html">Homebrew</a> 這套件管理工具。</p><blockquote><p>Homebrew是一款自由及開放原始碼的軟體套件管理系統，用以簡化Mac OS X系統上的軟體安裝過程，最初由馬克斯·霍威爾（Max Howell）寫成。該包管理器在Ruby on Rails社群廣為人知，因其可延伸性得到了一致好評。<br>內容參考 <a href="https://zh.wikipedia.org/wiki/Homebrew">https://zh.wikipedia.org/wiki/Homebrew</a></p></blockquote><p><img src="/img/posts/CreateYourGiteaServer/2.jpg" alt="Homebrew"></p><p>請開啟你的終端機，並輸入以下指令來安裝 Homebrew</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><p>安裝完畢了以後，我們需要透過 Homebrew 來安裝 Gitea：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap go-gitea/gitea</span><br><span class="line">brew install gitea</span><br></pre></td></tr></table></figure><p>接下來我們就可以直接來架設 Gitea 伺服器了，以下是他的功能簡介(Help)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">NAME:</span><br><span class="line">   Gitea - A painless self-hosted Git service</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   gitea [global options] command [command options] [arguments...]</span><br><span class="line"></span><br><span class="line">VERSION:</span><br><span class="line">   1.0.2</span><br><span class="line"></span><br><span class="line">COMMANDS:</span><br><span class="line">     web      Start Gitea web server</span><br><span class="line">     serv     This command should only be called by SSH shell</span><br><span class="line">     update   This command should only be called by Git hook</span><br><span class="line">     dump     Dump Gitea files and database</span><br><span class="line">     cert     Generate self-signed certificate</span><br><span class="line">     admin    Preform admin operations on command line</span><br><span class="line">     help, h  Shows a list of commands or help for one command</span><br><span class="line"></span><br><span class="line">GLOBAL OPTIONS:</span><br><span class="line">   --help, -h     show help</span><br><span class="line">   --version, -v  print the version</span><br></pre></td></tr></table></figure><p>那我們可以先來試試看架設 Gitea web server，只要在終端機當中輸入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitea web</span><br></pre></td></tr></table></figure><p>就可以開啟 Gitea Server 囉！不過要記得開啟你的資料庫，因為他會需要將使用者／其他設定存進資料庫當中。</p><p>其他 Gitea 使用上的教學，可以參考這篇文章：</p><p><a href="https://yami.io/gitea/">建置自己的 Git 伺服器與網站：Gitea（Gogs）</a></p>]]></content>
    
    
    <summary type="html">如果有在撰寫程式語言的人，或許就會知道 GitHub 這很好用的版本控制平台，另一方面很多企業徵求資訊人員的時候，通常也會要求應徵者提供自己的 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="Gitea" scheme="https://blog.init.engineer/tags/Gitea/"/>
    
  </entry>
  
  <entry>
    <title>如何利用 JavaScript 在 HTML5 的 Canvas 標籤中繪圖 - 基礎教學</title>
    <link href="https://blog.init.engineer/posts/HTML5CanvasBasic/"/>
    <id>https://blog.init.engineer/posts/HTML5CanvasBasic/</id>
    <published>2017-06-13T16:00:00.000Z</published>
    <updated>2017-06-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<style>    canvas {        background: #eee;        border: 3px solid #838383;    }</style><blockquote><p>HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像。画布是一个矩形区域，您可以控制其每一像素。canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。<br>內容來源：<a href="http://www.w3school.com.cn/html5/html_5_canvas.asp">http://www.w3school.com.cn/html5/html_5_canvas.asp</a></p></blockquote><p>是的，這次要帶給大家的是 Canvas 標籤的基礎教學，它就像一塊畫布，能讓你在 HTML 標籤當中繪圖、動畫、遊戲，那我們就來個簡單的範例吧，就是做出一款經典的打磚塊遊戲！那我們首先要建立一個畫布，這個畫布大小是 480 * 320 的大小，並且在下方會有個開始遊戲的按鈕，按下去後，才開始執行遊戲：</p><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 建立一個 canvas 標籤，id 為 canvas_1，大小為 480 * 320 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas_1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;480&quot;</span> <span class="attr">height</span>=<span class="string">&quot;320&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 倘若使用者的瀏覽器並不支援 canvas，將會顯示該段內容。 --&gt;</span></span><br><span class="line">    您的瀏覽器必須支援 HTML5 標籤語法，才能遊玩該遊戲。</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>開始遊戲<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="實例"><a href="#實例" class="headerlink" title="實例"></a>實例</h1><p><canvas class="" id="canvas_1" width="480" height="320"></canvas></p><button>開始遊戲</button><p>既然是經典的打磚塊遊戲，那麼應該要會有顆球在畫布當中跑來跑去嘛！所以我們要在 button 標籤當中加入 onclikc 事件，去啟動 JavaScript 的方法：</p><h1 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 建立一個 canvas 標籤，id 為 canvas_1，大小為 480 * 320 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas_2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;480&quot;</span> <span class="attr">height</span>=<span class="string">&quot;320&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 倘若使用者的瀏覽器並不支援 canvas，將會顯示該段內容。 --&gt;</span></span><br><span class="line">    您的瀏覽器必須支援 HTML5 標籤語法，才能遊玩該遊戲。</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;canvasGameStart_canvas_2()&quot;</span>&gt;</span>開始遊戲<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">canvasGameStart_canvas_2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 抓取 id 為 canvas_1 的物件。</span></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas_2&quot;</span>);</span><br><span class="line">    <span class="comment">// 建立繪圖物件，目前只支援 2d</span></span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 球體的座標</span></span><br><span class="line">    <span class="keyword">var</span> ballPositionX = canvas.<span class="property">width</span>  / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> ballPositionY = canvas.<span class="property">height</span> / <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 球體移動的速度</span></span><br><span class="line">    <span class="keyword">var</span> ballMoveX = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> ballMoveY = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">drawBall</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 開始一條路徑(繪圖)，或者重置當前的路徑(繪圖)</span></span><br><span class="line">        ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">        <span class="comment">// 繪製弧線或曲線</span></span><br><span class="line">        ctx.<span class="title function_">arc</span>(ballPositionX, ballPositionY, <span class="number">10</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 繪製顏色、漸變或模式</span></span><br><span class="line">        ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#0095DD&quot;</span>;</span><br><span class="line">        <span class="comment">// 填充當前的圖案</span></span><br><span class="line">        ctx.<span class="title function_">fill</span>();</span><br><span class="line">        <span class="comment">// 關閉當前繪圖</span></span><br><span class="line">        ctx.<span class="title function_">closePath</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 清除畫面 clearPect(左上角的X座標, 左上角的Y座標, 寬度, 高度)</span></span><br><span class="line">        ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>);</span><br><span class="line">        <span class="comment">// 重新畫出球體</span></span><br><span class="line">        <span class="title function_">drawBall</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重新計算球體下一次的位置</span></span><br><span class="line">        ballPositionX += ballMoveX; </span><br><span class="line">        ballPositionY += ballMoveY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setInterval(function, delay)</span></span><br><span class="line">    <span class="comment">// 每隔 delay 毫秒，執行輸入 function(函數)</span></span><br><span class="line">    <span class="built_in">setInterval</span>(draw, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這邊要稍微特別解釋一下 <code>arc()</code> 這方法，可以參考下圖：</p><p><img src="/img/posts/HTML5CanvasBasic/1.gif" alt="W3C arc() image"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x                = 圓中心的 X 座標。</span></span><br><span class="line"><span class="comment">// y                = 圓中心的 Y 座標。</span></span><br><span class="line"><span class="comment">// r                = 圓的半徑。</span></span><br><span class="line"><span class="comment">// sAngle           = 起始角度，以弧度計算。</span></span><br><span class="line"><span class="comment">// eAngle           = 結束角度，以弧度計算。</span></span><br><span class="line"><span class="comment">// counterclockwise = 定義順時針繪圖還是逆時針繪圖，True 為順時針；False 為逆時針。</span></span><br><span class="line">context.<span class="title function_">arc</span>(x, y, r, sAngle, eAngle, counterclockwise);</span><br></pre></td></tr></table></figure><h1 id="實例-1"><a href="#實例-1" class="headerlink" title="實例"></a>實例</h1><p><canvas id="canvas_2" width="480" height="320">您的瀏覽器必須支援 HTML5 標籤語法，才能遊玩該遊戲。</canvas></p><button onclick="canvasGameStart_canvas_2()">開始遊戲</button><script>function canvasGameStart_canvas_2() {    var canvas = document.getElementById("canvas_2");    var ctx = canvas.getContext("2d");    var ballPositionX = canvas.width  / 2;    var ballPositionY = canvas.height / 2;    var ballMoveX = 2;    var ballMoveY = 2;    function drawBall() {        ctx.beginPath();        ctx.arc(ballPositionX, ballPositionY, 10, 0, Math.PI * 2);        ctx.fillStyle = "#0095DD";        ctx.fill();        ctx.closePath();    }    function draw() {        ctx.clearRect(0, 0, canvas.width, canvas.height);        drawBall();        ballPositionX += ballMoveX;         ballPositionY += ballMoveY;    }    setInterval(draw, 10);}</script><p>然後那顆球就這麼的直直掉下去了，這並不是我們想要的！我們希望他碰到牆壁的時候，能夠反彈，如果更白話一點來講的話，如果球體碰到畫框的邊界，就讓球體以反方向彈回去，那麼我們會修改到 JavaScript 的一些 function：</p><p>#JavaScript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定義球體的半徑</span></span><br><span class="line"><span class="keyword">var</span> ballRadius = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> ballMoveX = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> ballMoveY = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Code ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 計算球體下一次 X 座標的位置</span></span><br><span class="line">    <span class="keyword">var</span> ballNextPositionX = ballPositionX + ballMoveX;</span><br><span class="line">    <span class="comment">// 如果碰到右邊(canvas.width-ballRadius) 或者左邊(ballRadius)</span></span><br><span class="line">    <span class="keyword">if</span>(ballNextPositionX &gt; canvas.<span class="property">width</span>-ballRadius || ballNextPositionX &lt; ballRadius)</span><br><span class="line">        <span class="comment">// 改變 X 軸前進座標的方向</span></span><br><span class="line">        ballMoveX *= -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 計算球體下一次 Y 座標的位置</span></span><br><span class="line">    <span class="keyword">var</span> ballNextPositionY = ballPositionY + ballMoveY;</span><br><span class="line">    <span class="comment">// 如果碰到底端(canvas.height-ballRadius) 或者頂端(ballRadius)</span></span><br><span class="line">    <span class="keyword">if</span>(ballNextPositionY &gt; canvas.<span class="property">height</span>-ballRadius || ballNextPositionY &lt; ballRadius)</span><br><span class="line">        <span class="comment">// 改變 Y 軸前進座標的方向</span></span><br><span class="line">        ballMoveY *= -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Code ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="實例-2"><a href="#實例-2" class="headerlink" title="實例"></a>實例</h1><p><canvas id="canvas_3" width="480" height="320">您的瀏覽器必須支援 HTML5 標籤語法，才能遊玩該遊戲。</canvas></p><button onclick="canvasGameStart_canvas_3()">開始遊戲</button><script>function canvasGameStart_canvas_3() {    var canvas = document.getElementById("canvas_3");    var ctx = canvas.getContext("2d");    var ballPositionX = canvas.width  / 2;    var ballPositionY = canvas.height / 2;    var ballRadius = 10;    var ballMoveX = 2;    var ballMoveY = 2;    function drawBall() {        ctx.beginPath();        ctx.arc(ballPositionX, ballPositionY, ballRadius, 0, Math.PI * 2);        ctx.fillStyle = "#0095DD";        ctx.fill();        ctx.closePath();    }    function draw() {        ctx.clearRect(0, 0, canvas.width, canvas.height);        drawBall();        var ballNextPositionX = ballPositionX + ballMoveX;        if(ballNextPositionX > canvas.width-ballRadius || ballNextPositionX < ballRadius)            ballMoveX *= -1;        var ballNextPositionY = ballPositionY + ballMoveY;        if(ballNextPositionY > canvas.height-ballRadius || ballNextPositionY < ballRadius)            ballMoveY *= -1;        ballPositionX += ballMoveX;         ballPositionY += ballMoveY;    }    setInterval(draw, 10);}</script><p>接下來我們要來繪製出給使用者操縱的板子，並且放置於底部：</p><h1 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 板子的高度及寬度</span></span><br><span class="line"><span class="keyword">var</span> paddleHeight = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> paddleWidth = <span class="number">75</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將板子放置在底部中間</span></span><br><span class="line"><span class="keyword">var</span> paddleX = (canvas.<span class="property">width</span>-paddleWidth)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 紀錄左右鍵是否被按下了</span></span><br><span class="line"><span class="keyword">var</span> rightPressed = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> leftPressed = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加事件(keydown = 當鍵盤上有按鍵被按下，keyup = 當鍵盤上有按鍵被放開)</span></span><br><span class="line"><span class="comment">// addEventListener(event, function, useCapture)</span></span><br><span class="line"><span class="comment">// event        = 事件名稱的字符串。</span></span><br><span class="line"><span class="comment">// function     = 事件觸發後執行的函數。</span></span><br><span class="line"><span class="comment">// useCapture   = 是否在捕獲階段執行。</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keydown&quot;</span>, keyDownHandler, <span class="literal">false</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keyup&quot;</span>, keyUpHandler, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 當鍵盤上有按鍵被按下了</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">keyDownHandler</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span>(e.<span class="property">keyCode</span>) &#123;</span><br><span class="line">        <span class="comment">// 右鍵鍵盤控制代碼</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">            rightPressed = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 左鍵鍵盤控制代碼</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">            leftPressed = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 當鍵盤上有按鍵被放開了</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">keyUpHandler</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span>(e.<span class="property">keyCode</span>) &#123;</span><br><span class="line">        <span class="comment">// 右鍵鍵盤控制代碼</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">            rightPressed = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 左鍵鍵盤控制代碼</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">            leftPressed = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 繪製板子</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">drawPaddle</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 開始繪製</span></span><br><span class="line">    ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">    <span class="comment">// 繪製矩形 rect(左上方X座標, 左上方Y座標, 矩形寬度, 矩形高度)</span></span><br><span class="line">    ctx.<span class="title function_">rect</span>(paddleX, canvas.<span class="property">height</span>-paddleHeight, paddleWidth, paddleHeight);</span><br><span class="line">    <span class="comment">// 繪製顏色、漸變或模式</span></span><br><span class="line">    ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#0095DD&quot;</span>;</span><br><span class="line">    <span class="comment">// 填充當前的圖案</span></span><br><span class="line">    ctx.<span class="title function_">fill</span>();</span><br><span class="line">    <span class="comment">// 結束繪製</span></span><br><span class="line">    ctx.<span class="title function_">closePath</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Code ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 板子向右邊移動，但還沒超出範圍</span></span><br><span class="line">    <span class="keyword">if</span>(rightPressed &amp;&amp; paddleX &lt; canvas.<span class="property">width</span>-paddleWidth)</span><br><span class="line">        paddleX += <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 板子向左邊移動，但還沒超出範圍</span></span><br><span class="line">    <span class="keyword">if</span>(leftPressed &amp;&amp; paddleX &gt; <span class="number">0</span>)   </span><br><span class="line">        paddleX -= <span class="number">7</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Code ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="實例-3"><a href="#實例-3" class="headerlink" title="實例"></a>實例</h1><p><canvas id="canvas_4" width="480" height="320">您的瀏覽器必須支援 HTML5 標籤語法，才能遊玩該遊戲。</canvas></p><button onclick="canvasGameStart_canvas_4()">開始遊戲</button><script>function canvasGameStart_canvas_4() {    var canvas = document.getElementById("canvas_4");    var ctx = canvas.getContext("2d");    var ballPositionX = canvas.width  / 2;    var ballPositionY = canvas.height / 2;    var ballRadius = 10;    var ballMoveX = 2;    var ballMoveY = 2;    var paddleHeight = 10;    var paddleWidth = 75;    var paddleX = (canvas.width-paddleWidth)/2;    var rightPressed = false;    var leftPressed = false;    document.addEventListener("keydown", keyDownHandler, false);    document.addEventListener("keyup", keyUpHandler, false);    function keyDownHandler(e) {        switch(e.keyCode) {            case 39:                rightPressed = true;                break;            case 37:                leftPressed = true;                break;        }    }    function keyUpHandler(e) {        switch(e.keyCode) {            case 39:                rightPressed = false;                break;            case 37:                leftPressed = false;                break;        }    }    function drawBall() {        ctx.beginPath();        ctx.arc(ballPositionX, ballPositionY, ballRadius, 0, Math.PI * 2);        ctx.fillStyle = "#0095DD";        ctx.fill();        ctx.closePath();    }    function drawPaddle() {        ctx.beginPath();        ctx.rect(paddleX, canvas.height-paddleHeight, paddleWidth, paddleHeight);        ctx.fillStyle = "#0095DD";        ctx.fill();        ctx.closePath();    }    function draw() {        ctx.clearRect(0, 0, canvas.width, canvas.height);        drawBall();        drawPaddle();        if(rightPressed && paddleX < canvas.width-paddleWidth)            paddleX += 7;        if(leftPressed && paddleX > 0)               paddleX -= 7;        var ballNextPositionX = ballPositionX + ballMoveX;        if(ballNextPositionX > canvas.width-ballRadius || ballNextPositionX < ballRadius)            ballMoveX *= -1;        var ballNextPositionY = ballPositionY + ballMoveY;        if(ballNextPositionY > canvas.height-ballRadius || ballNextPositionY < ballRadius)            ballMoveY *= -1;        ballPositionX += ballMoveX;         ballPositionY += ballMoveY;    }    setInterval(draw, 10);}</script><p>到目前為止都還蠻正常的，但還是有些許小缺點，我們接下來希望球體碰到底下時，代表我們的板子並沒有接到球體，遊戲必須重新開始，而球體碰到我們的板子時，才執行反彈球體的動作，所以我們必須修改 <code>draw()</code> 的一些寫法：</p><h1 id="JavaScript-2"><a href="#JavaScript-2" class="headerlink" title="JavaScript"></a>JavaScript</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原本的寫法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Code ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ballNextPositionY = ballPositionY + ballMoveY;</span><br><span class="line">    <span class="keyword">if</span>(ballNextPositionY &gt; canvas.<span class="property">height</span>-ballRadius || ballNextPositionY &lt; ballRadius)</span><br><span class="line">        ballMoveY *= -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Code ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改過後的寫法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Code ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 球體下一次 Y 軸的位置</span></span><br><span class="line">    <span class="keyword">var</span> ballNextPositionY = ballPositionY + ballMoveY;</span><br><span class="line">    <span class="comment">// 檢查球體 Y 軸位置有沒有碰到頂端</span></span><br><span class="line">    <span class="keyword">if</span>(ballNextPositionY &lt; ballRadius)</span><br><span class="line">        <span class="comment">// 反轉移動方向</span></span><br><span class="line">        ballMoveY *= -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 檢查球體 Y 軸有沒有碰到底端</span></span><br><span class="line">    <span class="keyword">if</span>(ballNextPositionY &gt; canvas.<span class="property">height</span>-ballRadius)</span><br><span class="line">        <span class="comment">// 再次檢查球體 Y 軸有沒有碰到板子</span></span><br><span class="line">        <span class="keyword">if</span>(ballPositionX &gt; paddleX &amp;&amp; ballPositionX &lt; paddleX + paddleWidth)</span><br><span class="line">            <span class="comment">// 反轉移動方向</span></span><br><span class="line">            ballMoveY *= -<span class="number">1</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Code ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="實例-4"><a href="#實例-4" class="headerlink" title="實例"></a>實例</h1><p><canvas id="canvas_5" width="480" height="320">您的瀏覽器必須支援 HTML5 標籤語法，才能遊玩該遊戲。</canvas></p><button onclick="canvasGameStart_canvas_5()">開始遊戲</button><script>function canvasGameStart_canvas_5() {    var canvas = document.getElementById("canvas_5");    var ctx = canvas.getContext("2d");    var ballPositionX = canvas.width  / 2;    var ballPositionY = canvas.height / 2;    var ballRadius = 10;    var ballMoveX = 2;    var ballMoveY = 2;    var paddleHeight = 10;    var paddleWidth = 75;    var paddleX = (canvas.width-paddleWidth)/2;    var rightPressed = false;    var leftPressed = false;    document.addEventListener("keydown", keyDownHandler, false);    document.addEventListener("keyup", keyUpHandler, false);    function keyDownHandler(e) {        switch(e.keyCode) {            case 39:                rightPressed = true;                break;            case 37:                leftPressed = true;                break;        }    }    function keyUpHandler(e) {        switch(e.keyCode) {            case 39:                rightPressed = false;                break;            case 37:                leftPressed = false;                break;        }    }    function drawBall() {        ctx.beginPath();        ctx.arc(ballPositionX, ballPositionY, ballRadius, 0, Math.PI * 2);        ctx.fillStyle = "#0095DD";        ctx.fill();        ctx.closePath();    }    function drawPaddle() {        ctx.beginPath();        ctx.rect(paddleX, canvas.height-paddleHeight, paddleWidth, paddleHeight);        ctx.fillStyle = "#0095DD";        ctx.fill();        ctx.closePath();    }    function draw() {        ctx.clearRect(0, 0, canvas.width, canvas.height);        drawBall();        drawPaddle();        if(rightPressed && paddleX < canvas.width-paddleWidth)            paddleX += 7;        if(leftPressed && paddleX > 0)               paddleX -= 7;        var ballNextPositionX = ballPositionX + ballMoveX;        if(ballNextPositionX > canvas.width-ballRadius || ballNextPositionX < ballRadius)            ballMoveX *= -1;        var ballNextPositionY = ballPositionY + ballMoveY;        if(ballNextPositionY < ballRadius)            ballMoveY *= -1;        if(ballNextPositionY > canvas.height-ballRadius)            if(ballPositionX > paddleX && ballPositionX < paddleX + paddleWidth)                ballMoveY *= -1;         ballPositionX += ballMoveX;         ballPositionY += ballMoveY;    }    setInterval(draw, 10);}</script><p>是的！球體如果沒有碰到我們的板子，那球體將會直直的掉下去了，球體如果碰到我們的板子，那球體將會反彈，基本物件都做好了，那我們接下來必須開始做我們的磚塊了！</p><h1 id="JavaScript-3"><a href="#JavaScript-3" class="headerlink" title="JavaScript"></a>JavaScript</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> brickRowCount       = <span class="number">3</span>;    <span class="comment">// 磚塊列數</span></span><br><span class="line"><span class="keyword">var</span> brickColumnCount    = <span class="number">5</span>;    <span class="comment">// 磚塊行數</span></span><br><span class="line"><span class="keyword">var</span> brickWidth          = <span class="number">75</span>;   <span class="comment">// 磚塊寬度</span></span><br><span class="line"><span class="keyword">var</span> brickHeight         = <span class="number">20</span>;   <span class="comment">// 磚塊高度</span></span><br><span class="line"><span class="keyword">var</span> brickPadding        = <span class="number">10</span>;   <span class="comment">// 磚塊間隔空白</span></span><br><span class="line"><span class="keyword">var</span> brickOffsetTop      = <span class="number">30</span>;   <span class="comment">// 磚塊離上邊牆距離</span></span><br><span class="line"><span class="keyword">var</span> brickOffsetLeft     = <span class="number">30</span>;   <span class="comment">// 磚塊離左邊牆距離</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bricks 初值為空陣列</span></span><br><span class="line"><span class="keyword">var</span> bricks = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把磚塊在螢幕上的位置保存在一個二維陣列中，共有 brickColumnCount 行，brickRowCount 列，也將用於以後的碰撞檢測</span></span><br><span class="line"><span class="comment">// brickColumnCount 行迴圈</span></span><br><span class="line"><span class="keyword">for</span>(column = <span class="number">0</span>; column &lt; brickColumnCount; column++) &#123;</span><br><span class="line">    <span class="comment">// 初值為空陣列</span></span><br><span class="line">    bricks[column] = [];</span><br><span class="line">    <span class="comment">// brickRowCount 列迴圈</span></span><br><span class="line">    <span class="keyword">for</span>(row = <span class="number">0</span>; row &lt; brickRowCount; row++)</span><br><span class="line">        <span class="comment">// 將每一個磚塊 X、Y 軸座標初始值設定 0</span></span><br><span class="line">        bricks[column][row] = &#123;</span><br><span class="line">            <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="number">0</span></span><br><span class="line">        &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">drawBricks</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// brickColumnCount 行迴圈</span></span><br><span class="line">    <span class="keyword">for</span>(column = <span class="number">0</span>; column &lt; brickColumnCount; column++) &#123;</span><br><span class="line">        <span class="comment">// brickRowCount 列迴圈</span></span><br><span class="line">        <span class="keyword">for</span>(row = <span class="number">0</span>; row &lt; brickRowCount; row++) &#123;</span><br><span class="line">            <span class="comment">// 磚塊 X 軸 = (行數 * (磚塊寬度 + 磚塊間隔空白)) + 磚塊離左邊牆距離</span></span><br><span class="line">            <span class="keyword">var</span> brickX = (column * (brickWidth + brickPadding)) + brickOffsetLeft;</span><br><span class="line">            <span class="comment">// 磚塊 Y 軸 = (列數 * (磚塊高度 + 磚塊間隔空白)) + 磚塊離上邊牆距離</span></span><br><span class="line">            <span class="keyword">var</span> brickY = (row * (brickHeight + brickPadding)) + brickOffsetTop;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 磚塊 x 軸座標</span></span><br><span class="line">            bricks[column][row].<span class="property">x</span> = brickX;</span><br><span class="line">            <span class="comment">// 磚塊 y 軸座標</span></span><br><span class="line">            bricks[column][row].<span class="property">y</span> = brickY;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 開始繪製磚塊</span></span><br><span class="line">            ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">            ctx.<span class="title function_">rect</span>(brickX, brickY, brickWidth, brickHeight);</span><br><span class="line">            ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#0095DD&quot;</span>;</span><br><span class="line">            ctx.<span class="title function_">fill</span>();</span><br><span class="line">            ctx.<span class="title function_">closePath</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Code ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 開始繪製磚塊</span></span><br><span class="line">    <span class="title function_">drawBricks</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Code ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="實例-5"><a href="#實例-5" class="headerlink" title="實例"></a>實例</h1><p><canvas id="canvas_6" width="480" height="320">您的瀏覽器必須支援 HTML5 標籤語法，才能遊玩該遊戲。</canvas></p><button onclick="canvasGameStart_canvas_6()">開始遊戲</button><script>function canvasGameStart_canvas_6() {    var canvas_6 = document.getElementById("canvas_6");    var ctx_6 = canvas_6.getContext("2d");    var ballPositionX_6 = canvas_6.width  / 2;    var ballPositionY_6 = canvas_6.height / 2;    var ballRadius_6 = 10;    var ballMoveX_6 = 2;    var ballMoveY_6 = 2;    var brickRowCount_6 = 3;    var brickColumnCount_6 = 5;    var brickWidth_6 = 75;    var brickHeight_6 = 20;    var brickPadding_6 = 10;    var brickOffsetTop_6 = 30;    var brickOffsetLeft_6 = 30;    var bricks_6 = [];    for(column_6 = 0; column_6 < brickColumnCount_6; column_6++) {        bricks_6[column_6] = [];        for(row_6 = 0; row_6 < brickRowCount_6; row_6++)            bricks_6[column_6][row_6] = { x_6: 0, y_6: 0};    }    function drawBricks_6() {        for(column_6 = 0; column_6 < brickColumnCount_6; column_6++)            for(row_6 = 0; row_6 < brickRowCount_6; row_6++) {                var brickX_6 = (column_6 * (brickWidth_6 + brickPadding_6)) + brickOffsetLeft_6;                var brickY_6 = (row_6 * (brickHeight_6 + brickPadding_6)) + brickOffsetTop_6;                bricks_6[column_6][row_6].x_6 = brickX_6;                bricks_6[column_6][row_6].y_6 = brickY_6;                ctx_6.beginPath();                ctx_6.rect(brickX, brickY, brickWidth, brickHeight);                ctx_6.fillStyle = "#0095DD";                ctx_6.fill();                ctx_6.closePath();            }    }    var paddleHeight_6 = 10;    var paddleWidth_6 = 75;    var paddleX_6 = (canvas_6.width - paddleWidth_6) / 2;    var rightPressed_6 = false;    var leftPressed_6 = false;    document.addEventListener("keydown", keyDownHandler_6, false);    document.addEventListener("keyup", keyUpHandler_6, false);    function keyDownHandler_6(e_6) {        switch(e_6.keyCode) {            case 39:                rightPressed_6 = true;                break;            case 37:                leftPressed_6 = true;                break;        }    }    function keyUpHandler_6(e_6) {        switch(e_6.keyCode) {            case 39:                rightPressed_6 = false;                break;            case 37:                leftPressed_6 = false;                break;        }    }    function drawBall_6() {        ctx_6.beginPath();        ctx_6.arc(ballPositionX_6, ballPositionY_6, ballRadius_6, 0, Math.PI * 2);        ctx_6.fillStyle = "#0095DD";        ctx_6.fill();        ctx_6.closePath();    }    function drawPaddle_6() {        ctx_6.beginPath();        ctx_6.rect(paddleX_6, canvas_6.height - paddleHeight_6, paddleWidth_6, paddleHeight_6);        ctx_6.fillStyle = "#0095DD";        ctx_6.fill();        ctx_6.closePath();    }    function draw_6() {        ctx_6.clearRect(0, 0, canvas_6.width, canvas_6.height);        drawBall_6();        drawPaddle_6();        drawBricks_6();        if(rightPressed_6 && paddleX_6 < canvas.width - paddleWidth_6)            paddleX_6 += 7;        else if(leftPressed_6 && paddleX_6 > 0)            paddleX_6 -= 7;        var ballNextPositionX_6 = ballPositionX_6 + ballMoveX_6;        if(ballNextPositionX_6 > canvas_6.width - ballRadius_6 || ballNextPositionX_6 < ballRadius_6)            ballMoveX_6 *= -1;        var ballNextPositionY_6 = ballPositionY_6 + ballMoveY_6;        if(ballNextPositionY_6 < ballRadius_6)            ballMoveY_6 *= -1;        if(ballNextPositionY_6 > canvas_6.height - ballRadius_6)            if(ballPositionX_6 > paddleX_6 && ballPositionX_6 < paddleX_6 + paddleWidth_6)                ballMoveY_6 *= -1;         ballPositionX_6 += ballMoveX_6;         ballPositionY_6 += ballMoveY_6;    }    setInterval(draw_6, 10);}</script><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="http://newsletter.ascc.sinica.edu.tw/news/read_news.php?nid=3745">網頁2D遊戲開發-以打磚塊遊戲為例</a></li><li><a href="http://www.w3school.com.cn/index.html">W3school 在線教程</a></li><li><a href="https://developer.mozilla.org/zh-TW/">Mozilla Developer Network</a></li></ul>]]></content>
    
    
    <summary type="html">HTML5 的 canvas 元素使用 JavaScript 在網頁上繪製圖像。畫布是一個矩形區域，您可以控制其每個 Pixel ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="JavaScript 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/JavaScript-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="Canvas" scheme="https://blog.init.engineer/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Android 當中，引用 reCAPTCHA 來做防堵機器人的驗證。</title>
    <link href="https://blog.init.engineer/posts/AndroidSafetyNetReCAPTCHAAPI/"/>
    <id>https://blog.init.engineer/posts/AndroidSafetyNetReCAPTCHAAPI/</id>
    <published>2017-06-12T16:00:00.000Z</published>
    <updated>2017-06-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我終於畢業啦(撒花)，不過玩咖的路上是沒有停歇的，偶然在公司工程師群組看到一則的新聞：</p><blockquote><p>Google上周五（6&#x2F;9）釋出了支援Android平台的reCAPTCHA API，此一API採用的是Google甫於今年3月發表的隱形reCAPTCHA技術，可於背景辨識用戶是真人或機器人，去除用戶使用行動程式的障礙。<br>新聞來源：<a href="http://www.ithome.com.tw/news/114878">http://www.ithome.com.tw/news/114878</a></p></blockquote><p>面白い(有趣)！我們就來玩玩看吧，於是找到了 reCAPTCHA 的官方文件：</p><p><a href="https://developer.android.com/training/safetynet/recaptcha.html#tos">SafetyNet reCAPTCHA API Android Developers</a></p><p>【！注意！】在開始以前，這邊有個小地方需要注意，為了能夠正常使用這個 API，你的應用程式必須在 <code>AndroidManifest.xml</code> 文件中將 <code>minSdkVersion</code> 設置為 <code>14</code> 或 <code>更高</code>。</p><p>單純看注意，一定沒有人會聽的，所以我在這邊必須再次說明，你必須在 <code>AndroidManifest.xml</code> 當中加入 <code>&lt;uses-sdk android:minSdkVersion=&quot;14&quot; /&gt;</code>，否則 reCAPTCHA 會完全失效！完全沒有用！完全沒有畫面，下面是我的 <code>AndroidManifest.xml</code> 配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.example.kumagaikanta.safetynetrecaptcha&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">&quot;14&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/AppTheme&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;com.google.android.gms.version&quot;</span> <span class="attr">android:value</span>=<span class="string">&quot;@integer/google_play_services_version&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至於附加服務條款什麼的 ... 畢竟是使用 Google 的服務，當你使用這的同時，就代表你同意 Google 的相關服務條款囉！好的不管他，我們得重點在如何應用。</p><ul><li><ol><li>您必須先到 <a href="https://www.google.com/recaptcha/admin#androidsignup">reCAPTCHA</a> 註冊一個 reCAPTCHA 的金鑰。</li></ol><ul><li>Label: 指鑰匙的唯一標籤，通常是您使用公司或組織的名稱。</li><li>Package Names: 應用程式的 Package 名稱，為了讓應用程式使用 API，您輸入的 Package 名稱必須與該應用的 Package 名稱完全匹配。</li></ul></li></ul><p><img src="/img/posts/AndroidSafetyNetReCAPTCHAAPI/1.png" alt="註冊應用程式"></p><ul><li><ol start="2"><li>註冊完畢後，您會獲得 <code>Site key</code> 與 <code>Secret key</code>，請把他們記下來，待會會使用到。</li></ol></li></ul><p><img src="/img/posts/AndroidSafetyNetReCAPTCHAAPI/2.png" alt="獲取key"></p><ul><li><ol start="3"><li>接著我們回到 Android Studio 專案當中，畢竟這是 Android 以外的服務，所以我們必須在 <code>build.gradle</code> 當中依賴我們需要的套件包到專案當中：</li></ol></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;com.google.android.gms:play-services-base:11.0.0&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;com.google.android.gms:play-services-basement:11.0.0&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;com.google.android.gms:play-services-safetynet:11.0.0&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;com.google.android.gms:play-services-tasks:11.0.0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS: 如果出現錯誤訊息，那很正常的！因為你的 IDE 應該還沒有 Install 這些套件包，只需要 Install 就可以囉，這些動作 Android Studio 都會很智慧的幫你做完。</p><ul><li><ol start="4"><li>SafetyNet API 是 Google Play 所提供的服務之一，所以如果要連接到 API，您需要創建一個 GoogleApiClient 類的實例，創建與Google Play 服務的連接後，您可以使用 Google API Client 連接到 SafetyNet API。</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必須參考這些</span></span><br><span class="line"><span class="keyword">import</span> com.google.android.gms.common.api.GoogleApiClient;</span><br><span class="line"><span class="keyword">import</span> com.google.android.gms.safetynet.SafetyNet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> GoogleApiClient mGoogleApiClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 創建 Google Api Client 實例</span></span><br><span class="line">        mGoogleApiClient = <span class="keyword">new</span> <span class="title class_">GoogleApiClient</span>.Builder(<span class="built_in">this</span>)</span><br><span class="line">                .addApi(SafetyNet.API)</span><br><span class="line">                .addConnectionCallbacks(<span class="built_in">this</span>)</span><br><span class="line">                .addOnConnectionFailedListener(<span class="built_in">this</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        mGoogleApiClient.connect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ol start="5"><li>因為 SafetyNet 會連線至 Google API，所以我們必須實作 <code>GoogleApiClient.ConnectionCallbacks</code> 與 <code>GoogleApiClient.OnConnectionFailedListener</code> 介面，這邊參考了 <a href="http://www.codedata.com.tw/mobile/android-tutorial-the-4th-class-3-google-services-location/">這篇文章</a> 的做法：</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.android.gms.common.ConnectionResult;</span><br><span class="line"><span class="keyword">import</span> com.google.android.gms.common.api.GoogleApiClient;</span><br><span class="line"><span class="keyword">import</span> com.google.android.gms.safetynet.SafetyNet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">GoogleApiClient</span>.ConnectionCallbacks,</span><br><span class="line">        GoogleApiClient.OnConnectionFailedListener &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> GoogleApiClient mGoogleApiClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        mGoogleApiClient = <span class="keyword">new</span> <span class="title class_">GoogleApiClient</span>.Builder(<span class="built_in">this</span>)</span><br><span class="line">                .addApi(SafetyNet.API)</span><br><span class="line">                .addConnectionCallbacks(<span class="built_in">this</span>)</span><br><span class="line">                .addOnConnectionFailedListener(<span class="built_in">this</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        mGoogleApiClient.connect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ConnectionCallbacks</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onConnected</span><span class="params">(Bundle bundle)</span> &#123;</span><br><span class="line">        <span class="comment">// 已經連線到 Google Services</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ConnectionCallbacks</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onConnectionSuspended</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="comment">// Google Services連線中斷</span></span><br><span class="line">        <span class="comment">// int參數是連線中斷的代號</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// OnConnectionFailedListener</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onConnectionFailed</span><span class="params">(ConnectionResult connectionResult)</span> &#123;</span><br><span class="line">        <span class="comment">// Google Services 連線失敗</span></span><br><span class="line">        <span class="comment">// ConnectionResult 參數是連線失敗的資訊</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ol start="6"><li>為了更好 Debug，我們在實作的實例當中加入一些 Toast 與 Log 來方便我們除錯：</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ConnectionCallbacks</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onConnected</span><span class="params">(Bundle bundle)</span> &#123;</span><br><span class="line">    <span class="comment">// 已經連線到 Google Services</span></span><br><span class="line">    Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;已經連線到 Google Services&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">    Log.d(<span class="string">&quot;onConnected&quot;</span>, <span class="string">&quot;已經連線到 Google Services&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConnectionCallbacks</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onConnectionSuspended</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="comment">// Google Services 連線中斷</span></span><br><span class="line">    <span class="comment">// int 參數是連線中斷的代號</span></span><br><span class="line">    Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Google Services 連線中斷，連線中斷代號 &quot;</span> + i, Toast.LENGTH_LONG).show();</span><br><span class="line">    Log.d(<span class="string">&quot;onConnectionSuspended&quot;</span>, <span class="string">&quot;Google Services 連線中斷，連線中斷代號 &quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OnConnectionFailedListener</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onConnectionFailed</span><span class="params">(ConnectionResult connectionResult)</span> &#123;</span><br><span class="line">    <span class="comment">// Google Services 連線失敗</span></span><br><span class="line">    <span class="comment">// ConnectionResult 參數是連線失敗的資訊</span></span><br><span class="line">    Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Google Services 連線失敗，&quot;</span> + connectionResult.getErrorMessage(), Toast.LENGTH_LONG).show();</span><br><span class="line">    Log.w(<span class="string">&quot;onConnectionFailed&quot;</span>, <span class="string">&quot;Google Services 連線失敗，&quot;</span> + connectionResult.getErrorMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ol start="7"><li>再來我們希望說，點了某顆按鈕之後，reCAPTCHA 來幫我們驗證是不是機器人，所以請在 View 上拉一個 Button，並且賦予 onClick 事件：</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ButtonOnClikc</span><span class="params">(View view)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">TextView</span> <span class="variable">tvResult</span> <span class="operator">=</span> (TextView) findViewById(R.id.textView);</span><br><span class="line">    Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Button on Clikc!&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">    SafetyNet.SafetyNetApi.verifyWithRecaptcha(mGoogleApiClient, <span class="string">&quot;YOUR_SITE_KEY&quot;</span>)</span><br><span class="line">            .setResultCallback(<span class="keyword">new</span> <span class="title class_">ResultCallback</span>&lt;SafetyNetApi.RecaptchaTokenResult&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResult</span><span class="params">(<span class="keyword">final</span> SafetyNetApi.RecaptchaTokenResult result)</span> &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">Status</span> <span class="variable">status</span> <span class="operator">=</span> result.getStatus();</span><br><span class="line">                    runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> ((status != <span class="literal">null</span>) &amp;&amp; status.isSuccess()) &#123;</span><br><span class="line">                                <span class="comment">// 驗證通過</span></span><br><span class="line">                                tvResult.setText(<span class="string">&quot;isSuccess()\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span> (!result.getTokenResult().isEmpty()) &#123;</span><br><span class="line">                                    tvResult.append(<span class="string">&quot;!result.getTokenResult().isEmpty()&quot;</span>);</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    tvResult.append(<span class="string">&quot;result.getTokenResult().isEmpty()&quot;</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="comment">// 驗證失敗</span></span><br><span class="line">                                Log.e(<span class="string">&quot;MY_APP_TAG&quot;</span>, <span class="string">&quot;Error occurred &quot;</span> +</span><br><span class="line">                                        <span class="string">&quot;when communicating with the reCAPTCHA service.&quot;</span>);</span><br><span class="line">                                tvResult.setText(<span class="string">&quot;Error occurred &quot;</span> +</span><br><span class="line">                                        <span class="string">&quot;when communicating with the reCAPTCHA service.&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ol start="8"><li>成果大概像這樣：</li></ol></li></ul><h2 id="成功連線到-Google-Services"><a href="#成功連線到-Google-Services" class="headerlink" title="成功連線到 Google Services"></a>成功連線到 Google Services</h2><p><img src="/img/posts/AndroidSafetyNetReCAPTCHAAPI/3.png" alt="成功連線到 Google Services"></p><h2 id="啟用-reCAPTCHA-的樣子"><a href="#啟用-reCAPTCHA-的樣子" class="headerlink" title="啟用 reCAPTCHA 的樣子"></a>啟用 reCAPTCHA 的樣子</h2><p><img src="/img/posts/AndroidSafetyNetReCAPTCHAAPI/4.png" alt="啟用 reCAPTCHA 的樣子"></p><h2 id="驗證成功狀態"><a href="#驗證成功狀態" class="headerlink" title="驗證成功狀態"></a>驗證成功狀態</h2><p><img src="/img/posts/AndroidSafetyNetReCAPTCHAAPI/5.png" alt="驗證成功狀態"></p><h2 id="防堵機器人驗證"><a href="#防堵機器人驗證" class="headerlink" title="防堵機器人驗證"></a>防堵機器人驗證</h2><p><img src="/img/posts/AndroidSafetyNetReCAPTCHAAPI/6.png" alt="防堵機器人驗證"></p><h2 id="驗證失敗狀態"><a href="#驗證失敗狀態" class="headerlink" title="驗證失敗狀態"></a>驗證失敗狀態</h2><p><img src="/img/posts/AndroidSafetyNetReCAPTCHAAPI/7.png" alt="驗證失敗狀態"></p>]]></content>
    
    
    <summary type="html">Google上周五（6/9）釋出了支援Android平台的reCAPTCHA API，此一API採用的是Google甫於今年3月發表的隱形reCAPTCHA技術，可於背景辨識用戶是真人或機器人，去除用戶使用行動程式的障礙 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="Android 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/Android-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="Android" scheme="https://blog.init.engineer/tags/Android/"/>
    
    <category term="reCAPTCHA" scheme="https://blog.init.engineer/tags/reCAPTCHA/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio for Mac！微軟重大里程碑，你終於可以在 macOS 上使用 VS 了！</title>
    <link href="https://blog.init.engineer/posts/VisualStudioForMacOS/"/>
    <id>https://blog.init.engineer/posts/VisualStudioForMacOS/</id>
    <published>2017-05-30T16:00:00.000Z</published>
    <updated>2017-05-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我們很高興宣告發行 Visual Studio 2017 for Mac。 Visual Studio for Mac 是 Visual Studio 系列的新成員，可讓 macOS 上的開發人員使用 Xamarin 和 .NET Core 來建置行動裝置、Web 和雲端的應用程式，以及使用 Unity 來建置遊戲。</span><br><span class="line"></span><br><span class="line">使用 Visual Studio 2017 for Mac 開發 Android、macOS、iOS、tvOS、watchOS、Web 和雲端的應用程式。 快速編碼、輕鬆偵錯及診斷、頻繁測試，然後自信地發行。 使用版本控制、變得敏捷、使用這個新版本有效率地共同作業！</span><br><span class="line"></span><br><span class="line">官方介紹：https://www.visualstudio.com/zh-tw/news/releasenotes/vs2017-mac-relnotes</span><br></pre></td></tr></table></figure><p>微軟終於正式推出 VS for Mac 啦！身為 Mac 的使用者兼微軟開發者，當然要來先睹為快呀！<br><img src="/img/posts/VisualStudioForMacOS/1.png" alt="下載首頁"></p><p>嘖嘖，微軟你這樣子很不敬業哦～ Visual Studio Code 的部分沒寫好，不過沒關係！我們重點在於 Visual Studio for Mac：</p><p><a href="https://www.visualstudio.com/zh-hant/vs/visual-studio-mac/">點我前往官方下載 Visual Studio for Mac - Visual Studio</a></p><p>下載完畢後，就很直覺的直接開始安裝吧！<br><img src="/img/posts/VisualStudioForMacOS/2.jpeg" alt="安裝畫面"></p><p>安裝完畢後，跟 Visual Studio for Windows 的味道有些許不一樣，不過沒關係！乾太的目標是能夠在 mac 上開發 ASP.NET 網頁應用程式！<br><img src="/img/posts/VisualStudioForMacOS/3.png" alt="應用程式主畫面"></p><p>目前所支援的開發種類如下(所謂的目前指的是 2017&#x2F;05&#x2F;31)：<br><img src="/img/posts/VisualStudioForMacOS/4.png" alt="支援開發種類"></p><p>以 ASP.NET MVC 5 為專案的樣子：<br><img src="/img/posts/VisualStudioForMacOS/5.png" alt="部落格"></p><p>嘗試執行專案運行 ASP.NET MVC：<br><img src="/img/posts/VisualStudioForMacOS/6.png" alt="運行專案"></p><p>看起來真的很不錯呢！基本上該有的東西都有了，接下來或許會漸漸開始撰寫與 ASP.NET MVC 有關的文章吧 ...</p><p>而這篇文只是簡單的 VS for Mac 心得文。</p>]]></content>
    
    
    <summary type="html">我們很高興宣告發行 Visual Studio 2017 for Mac。 Visual Studio for Mac 是 Visual Studio 系列的新成員，可讓 macOS 上的開發人員使用 Xamarin 和 .NET Core 來建置行動裝置、Web 和雲端的應用程式，以及使用 Unity 來建置遊戲 ...</summary>
    
    
    
    <category term="經驗分享" scheme="https://blog.init.engineer/categories/%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Visual Studio for Mac" scheme="https://blog.init.engineer/tags/Visual-Studio-for-Mac/"/>
    
  </entry>
  
  <entry>
    <title>iOS Swift 第三方套件介紹 - TextFieldEffects</title>
    <link href="https://blog.init.engineer/posts/TextFieldEffectsOfSwift/"/>
    <id>https://blog.init.engineer/posts/TextFieldEffectsOfSwift/</id>
    <published>2017-05-15T16:00:00.000Z</published>
    <updated>2017-05-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>有時候，在應用程式當中的小小細節，也能深得使用者的喜好，程式不只要好用才行，還必須搭配美觀的介面，才能深得人心，然而在 iOS 專案當中，原生的 Field 輸入框太過於古板，不是那麼的好看，所以有人寫了 <a href="https://github.com/raulriera/TextFieldEffects">TextFieldEffects</a> 這款好用的第三方套件，來使 Field 更加的美觀。</p><p>目前他具備了以下幾種效果：</p><ul><li>Kaede</li><li>Hoshi</li><li>Jiro</li><li>Isao</li><li>Minoru</li><li>Yoko</li><li>Madoka</li><li>Akira</li><li>Yoshiko</li></ul><h2 id="實際效果"><a href="#實際效果" class="headerlink" title="實際效果"></a>實際效果</h2><h3 id="Kaede"><a href="#Kaede" class="headerlink" title="Kaede"></a>Kaede</h3><p><img src="/img/posts/TextFieldEffectsOfSwift/Kaede.gif" alt="Kaede Demo"></p><h3 id="Hoshi"><a href="#Hoshi" class="headerlink" title="Hoshi"></a>Hoshi</h3><p><img src="/img/posts/TextFieldEffectsOfSwift/Hoshi.gif" alt="Hoshi Demo"></p><h3 id="Jiro"><a href="#Jiro" class="headerlink" title="Jiro"></a>Jiro</h3><p><img src="/img/posts/TextFieldEffectsOfSwift/Jiro.gif" alt="Jiro Demo"></p><h3 id="Isao"><a href="#Isao" class="headerlink" title="Isao"></a>Isao</h3><p><img src="/img/posts/TextFieldEffectsOfSwift/Isao.gif" alt="Isao Demo"></p><h3 id="Minoru"><a href="#Minoru" class="headerlink" title="Minoru"></a>Minoru</h3><p><img src="/img/posts/TextFieldEffectsOfSwift/Minoru.gif" alt="Minoru Demo"></p><h3 id="Yoko"><a href="#Yoko" class="headerlink" title="Yoko"></a>Yoko</h3><p><img src="/img/posts/TextFieldEffectsOfSwift/Yoko.gif" alt="Yoko Demo"></p><h3 id="Madoka"><a href="#Madoka" class="headerlink" title="Madoka"></a>Madoka</h3><p><img src="/img/posts/TextFieldEffectsOfSwift/Madoka.gif" alt="Madoka Demo"></p><h3 id="Akira"><a href="#Akira" class="headerlink" title="Akira"></a>Akira</h3><p><img src="/img/posts/TextFieldEffectsOfSwift/Akira.gif" alt="Akira Demo"></p><h3 id="Yoshiko"><a href="#Yoshiko" class="headerlink" title="Yoshiko"></a>Yoshiko</h3><p><img src="/img/posts/TextFieldEffectsOfSwift/Yoshiko.gif" alt="Yoshiko Demo"></p><h2 id="開始使用"><a href="#開始使用" class="headerlink" title="開始使用"></a>開始使用</h2><p>首先你必須利用 Cocoapod 於你專案裡頭的 <code>Podfile</code> 引入 <a href="https://github.com/raulriera/TextFieldEffects">TextFieldEffects</a>，並且 <code>pod install</code> 去安裝。</p><p>你可以參考 <a href="https://blog.init.engineer/posts/CocoaPodsBasic/">CocoaPods iOS 第三方套件管理工具</a> 這篇文章。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use_frameworks!</span><br><span class="line">pod &quot;TextFieldEffects&quot;</span><br></pre></td></tr></table></figure><p>安裝完畢以後，我們可以在 <code>storyboard</code> 加入一些系統預設的 Field(文字輸入框)：</p><p><img src="/img/posts/TextFieldEffectsOfSwift/1.png" alt="1.png"></p><p>然後對剛剛新增的這項 <code>Field</code> 做些變更，我們以 <code>Akiar</code> 為例子，將 <code>Custom Class</code> 當中的 <code>Class</code> 設定為 <code>AkiraTextField</code>，然而 <code>Module</code> 是來自於 <code>TextFieldEffects</code>：</p><p><img src="/img/posts/TextFieldEffectsOfSwift/2.png" alt="2.png"></p><p>完畢了以後，這個 <code>Field</code> 的外表會有些許的改變，但這還不夠像參考範例的那樣，因為我們還必須把 <code>Border Style</code> (外框樣式) 設定為無邊框：</p><p><img src="/img/posts/TextFieldEffectsOfSwift/3.png" alt="3.png"></p><p>再來賦予他一些高度：</p><p><img src="/img/posts/TextFieldEffectsOfSwift/4.png" alt="4.png"></p><p>最後在 <code>Akiar Text Field</code> 當中給予自定義的顏色，就大功告成囉！</p><p><img src="/img/posts/TextFieldEffectsOfSwift/5.png" alt="5.png"></p><h2 id="或者你喜歡硬派寫程式"><a href="#或者你喜歡硬派寫程式" class="headerlink" title="或者你喜歡硬派寫程式"></a>或者你喜歡硬派寫程式</h2><p>透過寫 Code 的方式來呈現效果，這也是可以的！</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> textField <span class="operator">=</span> <span class="type">KaedeTextField</span>(frame: textFieldFrame)</span><br><span class="line">textField.placeholderColor <span class="operator">=</span> .darkGrayColor()</span><br><span class="line">textField.foregroundColor <span class="operator">=</span> .lightGrayColor()</span><br><span class="line"></span><br><span class="line">view.addSubView(textField)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">超商服務愈來愈方便，現在到超商繳費不用帳單只要用專屬APP，就能下載條碼直接繳費 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="iOS 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/iOS-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="Swift" scheme="https://blog.init.engineer/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>iOS Swift 第三方套件介紹 - NVActivityIndicatorView</title>
    <link href="https://blog.init.engineer/posts/NVActivityIndicatorViewOfSwift/"/>
    <id>https://blog.init.engineer/posts/NVActivityIndicatorViewOfSwift/</id>
    <published>2017-05-14T16:00:00.000Z</published>
    <updated>2017-05-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p><a href="https://github.com/ninjaprox/NVActivityIndicatorView">NVActivityIndicatorView</a> 是一系列令人驚艷的 Loading 動畫，它採用了向量繪圖的方式來呈現動畫，這是 <a href="https://github.com/gontovnik/DGActivityIndicatorView">DGActivityIndicatorView</a> 的一個衍生，靈感來自於 <a href="https://github.com/ConnorAtherton/loaders.css">Loaders.css</a>。</p><ul><li><a href="https://github.com/ninjaprox/NVActivityIndicatorView">NVActivityIndicatorView GitHub 官方網站</a></li></ul><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p><img src="/img/posts/NVActivityIndicatorViewOfSwift/1.gif" alt="DEMO IMAGE"></p><table><thead><tr><th>Type</th><th>Type</th><th>Type</th><th>Type</th></tr></thead><tbody><tr><td>1. ballPulse</td><td>2. ballGridPulse</td><td>3. ballClipRotate</td><td>4. squareSpin</td></tr><tr><td>5. ballClipRotatePulse</td><td>6. ballClipRotateMultiple</td><td>7. ballPulseRise</td><td>8. ballRotate</td></tr><tr><td>9. cubeTransition</td><td>10. ballZigZag</td><td>11. ballZigZagDeflect</td><td>12. ballTrianglePath</td></tr><tr><td>13. ballScale</td><td>14. lineScale</td><td>15. lineScaleParty</td><td>16. ballScaleMultiple</td></tr><tr><td>17. ballPulseSync</td><td>18. ballBeat</td><td>19. lineScalePulseOut</td><td>20. lineScalePulseOutRapid</td></tr><tr><td>21. ballScaleRipple</td><td>22. ballScaleRippleMultiple</td><td>23. ballSpinFadeLoader</td><td>24. lineSpinFadeLoader</td></tr><tr><td>25. triangleSkewSpin</td><td>26. pacman</td><td>27. ballGridBeat</td><td>28. semiCircleSpin</td></tr><tr><td>29. ballRotateChase</td><td>30. orbit</td><td>31. audioEqualizer</td><td></td></tr></tbody></table><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>你必須採用 Cocoapods 來進行安裝，你可以參考 <a href="https://blog.init.engineer/posts/CocoaPodsBasic/">CocoaPods iOS 第三方套件管理工具</a> 這篇文章。</p><p>然後將 <code>NVActivityIndicatorView</code> 加入你的 <code>Podfile</code> 當中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use_frameworks!</span><br><span class="line"></span><br><span class="line">pod &#x27;NVActivityIndicatorView&#x27;</span><br></pre></td></tr></table></figure><h2 id="使用教學"><a href="#使用教學" class="headerlink" title="使用教學"></a>使用教學</h2><p>首先，你必須先引入 <code>NVActivityIndicatorView</code> 至您的專案當中。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> NVActivityIndicatorView</span><br></pre></td></tr></table></figure><p>接下來，有兩種方法可以建立 NVActivityIndicatorView</p><ol><li>透過 storyboard 來將 UIView 變更為 NVActivityIndicatorView</li><li>利用寫程式的方式來建立。</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NVActivityIndicatorView</span>(frame: frame, type: type, color: color, padding: padding)</span><br></pre></td></tr></table></figure><h2 id="如何控制它呢？"><a href="#如何控制它呢？" class="headerlink" title="如何控制它呢？"></a>如何控制它呢？</h2><h3 id="啟動動畫"><a href="#啟動動畫" class="headerlink" title="啟動動畫"></a>啟動動畫</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activityIndicatorView.startAnimating()</span><br></pre></td></tr></table></figure><h3 id="暫停動畫"><a href="#暫停動畫" class="headerlink" title="暫停動畫"></a>暫停動畫</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activityIndicatorView.stopAnimating()</span><br></pre></td></tr></table></figure><h3 id="確認動畫是否正在運轉中"><a href="#確認動畫是否正在運轉中" class="headerlink" title="確認動畫是否正在運轉中"></a>確認動畫是否正在運轉中</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animating <span class="operator">=</span> activityIndicatorView.animating</span><br></pre></td></tr></table></figure><h2 id="我該如何用很懶的方式來使用它呢？"><a href="#我該如何用很懶的方式來使用它呢？" class="headerlink" title="我該如何用很懶的方式來使用它呢？"></a>我該如何用很懶的方式來使用它呢？</h2><p>那麼你可以讓你的 <code>ViewController</code> 先參考 <code>NVActivityIndicatorViewable</code>，就像：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ViewController</span>: <span class="title class_">UIViewController</span>, <span class="title class_">NVActivityIndicatorViewable</span> &#123;</span><br><span class="line">    <span class="comment">// Code ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後你就可以在你的程式碼當中，隨意新建 Loading 畫面、關閉畫面了，就像：</p><h3 id="開啟動畫"><a href="#開啟動畫" class="headerlink" title="開啟動畫"></a>開啟動畫</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startAnimating(size, message)</span><br></pre></td></tr></table></figure><h3 id="關閉動畫"><a href="#關閉動畫" class="headerlink" title="關閉動畫"></a>關閉動畫</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stopAnimation()</span><br></pre></td></tr></table></figure><h3 id="讓我們來看看官方的-startAnimating-原始碼怎麼寫的吧！"><a href="#讓我們來看看官方的-startAnimating-原始碼怎麼寫的吧！" class="headerlink" title="讓我們來看看官方的 startAnimating 原始碼怎麼寫的吧！"></a>讓我們來看看官方的 <code>startAnimating</code> 原始碼怎麼寫的吧！</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">func</span> <span class="title function_">startAnimating</span>(</span><br><span class="line">    <span class="comment">// 設定 Loading CG 的 Size</span></span><br><span class="line">    <span class="keyword">_</span> <span class="params">size</span>: <span class="type">CGSize</span>? <span class="operator">=</span> <span class="literal">nil</span>,</span><br><span class="line">    <span class="comment">// 設定 Loading 顯示的訊息內容</span></span><br><span class="line">    <span class="params">message</span>: <span class="type">String</span>? <span class="operator">=</span> <span class="literal">nil</span>,</span><br><span class="line">    <span class="comment">// 設定訊息內容的字型</span></span><br><span class="line">    <span class="params">messageFont</span>: <span class="type">UIFont</span>? <span class="operator">=</span> <span class="literal">nil</span>,</span><br><span class="line">    <span class="comment">// 設定 CG 的樣式</span></span><br><span class="line">    <span class="params">type</span>: <span class="type">NVActivityIndicatorType</span>? <span class="operator">=</span> <span class="literal">nil</span>,</span><br><span class="line">    <span class="comment">// 設定 CG 的顏色</span></span><br><span class="line">    <span class="params">color</span>: <span class="type">UIColor</span>? <span class="operator">=</span> <span class="literal">nil</span>,</span><br><span class="line">    <span class="comment">// 設定 Padding</span></span><br><span class="line">    <span class="params">padding</span>: <span class="type">CGFloat</span>? <span class="operator">=</span> <span class="literal">nil</span>,</span><br><span class="line">    <span class="comment">// 設定延遲時間</span></span><br><span class="line">    <span class="params">displayTimeThreshold</span>: <span class="type">Int</span>? <span class="operator">=</span> <span class="literal">nil</span>,</span><br><span class="line">    <span class="comment">// 最小的延遲時間</span></span><br><span class="line">    <span class="params">minimumDisplayTime</span>: <span class="type">Int</span>? <span class="operator">=</span> <span class="literal">nil</span>,</span><br><span class="line">    <span class="comment">// 背景顏色</span></span><br><span class="line">    <span class="params">backgroundColor</span>: <span class="type">UIColor</span>? <span class="operator">=</span> <span class="literal">nil</span>,</span><br><span class="line">    <span class="comment">// 訊息內容顏色</span></span><br><span class="line">    <span class="params">textColor</span>: <span class="type">UIColor</span>? <span class="operator">=</span> <span class="literal">nil</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> activityData <span class="operator">=</span> <span class="type">ActivityData</span>(size: size,</span><br><span class="line">                                    message: message,</span><br><span class="line">                                    messageFont: messageFont,</span><br><span class="line">                                    type: type,</span><br><span class="line">                                    color: color,</span><br><span class="line">                                    padding: padding,</span><br><span class="line">                                    displayTimeThreshold: displayTimeThreshold,</span><br><span class="line">                                    minimumDisplayTime: minimumDisplayTime,</span><br><span class="line">                                    backgroundColor: backgroundColor,</span><br><span class="line">                                    textColor: textColor)</span><br><span class="line">    <span class="type">NVActivityIndicatorPresenter</span>.sharedInstance.startAnimating(activityData)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="再來讓我們來看看官方的-stopAnimation-原始碼怎麼寫的吧！"><a href="#再來讓我們來看看官方的-stopAnimation-原始碼怎麼寫的吧！" class="headerlink" title="再來讓我們來看看官方的 stopAnimation 原始碼怎麼寫的吧！"></a>再來讓我們來看看官方的 <code>stopAnimation</code> 原始碼怎麼寫的吧！</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">func</span> <span class="title function_">stopAnimating</span>() &#123;</span><br><span class="line">    <span class="comment">// 就只是叫他停止而已 ...</span></span><br><span class="line">    <span class="type">NVActivityIndicatorPresenter</span>.sharedInstance.stopAnimating()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="關於預設-它都設定了些什麼？"><a href="#關於預設-它都設定了些什麼？" class="headerlink" title="關於預設 ... 它都設定了些什麼？"></a>關於預設 ... 它都設定了些什麼？</h2><h3 id="預設的動畫"><a href="#預設的動畫" class="headerlink" title="預設的動畫"></a>預設的動畫</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第 23 號的經典動畫</span></span><br><span class="line"><span class="type">NVActivityIndicatorView</span>.<span class="type">DEFAULT_TYPE</span> <span class="operator">=</span> .ballSpinFadeLoader</span><br></pre></td></tr></table></figure><h3 id="預設的顏色"><a href="#預設的顏色" class="headerlink" title="預設的顏色"></a>預設的顏色</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 白色 RGB(255,255,255)</span></span><br><span class="line"><span class="type">NVActivityIndicatorView</span>.<span class="type">DEFAULT_COLOR</span> <span class="operator">=</span> <span class="type">UIColor</span>.white</span><br></pre></td></tr></table></figure><h3 id="預設的訊息內容顏色"><a href="#預設的訊息內容顏色" class="headerlink" title="預設的訊息內容顏色"></a>預設的訊息內容顏色</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 白色 RGB(255,255,255)</span></span><br><span class="line"><span class="type">NVActivityIndicatorView</span>.<span class="type">DEFAULT_TEXT_COLOR</span> <span class="operator">=</span> <span class="type">UIColor</span>.white</span><br></pre></td></tr></table></figure><h3 id="預設的間距"><a href="#預設的間距" class="headerlink" title="預設的間距"></a>預設的間距</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 沒有間距</span></span><br><span class="line"><span class="type">NVActivityIndicatorView</span>.<span class="type">DEFAULT_PADDING</span> <span class="operator">=</span> <span class="type">CGFloat</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="預設的-CG-大小"><a href="#預設的-CG-大小" class="headerlink" title="預設的 CG 大小"></a>預設的 CG 大小</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 60 * 60</span></span><br><span class="line"><span class="type">NVActivityIndicatorView</span>.<span class="type">DEFAULT_BLOCKER_SIZE</span> <span class="operator">=</span> <span class="type">CGSizeMake</span>(<span class="number">60</span>, <span class="number">60</span>)</span><br></pre></td></tr></table></figure><h3 id="預設的背景顏色"><a href="#預設的背景顏色" class="headerlink" title="預設的背景顏色"></a>預設的背景顏色</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 黑色 RGB(0,0,0) 透明度 50%</span></span><br><span class="line"><span class="type">NVActivityIndicatorView</span>.<span class="type">DEFAULT_BLOCKER_BACKGROUND_COLOR</span> <span class="operator">=</span> <span class="type">UIColor</span>(red: <span class="number">0</span>, green: <span class="number">0</span>, blue: <span class="number">0</span>, alpha: <span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><h3 id="預設的延遲時間"><a href="#預設的延遲時間" class="headerlink" title="預設的延遲時間"></a>預設的延遲時間</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 沒有延遲</span></span><br><span class="line"><span class="type">NVActivityIndicatorView</span>.<span class="type">DEFAULT_BLOCKER_DISPLAY_TIME_THRESHOLD</span> <span class="operator">=</span> <span class="number">0</span> <span class="comment">// 以毫秒計算</span></span><br></pre></td></tr></table></figure><h3 id="預設的最小延遲時間"><a href="#預設的最小延遲時間" class="headerlink" title="預設的最小延遲時間"></a>預設的最小延遲時間</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 沒有延遲</span></span><br><span class="line"><span class="type">NVActivityIndicatorView</span>.<span class="type">DEFAULT_BLOCKER_MINIMUM_DISPLAY_TIME</span> <span class="operator">=</span> <span class="number">0</span> <span class="comment">// 以毫秒計算</span></span><br></pre></td></tr></table></figure><h3 id="預設的訊息內容"><a href="#預設的訊息內容" class="headerlink" title="預設的訊息內容"></a>預設的訊息內容</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 還是沒有任何內容</span></span><br><span class="line"><span class="type">NVActivityIndicatorView</span>.<span class="type">DEFAULT_BLOCKER_MESSAGE</span>: <span class="type">String</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br></pre></td></tr></table></figure><h3 id="預設的訊息內容字型"><a href="#預設的訊息內容字型" class="headerlink" title="預設的訊息內容字型"></a>預設的訊息內容字型</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 粗體、系統字型、大小 20</span></span><br><span class="line"><span class="type">NVActivityIndicatorView</span>.<span class="type">DEFAULT_BLOCKER_MESSAGE_FONT</span> <span class="operator">=</span> <span class="type">UIFont</span>.boldSystemFont(ofSize: <span class="number">20</span>)</span><br></pre></td></tr></table></figure><h2 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h2><p>我們就來實際操作看看 NVActivityIndicatorView 的效果吧！首先我的 Podfile 配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Uncomment the next line to define a global platform for your project</span><br><span class="line"># platform :ios, &#x27;9.0&#x27;</span><br><span class="line"></span><br><span class="line">target &#x27;NVActivityIndicatorView&#x27; do</span><br><span class="line"># Comment the next line if you&#x27;re not using Swift and don&#x27;t want to use dynamic frameworks</span><br><span class="line">use_frameworks!</span><br><span class="line"></span><br><span class="line"># Pods for NVActivityIndicatorView</span><br><span class="line">pod &#x27;NVActivityIndicatorView&#x27;</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>就只有參考一個 <code>NVActivityIndicatorView</code> 而已，接下來我們直接 <code>pod install</code> 去執行它。</p><p>執行完了以後，我們稍微設計一下畫面，在畫面中我們只需要一個 Button：</p><p><img src="/img/posts/NVActivityIndicatorViewOfSwift/2.png" alt="storybora"></p><p>再來，我們希望說，按下這顆按鈕後，我們就顯示 Loading 的圖示，長達三秒，這時候我們就可以參考官方的範例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@IBAction</span> <span class="keyword">func</span> <span class="title function_">didButtonOnClick</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="keyword">Any</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> size <span class="operator">=</span> <span class="type">CGSize</span>(width: <span class="number">30</span>, height: <span class="number">30</span>)</span><br><span class="line">    </span><br><span class="line">    startAnimating(size, message: <span class="string">&quot;Loading...&quot;</span>, type: <span class="type">NVActivityIndicatorType</span>(rawValue: sender.tag)<span class="operator">!</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: <span class="type">DispatchTime</span>.now() <span class="operator">+</span> <span class="number">1.5</span>) &#123;</span><br><span class="line">        <span class="type">NVActivityIndicatorPresenter</span>.sharedInstance.setMessage(<span class="string">&quot;Authenticating...&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: <span class="type">DispatchTime</span>.now() <span class="operator">+</span> <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.stopAnimating()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>當然你也可以試用看看官方的範例，會使你更快熟悉 <code>NVActivityIndicatorView</code> 這好用的第三方套件哦！</p><ul><li><a href="https://github.com/ninjaprox/NVActivityIndicatorView/blob/master/NVActivityIndicatorViewDemo/ViewController.swift">NVActivityIndicatorView 官方 Demo - GtiHub</a></li></ul>]]></content>
    
    
    <summary type="html">NVActivityIndicatorView 是一系列令人驚艷的 Loading 動畫，它採用了向量繪圖的方式來呈現動畫 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="iOS 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/iOS-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="Swift" scheme="https://blog.init.engineer/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Android 實作 Code39 條碼產生 - 超商繳費帳單</title>
    <link href="https://blog.init.engineer/posts/AndroidCode39/"/>
    <id>https://blog.init.engineer/posts/AndroidCode39/</id>
    <published>2017-04-17T16:00:00.000Z</published>
    <updated>2017-04-17T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>超商服務愈來愈方便，現在到超商繳費不用帳單只要用專屬APP，就能下載條碼直接繳費，不只如此，超商還化身成旅遊服務中心，讓遊客除了休息還能詢問各景點資訊，刺激來客量。<br>新聞來源：<a href="https://tw.news.yahoo.com/%e8%b6%85%e5%95%86%e7%b9%b3%e8%b2%bbapp-%e6%89%8b%e6%a9%9f%e6%a2%9d%e7%a2%bc%e7%b9%b3%e8%b2%bb%e5%98%9b-%e9%80%9a-070000880.html">https://tw.news.yahoo.com/%e8%b6%85%e5%95%86%e7%b9%b3%e8%b2%bbapp-%e6%89%8b%e6%a9%9f%e6%a2%9d%e7%a2%bc%e7%b9%b3%e8%b2%bb%e5%98%9b-%e9%80%9a-070000880.html</a></p></blockquote><p>今天要做一件很有趣的事情，替學校製作手機顯示帳單的功能，來讓繳費這項程序也能夠無紙化，因此撰寫了這篇教學文以做為記錄。</p><p>上網找了一下手機顯示帳單的範例圖後，找到下面這張圖，所以決定以這為版型，來做一個吧！</p><p><img src="/img/posts/AndroidCode39/1.png" alt="手機帳單版型"></p><h1 id="步驟一、不需要-ActionBar"><a href="#步驟一、不需要-ActionBar" class="headerlink" title="步驟一、不需要 ActionBar"></a>步驟一、不需要 ActionBar</h1><p>只需要進入 <code>AndroidManifest.xml</code> 修改 <code>android:theme</code> 即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;tw.edu.ksu.www.code39example&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/Theme.AppCompat.NoActionBar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="步驟二、引入需要的參考"><a href="#步驟二、引入需要的參考" class="headerlink" title="步驟二、引入需要的參考"></a>步驟二、引入需要的參考</h1><p>首先，我們必須能夠產生 Code39 的條碼，所以必須在 <code>build.gradle</code> 當中參考 <code>zxing</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">&#x27;com.google.zxing:core:3.2.0&#x27;</span></span><br></pre></td></tr></table></figure><p>另外乾太個人喜歡順便引入 Android Bootstrap，在做畫面時很方便 ... (該步驟並不是必須)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">&#x27;com.beardedhen:androidbootstrap:2.3.1&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="步驟三、規劃版型"><a href="#步驟三、規劃版型" class="headerlink" title="步驟三、規劃版型"></a>步驟三、規劃版型</h1><p>我們稍微規劃一下整個畫面結構：</p><ol><li>頂端會有兩個不能移動的 ActionBar<ol><li>一個是顯示 Logo</li><li>另一個則是返回上一頁，並且顯示頁面名稱。</li></ol></li><li>內容區域可以滑動並且白底。<ol><li>內容區域頂端顯示該次繳費的詳細資訊。</li><li>內容區域中間顯示繳費條碼(Code39)。</li><li>內容區域底端顯示固定的規範訊息。</li></ol></li></ol><p>整個規劃完了以後，畫面大概會像是這樣：</p><p><img src="/img/posts/AndroidCode39/2.png" alt="手機畫面"></p><h1 id="步驟四、產生繳費條碼"><a href="#步驟四、產生繳費條碼" class="headerlink" title="步驟四、產生繳費條碼"></a>步驟四、產生繳費條碼</h1><p>我們希望開啟畫面時，立刻顯示繳費條碼相關資訊：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ImageView __imageView1, __imageView2, __imageView3;</span><br><span class="line">    <span class="keyword">private</span> TextView __textView1, __textView2, __textView3;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.__imageView1 = (ImageView) findViewById(R.id.imageView1);</span><br><span class="line">        <span class="built_in">this</span>.__imageView2 = (ImageView) findViewById(R.id.imageView2);</span><br><span class="line">        <span class="built_in">this</span>.__imageView3 = (ImageView) findViewById(R.id.imageView3);</span><br><span class="line">        <span class="built_in">this</span>.__textView1 = (TextView) findViewById(R.id.textView1);</span><br><span class="line">        <span class="built_in">this</span>.__textView2 = (TextView) findViewById(R.id.textView2);</span><br><span class="line">        <span class="built_in">this</span>.__textView3 = (TextView) findViewById(R.id.textView3);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">__text1</span> <span class="operator">=</span> <span class="string">&quot;0123456789&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">__text2</span> <span class="operator">=</span> <span class="string">&quot;01234567899876543210&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">__text3</span> <span class="operator">=</span> <span class="string">&quot;9876543210&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.__imageView1.setImageBitmap(encodeAsBitmap(__text1, BarcodeFormat.CODE_39, <span class="number">900</span>, <span class="number">200</span>));</span><br><span class="line">            <span class="built_in">this</span>.__imageView2.setImageBitmap(encodeAsBitmap(__text2, BarcodeFormat.CODE_39, <span class="number">900</span>, <span class="number">200</span>));</span><br><span class="line">            <span class="built_in">this</span>.__imageView3.setImageBitmap(encodeAsBitmap(__text3, BarcodeFormat.CODE_39, <span class="number">900</span>, <span class="number">200</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (WriterException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.__textView1.setText(<span class="string">&quot;繳款期限: 106/06/30  代收代號: 123&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.__textView2.setText(<span class="string">&quot;機構代號: 0123  用戶號碼: 0123456789&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.__textView3.setText(<span class="string">&quot;列帳年月: 106/03  校對碼: 123  應繳總額: $500&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * encodeAsBitmap 方法來自於 [Android程式範例] 產生和解碼二維條碼(QRCode)與一維條碼(CODE39)</span></span><br><span class="line"><span class="comment">     * http://www.unood.me/2013/07/android-qrcodecode39.html</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title function_">encodeAsBitmap</span><span class="params">(String contents, BarcodeFormat format, <span class="type">int</span> desiredWidth, <span class="type">int</span> desiredHeight)</span> <span class="keyword">throws</span> WriterException &#123;</span><br><span class="line">        <span class="keyword">if</span> (contents.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">WHITE</span> <span class="operator">=</span> <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BLACK</span> <span class="operator">=</span> <span class="number">0xFF000000</span>;</span><br><span class="line">        HashMap&lt;EncodeHintType, String&gt; hints = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encoding</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; contents.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (contents.charAt(i) &gt; <span class="number">0xFF</span>) &#123;</span><br><span class="line">                encoding = <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (encoding != <span class="literal">null</span>) &#123;</span><br><span class="line">            hints = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">            hints.put(EncodeHintType.CHARACTER_SET, encoding);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">MultiFormatWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MultiFormatWriter</span>();</span><br><span class="line">        <span class="type">BitMatrix</span> <span class="variable">result</span> <span class="operator">=</span> writer.encode(contents, format, desiredWidth, desiredHeight, hints);</span><br><span class="line">        <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> result.getWidth();</span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> result.getHeight();</span><br><span class="line">        <span class="type">int</span>[] pixels = <span class="keyword">new</span> <span class="title class_">int</span>[width * height];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>; y &lt; height; y++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> y * width;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; width; x++) &#123;</span><br><span class="line">                pixels[offset + x] = result.get(x, y) ? BLACK : WHITE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Bitmap</span> <span class="variable">bitmap</span> <span class="operator">=</span> Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);</span><br><span class="line">        bitmap.setPixels(pixels, <span class="number">0</span>, width, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成果畫面如下：</p><p><img src="/img/posts/AndroidCode39/3.png" alt="成果畫面"></p><h1 id="步驟五、動態調整亮度"><a href="#步驟五、動態調整亮度" class="headerlink" title="步驟五、動態調整亮度"></a>步驟五、動態調整亮度</h1><p>通常很多 App 在顯示條碼時，都會刻意提高亮度，以此來增加掃描成功率，而離開條碼顯示頁面後，又會將亮度調整至原始狀態，所以我們來嘗試增加動態調整亮度的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 當畫面可以被看見時</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onStart();</span><br><span class="line">    <span class="built_in">this</span>.setBrightness(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 設定畫面亮度，0 為最暗，1 則是最亮。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBrightness</span><span class="params">(<span class="type">float</span> f)</span> &#123;</span><br><span class="line">    WindowManager.<span class="type">LayoutParams</span> <span class="variable">layoutParams</span> <span class="operator">=</span> getWindow().getAttributes();</span><br><span class="line">    layoutParams.screenBrightness = f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣就完成了簡單的電子化超商繳費條碼顯示的功能囉！</p>]]></content>
    
    
    <summary type="html">超商服務愈來愈方便，現在到超商繳費不用帳單只要用專屬APP，就能下載條碼直接繳費 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="Android 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/Android-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="Android" scheme="https://blog.init.engineer/tags/Android/"/>
    
    <category term="Code39" scheme="https://blog.init.engineer/tags/Code39/"/>
    
  </entry>
  
  <entry>
    <title>Plurk API 官方說明文件 - 目錄及規範</title>
    <link href="https://blog.init.engineer/posts/PlurkAPISpecification/"/>
    <id>https://blog.init.engineer/posts/PlurkAPISpecification/</id>
    <published>2017-04-16T16:00:00.000Z</published>
    <updated>2017-04-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="＊-本文章為個人翻譯，故正式內容以-Plurk-官方為主-＊"><a href="#＊-本文章為個人翻譯，故正式內容以-Plurk-官方為主-＊" class="headerlink" title="＊ 本文章為個人翻譯，故正式內容以 Plurk 官方為主 ＊"></a><em><strong>＊ 本文章為個人翻譯，故正式內容以 Plurk 官方為主 ＊</strong></em></h4><h4 id="＊-原文請參照-https-www-plurk-com-API-toc-＊"><a href="#＊-原文請參照-https-www-plurk-com-API-toc-＊" class="headerlink" title="＊ 原文請參照 https://www.plurk.com/API#toc ＊"></a><em><strong>＊ 原文請參照 <a href="https://www.plurk.com/API#toc">https://www.plurk.com/API#toc</a> ＊</strong></em></h4><br /><h1 id="目錄"><a href="#目錄" class="headerlink" title="目錄"></a>目錄</h1><ul><li><a href="https://blog.init.engineer/posts/PlurkAPISpecification/#python-%E7%AF%84%E4%BE%8B">Python 範例</a></li><li><a href="https://blog.init.engineer/posts/PlurkAPISpecification/#plurk-%E8%B3%87%E6%96%99%E8%A6%8F%E7%AF%84">Plurk 資料規範</a><ul><li><a href="https://blog.init.engineer/posts/PlurkAPISpecification/#%E6%8B%BF%E4%B8%80%E5%80%8B%E5%99%97%E6%96%87%E8%B3%87%E6%96%99%E4%BE%86%E7%95%B6%E7%AF%84%E4%BE%8B">拿一個噗文資料來當範例</a></li></ul></li><li><a href="https://blog.init.engineer/posts/PlurkAPISpecification/#%E4%BD%BF%E7%94%A8%E8%80%85%E8%B3%87%E6%96%99">使用者資料</a><ul><li><a href="https://blog.init.engineer/posts/PlurkAPISpecification/#%E6%8B%BF%E4%B8%80%E5%80%8B%E4%BD%BF%E7%94%A8%E8%80%85%E4%BE%86%E7%95%B6%E7%AF%84%E4%BE%8B">拿一個使用者資料來當範例</a></li><li><a href="https://blog.init.engineer/posts/PlurkAPISpecification/#%E9%97%9C%E6%96%BC%E5%87%BA%E7%94%9F%E5%8F%8A%E5%B9%B4%E9%BD%A1%E7%9A%84%E9%9A%B1%E7%A7%81">關於出生及年齡的隱私</a></li><li><a href="https://blog.init.engineer/posts/PlurkAPISpecification/#%E5%A6%82%E4%BD%95%E9%A1%AF%E7%A4%BA%E5%A4%A7%E9%A0%AD%E8%B2%BC">如何顯示大頭貼</a></li></ul></li><li>Users<ul><li>&#x2F;APP&#x2F;Users&#x2F;me</li><li>&#x2F;APP&#x2F;Users&#x2F;update</li><li>&#x2F;APP&#x2F;Users&#x2F;updatePicture</li><li>&#x2F;APP&#x2F;Users&#x2F;getKarmaStats</li></ul></li><li>Real time notifications<ul><li>&#x2F;APP&#x2F;Realtime&#x2F;getUserChannel</li><li>Comet channel specification</li></ul></li><li>Polling<ul><li>&#x2F;APP&#x2F;Polling&#x2F;getPlurks</li><li>&#x2F;APP&#x2F;Polling&#x2F;getUnreadCount</li></ul></li><li>Timeline<ul><li>&#x2F;APP&#x2F;Timeline&#x2F;getPlurk</li><li>&#x2F;APP&#x2F;Timeline&#x2F;getPlurks</li><li>&#x2F;APP&#x2F;Timeline&#x2F;getUnreadPlurks</li><li>&#x2F;APP&#x2F;Timeline&#x2F;getPublicPlurks</li><li>&#x2F;APP&#x2F;Timeline&#x2F;plurkAdd</li><li>&#x2F;APP&#x2F;Timeline&#x2F;plurkDelete</li><li>&#x2F;APP&#x2F;Timeline&#x2F;plurkEdit</li><li>&#x2F;APP&#x2F;Timeline&#x2F;toggleComments</li><li>&#x2F;APP&#x2F;Timeline&#x2F;mutePlurks</li><li>&#x2F;APP&#x2F;Timeline&#x2F;unmutePlurks</li><li>&#x2F;APP&#x2F;Timeline&#x2F;favoritePlurks</li><li>&#x2F;APP&#x2F;Timeline&#x2F;unfavoritePlurks</li><li>&#x2F;APP&#x2F;Timeline&#x2F;replurk</li><li>&#x2F;APP&#x2F;Timeline&#x2F;unreplurk</li><li>&#x2F;APP&#x2F;Timeline&#x2F;markAsRead</li><li>&#x2F;APP&#x2F;Timeline&#x2F;uploadPicture</li><li>&#x2F;APP&#x2F;Timeline&#x2F;reportAbuse</li></ul></li><li>Responses<ul><li>&#x2F;APP&#x2F;Responses&#x2F;get</li><li>&#x2F;APP&#x2F;Responses&#x2F;responseAdd</li><li>&#x2F;APP&#x2F;Responses&#x2F;responseDelete</li></ul></li><li>Profile<ul><li>&#x2F;APP&#x2F;Profile&#x2F;getOwnProfile</li><li>&#x2F;APP&#x2F;Profile&#x2F;getPublicProfile</li></ul></li><li>Friends and fans<ul><li>&#x2F;APP&#x2F;FriendsFans&#x2F;getFriendsByOffset</li><li>&#x2F;APP&#x2F;FriendsFans&#x2F;getFansByOffset</li><li>&#x2F;APP&#x2F;FriendsFans&#x2F;getFollowingByOffset</li><li>&#x2F;APP&#x2F;FriendsFans&#x2F;becomeFriend</li><li>&#x2F;APP&#x2F;FriendsFans&#x2F;removeAsFriend</li><li>&#x2F;APP&#x2F;FriendsFans&#x2F;becomeFan</li><li>&#x2F;APP&#x2F;FriendsFans&#x2F;setFollowing</li><li>&#x2F;APP&#x2F;FriendsFans&#x2F;getCompletion</li></ul></li><li>Alerts<ul><li>General data structures</li><li>&#x2F;APP&#x2F;Alerts&#x2F;getActive</li><li>&#x2F;APP&#x2F;Alerts&#x2F;getHistory</li><li>&#x2F;APP&#x2F;Alerts&#x2F;addAsFan</li><li>&#x2F;APP&#x2F;Alerts&#x2F;addAllAsFan</li><li>&#x2F;APP&#x2F;Alerts&#x2F;addAllAsFriends</li><li>&#x2F;APP&#x2F;Alerts&#x2F;addAsFriend</li><li>&#x2F;APP&#x2F;Alerts&#x2F;denyFriendship</li><li>&#x2F;APP&#x2F;Alerts&#x2F;removeNotification</li></ul></li><li>Search<ul><li>&#x2F;APP&#x2F;PlurkSearch&#x2F;search</li><li>&#x2F;APP&#x2F;UserSearch&#x2F;search</li></ul></li><li>Emoticons<ul><li>&#x2F;APP&#x2F;Emoticons&#x2F;get</li></ul></li><li>Blocks<ul><li>&#x2F;APP&#x2F;Blocks&#x2F;get</li><li>&#x2F;APP&#x2F;Blocks&#x2F;block</li><li>&#x2F;APP&#x2F;Blocks&#x2F;unblock</li></ul></li><li>Cliques<ul><li>&#x2F;APP&#x2F;Cliques&#x2F;getCliques</li><li>&#x2F;APP&#x2F;Cliques&#x2F;getClique</li><li>&#x2F;APP&#x2F;Cliques&#x2F;createClique</li><li>&#x2F;APP&#x2F;Cliques&#x2F;renameClique</li><li>&#x2F;APP&#x2F;Cliques&#x2F;add</li><li>&#x2F;APP&#x2F;Cliques&#x2F;remove</li></ul></li><li>PlurkTop<ul><li>&#x2F;APP&#x2F;PlurkTop&#x2F;getCollections</li><li>&#x2F;APP&#x2F;PlurkTop&#x2F;getTopics</li><li>&#x2F;APP&#x2F;PlurkTop&#x2F;getPlurks</li></ul></li><li>OAuth Utilities<ul><li>&#x2F;APP&#x2F;checkToken</li><li>&#x2F;APP&#x2F;expireToken</li><li>&#x2F;APP&#x2F;checkTime</li><li>&#x2F;APP&#x2F;echo</li></ul></li></ul><h1 id="Python-範例"><a href="#Python-範例" class="headerlink" title="Python 範例"></a>Python 範例</h1><p>使用 Python 程式語言來撰寫 Plurk API 2.0 應用程式的範例程式碼：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> oauth2 <span class="keyword">as</span> oauth</span><br><span class="line"><span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">OAUTH_REQUEST_TOKEN = <span class="string">&#x27;https://www.plurk.com/OAuth/request_token&#x27;</span></span><br><span class="line">OAUTH_ACCESS_TOKEN = <span class="string">&#x27;https://www.plurk.com/OAuth/access_token&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_request_token</span>(<span class="params">app_key, app_secret</span>):</span><br><span class="line">consumer = oauth.Consumer(app_key, app_secret)</span><br><span class="line">client = oauth.Client(consumer)</span><br><span class="line">response = client.request(OAUTH_REQUEST_TOKEN, method=<span class="string">&#x27;GET&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> urlparse.parse_qs(response)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_access_token</span>(<span class="params">app_key, app_secret, oauth_token, oauth_token_secret, oauth_verifier</span>):</span><br><span class="line">consumer = oauth.Consumer(app_key, app_secret)</span><br><span class="line">token = oauth.Token(oauth_token, oauth_token_secret)</span><br><span class="line">token.set_verifier(oauth_verifier)</span><br><span class="line">client = oauth.Client(consumer, token)</span><br><span class="line">response = client.request(OAUTH_ACCESS_TOKEN, method=<span class="string">&#x27;GET&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> urlparse.parse_qs(response)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getOwnProfile</span>(<span class="params">app_key, app_secret, oauth_token, oauth_token_secret</span>):</span><br><span class="line">apiUrl = <span class="string">&#x27;https://www.plurk.com/APP/Profile/getOwnProfile&#x27;</span></span><br><span class="line">consumer = oauth.Consumer(app_key, app_secret)</span><br><span class="line">token = oauth.Token(oauth_token, oauth_token_secret)</span><br><span class="line">client = oauth.Client(consumer, token)</span><br><span class="line">response = client.request(apiUrl, method=<span class="string">&#x27;GET&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h1 id="Plurk-資料規範"><a href="#Plurk-資料規範" class="headerlink" title="Plurk 資料規範"></a>Plurk 資料規範</h1><h1 id="拿一個噗文資料來當範例"><a href="#拿一個噗文資料來當範例" class="headerlink" title="拿一個噗文資料來當範例"></a>拿一個噗文資料來當範例</h1><p>Plurk 資料被編譯成 JSON 格式，所使用的日期是遵循 UTC 標準，您也可以將 UTC 發佈到 Plurk 伺服器，然而您應該利用使用者的本地時間來顯示時間，通常的返回資料如下面的範例：</p><p><em><strong>＊附註說明：<a href="https://zh.wikipedia.org/wiki/%E5%8D%8F%E8%B0%83%E4%B8%96%E7%95%8C%E6%97%B6">世界協調時間，又稱世界標準時間或協調世界時，簡稱UTC（英文「Coordinated Universal Time」／法文「Temps Universel Coordonné」）</a>＊</strong></em></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;responses_seen&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;qualifier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;thinks&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;plurk_id&quot;</span><span class="punctuation">:</span> <span class="number">90812</span><span class="punctuation">,</span> <span class="attr">&quot;response_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;limited_to&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="attr">&quot;no_comments&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;is_unread&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;lang&quot;</span><span class="punctuation">:</span> <span class="string">&quot;en&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;content_raw&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test me out&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;plurk_type&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test me out&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;qualifier_translated&quot;</span><span class="punctuation">:</span> <span class="string">&quot;thinks&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;posted&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Fri, 05 Jun 2009 23:07:13 GMT&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;owner_id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;favorite&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="attr">&quot;favorite_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;favorers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">3196376</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">&quot;replurkable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="attr">&quot;replurked&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="attr">&quot;replurker_id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="attr">&quot;replurkers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">&quot;replurkers_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>JSON 格式縮排後：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;responses_seen&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;qualifier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;thinks&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plurk_id&quot;</span><span class="punctuation">:</span> <span class="number">90812</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;response_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;limited_to&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;no_comments&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;is_unread&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lang&quot;</span><span class="punctuation">:</span> <span class="string">&quot;en&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;content_raw&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test me out&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plurk_type&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test me out&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;qualifier_translated&quot;</span><span class="punctuation">:</span> <span class="string">&quot;thinks&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;posted&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Fri, 05 Jun 2009 23:07:13 GMT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;owner_id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;favorite&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;favorite_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;favorers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="number">3196376</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;replurkable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;replurked&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;replurker_id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;replurkers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;replurkers_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如果希望節省些傳輸流量的話，那麼建議在 OAuth 的請求當中，加入「&amp;minimal_data &#x3D; 1」作為參數發送請求，伺服器回傳的資料格式當中將會省略一些資料，如 content_raw 和任何 null 屬性的資料將會被省略，以下為回傳的範例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;lang&quot;</span><span class="punctuation">:</span> <span class="string">&quot;en&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;posted&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Fri, 05 Jun 2009 23:07:13 GMT&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;qualifier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;thinks&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;plurk_id&quot;</span><span class="punctuation">:</span> <span class="number">90812</span><span class="punctuation">,</span> <span class="attr">&quot;owner_id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test me out&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;is_unread&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;no_comments&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;plurk_type&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>JSON 格式縮排後：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;lang&quot;</span><span class="punctuation">:</span> <span class="string">&quot;en&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;posted&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Fri, 05 Jun 2009 23:07:13 GMT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;qualifier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;thinks&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plurk_id&quot;</span><span class="punctuation">:</span> <span class="number">90812</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;owner_id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test me out&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;is_unread&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;no_comments&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plurk_type&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="使用者資料"><a href="#使用者資料" class="headerlink" title="使用者資料"></a>使用者資料</h1><h1 id="拿一個使用者資料來當範例"><a href="#拿一個使用者資料來當範例" class="headerlink" title="拿一個使用者資料來當範例"></a>拿一個使用者資料來當範例</h1><p>根據不同的請求，回傳的資料將會有所不同，以 responses 與 plurks 來說，回傳的資料量是最小的，範例如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;display_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;amix3&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;nick_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;amix&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;has_profile_image&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>JSON 格式縮排後：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;display_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;amix3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nick_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;amix&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;has_profile_image&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>這還可以用來呈現少量的使用者資訊。</p><p>相較其他 API 的請求，例如查看朋友列表或個人資料，回傳的資料量將會更大量：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;display_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alexey&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;is_channel&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;nick_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Scoundrel&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;has_profile_image&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Canada&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;date_of_birth&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Sat, 19 Mar 1983 00:00:00 GMT&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;relationship&quot;</span><span class="punctuation">:</span> <span class="string">&quot;not_saying&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">&quot;full_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alexey Kovyrin&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;recruited&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> <span class="attr">&quot;karma&quot;</span><span class="punctuation">:</span> <span class="number">33.5</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>JSON 格式縮排後：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;display_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alexey&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;is_channel&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nick_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Scoundrel&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;has_profile_image&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Canada&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;date_of_birth&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Sat, 19 Mar 1983 00:00:00 GMT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;relationship&quot;</span><span class="punctuation">:</span> <span class="string">&quot;not_saying&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;full_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alexey Kovyrin&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;recruited&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;karma&quot;</span><span class="punctuation">:</span> <span class="number">33.5</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>資料格式說明：</p><ul><li>id: 使用者的編號。</li><li>nick_name: 使用者唯一性的名稱，例如：amix。</li><li>display_name: 使用者非唯一性的名稱，例如：Amix S，並不為 null 時才會顯示。</li><li>premium: 以 Boolean 值顯示使用者目前是否有噗幣。</li><li>has_profile_image: 如果數值為 1，代表使用者有設置大頭貼，否則使用者尚未設置大頭貼，請使用預設大頭貼。</li><li>avatar: 使用者大頭貼的最新版本。</li><li>location: 使用者的居住地，例如：Aarhus Denmark.</li><li>default_lang: 使用者資料的語系。</li><li>date_of_birth: 使用者的出生年月日，請注意，出生年月日會以 UTC 時區來儲存，請不要轉換為當地時區，否則您可能會獲得錯誤的出生年月日。</li><li>bday_privacy: 使用者的出生年月日。<ul><li>0 &#x3D;&gt; 隱藏生日日期及年齡。</li><li>1 &#x3D;&gt; 顯示生日日期，但不顯示出生年、年齡。</li><li>2 &#x3D;&gt; 顯示生日日期及年齡。</li></ul></li><li>full_name: 使用者的全名，例如：Amir Salihefendic。</li><li>gender: 使用者的性別。 <ul><li>1 &#x3D;&gt; 男生</li><li>0 &#x3D;&gt; 女生</li><li>2 &#x3D;&gt; 不顯示&#x2F;其他</li></ul></li><li>karma: 使用者 Karma 的數值。</li><li>recruited: 使用者成功募集的人數。</li><li>relationship: 使用者的感情&#x2F;婚姻狀態。<ul><li>not_saying &#x3D;&gt; 不公開</li><li>single &#x3D;&gt; 單身</li><li>married &#x3D;&gt; 已婚</li><li>divorced &#x3D;&gt; 再次恢復單身</li><li>engaged &#x3D;&gt; 已訂婚</li><li>in_relationship &#x3D;&gt; 有交往對象</li><li>complicated &#x3D;&gt; 一言難盡</li><li>widowed &#x3D;&gt; 喪偶</li><li>unstable_relationship &#x3D;&gt; 不穩定交往中</li><li>open_relationship &#x3D;&gt; 開放式關係</li></ul></li></ul><h1 id="關於出生及年齡的隱私"><a href="#關於出生及年齡的隱私" class="headerlink" title="關於出生及年齡的隱私"></a>關於出生及年齡的隱私</h1><ul><li>如果使用者將他的生日設定為隱藏(bday_privacy&#x3D;0)，那麼 date_of_birth 的資料將會以 null 的方式回傳。</li><li>如果使用者將他的年齡設定為隱藏(bday_privacy&#x3D;1)，那麼 date_of_birth 的出生年將會更新為西元 1904 年的方式回傳。</li></ul><h1 id="如何顯示大頭貼"><a href="#如何顯示大頭貼" class="headerlink" title="如何顯示大頭貼"></a>如何顯示大頭貼</h1><p>如果您需要取得使用者大頭貼的 URL，那麼以 user_id 為使用者的 id，而 avatar 為大頭貼的版本。</p><p>如果 has_profile_image 的參數為 1，並且 avatar 的參數為 null，那麼大頭貼的 URL 為：</p><ul><li><a href="https://avatars.plurk.com/%7Buser_id%7D-small.gif">https://avatars.plurk.com/{user_id}-small.gif</a> </li><li><a href="https://avatars.plurk.com/%7Buser_id%7D-medium.gif">https://avatars.plurk.com/{user_id}-medium.gif</a> </li><li><a href="https://avatars.plurk.com/%7Buser_id%7D-big.jpg">https://avatars.plurk.com/{user_id}-big.jpg</a></li></ul><p>如果 has_profile_image 的參數為 1，並且 avatar 的參數並不是 null，那麼大頭貼的 URL 為：</p><ul><li><a href="https://avatars.plurk.com/%7Buser_id%7D-small%7Bavatar%7D.gif">https://avatars.plurk.com/{user_id}-small{avatar}.gif</a> </li><li><a href="https://avatars.plurk.com/%7Buser_id%7D-medium%7Bavatar%7D.gif">https://avatars.plurk.com/{user_id}-medium{avatar}.gif</a> </li><li><a href="https://avatars.plurk.com/%7Buser_id%7D-big%7Bavatar%7D.jpg">https://avatars.plurk.com/{user_id}-big{avatar}.jpg</a></li></ul><p>如果 has_profile_image 的參數為 0，那麼大頭貼的 URL 為：</p><ul><li><a href="https://www.plurk.com/static/default_small.gif">https://www.plurk.com/static/default_small.gif</a> </li><li><a href="https://www.plurk.com/static/default_medium.gif">https://www.plurk.com/static/default_medium.gif</a> </li><li><a href="https://www.plurk.com/static/default_big.gif">https://www.plurk.com/static/default_big.gif</a></li></ul>]]></content>
    
    
    <summary type="html">Plurk 資料被編譯成 JSON 格式，所使用的日期是 UTC，您也可以將 UTC 發佈到 Plurk 伺服器 ...</summary>
    
    
    
    <category term="文件翻譯" scheme="https://blog.init.engineer/categories/%E6%96%87%E4%BB%B6%E7%BF%BB%E8%AD%AF/"/>
    
    <category term="Plurk API Docs" scheme="https://blog.init.engineer/categories/%E6%96%87%E4%BB%B6%E7%BF%BB%E8%AD%AF/Plurk-API-Docs/"/>
    
    
    <category term="Plurk API" scheme="https://blog.init.engineer/tags/Plurk-API/"/>
    
  </entry>
  
  <entry>
    <title>Plurk API 官方說明文件 - 簡介</title>
    <link href="https://blog.init.engineer/posts/PlurkAPIResources/"/>
    <id>https://blog.init.engineer/posts/PlurkAPIResources/</id>
    <published>2017-04-13T16:00:00.000Z</published>
    <updated>2017-04-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="＊-本文章為個人翻譯，故正式內容以-Plurk-官方為主-＊"><a href="#＊-本文章為個人翻譯，故正式內容以-Plurk-官方為主-＊" class="headerlink" title="＊ 本文章為個人翻譯，故正式內容以 Plurk 官方為主 ＊"></a><em><strong>＊ 本文章為個人翻譯，故正式內容以 Plurk 官方為主 ＊</strong></em></h4><h4 id="＊-原文請參照-https-www-plurk-com-API-toc-＊"><a href="#＊-原文請參照-https-www-plurk-com-API-toc-＊" class="headerlink" title="＊ 原文請參照 https://www.plurk.com/API#toc ＊"></a><em><strong>＊ 原文請參照 <a href="https://www.plurk.com/API#toc">https://www.plurk.com/API#toc</a> ＊</strong></em></h4><br /><p><img src="/img/posts/PlurkAPIResources/1.png" alt="Plurk API 2.0"></p><h1 id="Plurk-API-2-0"><a href="#Plurk-API-2-0" class="headerlink" title="Plurk API 2.0"></a>Plurk API 2.0</h1><p><a href="https://www.plurk.com/API#toc">Plurk API 2.0</a> 是遵循 <a href="https://oauth.net/core/1.0a/">OAuth 1.0a</a> 開放標準來保護使用者的隱私安全，它提供應用程式在 <a href="https://www.plurk.com/">Plurk</a> 平台上訪問和簽證等等的標準方式，應用程式可以讀取使用者的河道、發表噗文，並且基於使用者的利益，不會保留使用者的密碼，所以鼓勵所有希望訪問使用者資訊的應用程式盡快轉移到 <a href="https://www.plurk.com/API#toc">Plurk API 2.0</a> <a href="https://zh.wikipedia.org/wiki/OAuth">OAuth</a>。</p><blockquote><p>附註說明：<a href="https://zh.wikipedia.org/wiki/OAuth">OAuth（開放授權）是一個開放標準，允許用戶讓第三方應用存取該用戶在某一網站上儲存的私密的資源（如相片，影片，聯絡人列表），而無需將使用者名稱和密碼提供給第三方應用。</a></p></blockquote><p><a href="https://www.plurk.com/PlurkApp/register">立即註冊</a>自己的 Plurk 應用程式！或者在<a href="https://www.plurk.com/PlurkApp/">這裡</a>管理您創建的 Plurk 應用程式。</p><p><a href="https://www.plurk.com/API#toc">Plurk API 2.0</a> 與我們原先基於 <a href="http://fred-zone.blogspot.tw/2014/01/web-session.html">session-based</a> <a href="https://www.plurk.com/API/1.0/">Plurk API 1.0</a> 之間的差異：</p><ol><li><a href="https://www.plurk.com/API#toc">Plurk API 2.0</a> 是無狀態的(不需要登入使用者帳號)，而原先 <a href="https://www.plurk.com/API/1.0/">Plurk API 1.0</a> 是基於 <a href="http://fred-zone.blogspot.tw/2014/01/web-session.html">session-based</a> 的。</li><li><a href="https://www.plurk.com/API#toc">Plurk API 2.0</a> URL 前綴，帶有 <a href="https://www.plurk.com/APP/">https://www.plurk.com/APP/</a> ，而不是原先的 <a href="https://www.plurk.com/API/">https://www.plurk.com/API/</a> 。</li><li><a href="https://www.plurk.com/API#toc">Plurk API 2.0</a> 的請求必須遵循 <a href="https://oauth.net/core/1.0a/">OAuth Core 1.0a</a> 標準規範來進行簽章。</li><li>輸出與輸出的參數與原先 <a href="https://www.plurk.com/API/1.0/">Plurk API 1.0</a> 相同，但 <a href="https://www.plurk.com/API#toc">Plurk API 2.0</a> 不需要「api_key」。</li></ol><p>在使用 API 之前，<a href="https://www.plurk.com/API#toc">Plurk API 2.0</a> 應用程式必須遵循 <a href="https://zh.wikipedia.org/wiki/OAuth">OAuth</a> 的開放標準來獲得使用者的 Token。大多數的 API 使用 Three-Legged OAuth，它需要透過使用者金鑰&#x2F;密鑰和 Token 金鑰&#x2F;密鑰來簽證請求。然而有一些 API 還支持 Two-Legged OAuth，該請求可以使用應用程式金鑰&#x2F;密鑰進行簽證。</p><blockquote><p>附註說明：Three-Legged OAuth，意指用戶授權過程當中涉及三種角色，分別為 應用程式(Application)、服務提供者(Service Provider)、使用者(User)<br><img src="/img/posts/PlurkAPIResources/2.png" alt="Three-Legged OAuth"></p></blockquote><blockquote><p>附註說明：Two-Legged OAuth，則是授權過程只涉及兩種角色，分別為 應用程式(Application)、服務提供者(Service Provider)<br><img src="/img/posts/PlurkAPIResources/3.png" alt="Two-Legged OAuth"></p></blockquote><p>如果您是機器人的開發人員或單獨只是給自己玩的使用者，則可以使用我們的 <a href="https://www.plurk.com/OAuth/test">測試控制台</a> 獲取您自己的永久 Token，您不需要撰寫程式碼來獲取 Token。</p><p><a href="https://www.plurk.com/API#toc">Plurk API 2.0</a> 的資料返回是 <a href="http://www.json.org/">JSON</a> 文字格式，所以您應該使用 <a href="http://www.json.org/">JSON</a> 套件來解碼返回的資料。</p><h1 id="相關資源"><a href="#相關資源" class="headerlink" title="相關資源"></a>相關資源</h1><h3 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h3><ul><li><a href="https://www.plurk.com/OAuth/test">Plurk OAuth 測試控制台</a></li><li>開發人員可以查詢自己創立的應用程式 &#x3D;&gt; <a href="https://www.plurk.com/PlurkApp/">我開發的應用服務</a></li><li>使用者可以查詢自己授權的應用程式 &#x3D;&gt; <a href="https://www.plurk.com/APP/">授權的應用服務</a></li><li>關注相關的新聞和更新訊息 &#x3D;&gt; <a href="https://www.plurk.com/plurkapi">@plurkapi</a></li><li>回報臭蟲 Bug &#x3D;&gt; <a href="mailto:api@plurk.com">api@plurk.com</a></li></ul><h3 id="Plurk-API-2-0-套件："><a href="#Plurk-API-2-0-套件：" class="headerlink" title="Plurk API 2.0 套件："></a>Plurk API 2.0 套件：</h3><ul><li>Python &#x3D;&gt; <a href="https://github.com/clsung/plurk-oauth">plurk-oauth</a> 作者 clsung</li><li>PHP &#x3D;&gt; <a href="https://github.com/clsung/plurkoauth">plurkoauth</a> 作者 clsung</li><li>Perl &#x3D;&gt; <a href="https://github.com/clsung/net-plurk">Net::Plurk</a> 作者 clsung</li><li>Java &#x3D;&gt; <a href="https://github.com/qrtt1/jplurk-oauth/wiki">JPlurk-OAuth</a> 作者 qrtt1</li><li>Ruby &#x3D;&gt; <a href="https://github.com/rascov/PlurkOAuth">PlurkOAuth</a> 作者 rascov</li><li>Lua &#x3D;&gt; <a href="https://github.com/ykhuang/LuaPlurk">LuaPlurk</a> 作者 ykhuang</li><li>JavaScript &#x3D;&gt; <a href="https://github.com/clsung/plurkjs">plurkjs</a> 作者 clsung</li><li>C# &#x3D;&gt; <a href="https://github.com/rschiang/rsPlurkLib">rsPlurkLib</a> 作者 rschiang</li><li>Go &#x3D;&gt; <a href="https://github.com/clsung/plurgo">plurgo</a> 作者 clsung</li></ul><h3 id="OAuth-套件："><a href="#OAuth-套件：" class="headerlink" title="OAuth 套件："></a>OAuth 套件：</h3><ul><li>Python &#x3D;&gt; <a href="https://github.com/joestump/python-oauth2">python-oauth2</a></li><li>PHP &#x3D;&gt; <a href="https://code.google.com/archive/p/oauth-php/">oauth-php</a></li><li>Perl &#x3D;&gt; <a href="http://search.cpan.org/dist/Net-OAuth/">Net::OAuth</a></li><li>Lua &#x3D;&gt; <a href="https://github.com/ignacio/LuaOAuth">LuaOAuth</a></li><li>其他的 OAuth 套件 &#x3D;&gt; <a href="http://oauth.net/code/">http://oauth.net/code/</a></li></ul><h1 id="OAuth-的流程及服務端口"><a href="#OAuth-的流程及服務端口" class="headerlink" title="OAuth 的流程及服務端口"></a>OAuth 的流程及服務端口</h1><p>一般來說，應用程式必須透過以下步驟，才能獲取使用者的 Token。</p><ol><li>在<a href="https://www.plurk.com/PlurkApp/register">這裡</a>註冊獲取 Plurk 應用程式金鑰&#x2F;密鑰(OAuth 應用程式金鑰&#x2F;密鑰)</li><li>請求臨時 Token (OAuth 回應 Token)</li><li>將使用者導向到 Plurk 以授權權限</li><li>在回應當中接收 OAuth 驗證</li><li>請求永久使用者 Token (OAuth 使用者 Token)</li></ol><p>獲取使用者的 Token 金鑰&#x2F;密鑰後，應用程式就可以開始簽署請求，以使用任何 Plurk API 2.0 的功能。</p><h3 id="Plurk-OAuth-的服務端口："><a href="#Plurk-OAuth-的服務端口：" class="headerlink" title="Plurk OAuth 的服務端口："></a>Plurk OAuth 的服務端口：</h3><ol><li>獲取請求 Token &#x3D;&gt; <a href="https://www.plurk.com/OAuth/request_token">https://www.plurk.com/OAuth/request_token</a> (HTTPS GET&#x2F;POST)</li><li>授權頁面(網頁) &#x3D;&gt; <a href="https://www.plurk.com/OAuth/authorize">https://www.plurk.com/OAuth/authorize</a></li><li>授權頁面(手機) &#x3D;&gt; <a href="https://www.plurk.com/m/authorize">https://www.plurk.com/m/authorize</a></li><li>請求使用者 Token &#x3D;&gt; <a href="https://www.plurk.com/OAuth/access_token">https://www.plurk.com/OAuth/access_token</a> (HTTPS GET&#x2F;POST)</li></ol><h3 id="支持多種設備"><a href="#支持多種設備" class="headerlink" title="支持多種設備"></a>支持多種設備</h3><p>您還可以將可選參數 &quot;deviceid(裝置)&quot; 傳遞給授權頁面，從而使您的應用程式能夠使用相同的 Plurk 帳號安裝在多個設備上。倘若以前使用過相同 &quot;deviceid(裝置)&quot; 登入應用服務，將會把以前的 Token 覆蓋掉。另外還可以傳遞另一個可選參數 &quot;model&quot;，以便有意義的 model 名稱來識別使用者的裝置。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.plurk.com/OAuth/authorize?oauth_token=ReqKMrVIjOLI&amp;deviceid=efa9183a839f421821dc5c&amp;model=Apple+iPhone+4S</span><br></pre></td></tr></table></figure><p>&quot;deviceid&quot; 的最大長度為 32 個字符，默認值為空(&quot;&quot;)，您應該使用唯一的 ID (例如 UUID)來識別使用者的裝置，例如：&quot;ab21862c272bbd703ef9d5b35458b78d&quot;，該 model 名稱或 &quot;deviceid&quot; 將顯示在使用者的 <a href="https://www.plurk.com/APP">我授權的 Plurk 應用服務</a> 頁面中，使用有意義的裝置名稱可以幫助使用者輕鬆識別他的授權裝置。</p><blockquote><p>附註說明：<a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81">通用唯一識別碼(英語：Universally Unique Identifier，簡稱 UUID)</a></p></blockquote><p><img src="/img/posts/PlurkAPIResources/4.jpg" alt="我授權的 Plurk 應用服務 Demo"></p><h1 id="Plurk-OAuth-規範"><a href="#Plurk-OAuth-規範" class="headerlink" title="Plurk OAuth 規範"></a>Plurk OAuth 規範</h1><ul><li>簽證方法是遵循 HMAC-SHA1。(<a href="https://oauth.net/core/1.0a/#anchor15">?</a>)</li><li>請在 HTTP 授權標頭當中傳遞 OAuth 參數。(<a href="https://oauth.net/core/1.0a/#anchor15">?</a>)</li><li>對於每個 [ 時間戳記 + 隨機值 ] 的請求，都應該是唯一的，而時間戳記應該是非常接近當前時間。(<a href="https://oauth.net/core/1.0a/#anchor15">?</a>)</li><li>在請求臨時 Token 之後，使用者必須在 30 分鐘內授權請求，Plurk App 必須在 60 分鐘以內獲得永久 Token。</li><li>可以傳遞 <a href="https://www.plurk.com/API#toc">Plurk API 2.0</a> 參數：GET (類似於 <a href="https://www.plurk.com/API/1.0/">Plurk API 1.0</a>) 或 POST (推薦)。</li></ul><h1 id="Plurk-OAuth-資料流"><a href="#Plurk-OAuth-資料流" class="headerlink" title="Plurk OAuth 資料流"></a>Plurk OAuth 資料流</h1><p><img src="/img/posts/PlurkAPIResources/5.png" alt="資料流"></p>]]></content>
    
    
    <summary type="html">Plurk API 2.0 遵循 OAuth 1.0a 開放標準來保護使用者的隱私 ...</summary>
    
    
    
    <category term="文件翻譯" scheme="https://blog.init.engineer/categories/%E6%96%87%E4%BB%B6%E7%BF%BB%E8%AD%AF/"/>
    
    <category term="Plurk API Docs" scheme="https://blog.init.engineer/categories/%E6%96%87%E4%BB%B6%E7%BF%BB%E8%AD%AF/Plurk-API-Docs/"/>
    
    
    <category term="Plurk API" scheme="https://blog.init.engineer/tags/Plurk-API/"/>
    
  </entry>
  
  <entry>
    <title>Android 執行緒使用經驗談 - runOnUiThread</title>
    <link href="https://blog.init.engineer/posts/AndroidRunOnUiThreadBasic/"/>
    <id>https://blog.init.engineer/posts/AndroidRunOnUiThreadBasic/</id>
    <published>2017-04-10T16:00:00.000Z</published>
    <updated>2017-04-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Android 執行緒的世界當中，我們可以指派工作給員工去執行，例如今天我指派了很多事情給員工，並且交代員工每完成一件事情，就請回報你的進度給我(顯示東西到畫面上)，那就會遇到「Only the original thread that created a view hierarchy can touch its views.」這樣的錯誤訊息，從 Google 翻譯上得到的解釋是「只有創建視圖層次結構的原始線程才能觸及其視圖」。</p><p>文字上可能有點難以理解，這麼說好了，你指派了很多事情給你的員工，同時你吩咐你的員工每個進度都要做簡報，然後還要上台來報告給你聽，對這員工來說，他沒辦法承擔那麼複雜的事情，他只能全部事情做完之後，才開始做簡報、上台報告給你聽，這就有點像是你下載 100 張照片，但手機必須 100 張下載完才告訴你它下載完了，你沒辦法知道它下載到第幾張照片了，這樣並不是我們想要的解決方案。</p><p>所以換個方式來想，我們可不可以 ... 這個員工Ａ就繼續忙他的事情，但另外吩咐一個員工Ｂ負責追蹤員工Ａ的進度，並且不斷向我們報告呢？答案是可以的！這時候我們就需要使用到 runOnUiThread 這執行緒，從最簡單的範例說起，我們希望 App 一執行，就使用 runOnUiThread 來顯示 Toast 訊息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main); </span><br><span class="line"></span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;runOnUiThread 執行了！&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不過如果某個 Activity 會時常用到 runOnUiThread 的話，我們也可以用這樣的方法來寫：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">__Show_Dialog</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> progress)</span> &#123;</span><br><span class="line">    runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (progress) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="comment">// 創造 Dialog 的方法</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="comment">// 更新 Dialog 的方法</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="comment">// 關閉 Dialog 的方法</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// ... 或其他自定義的方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不過就只有這樣簡單解釋的話，好像有點太潦草了，所以我們追回 runOnUiThread 的 Android 原始程式碼去查看，得到這樣：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Runs the specified action on the UI thread. If the current thread is the UI</span></span><br><span class="line"><span class="comment"> * thread, then the action is executed immediately. If the current thread is</span></span><br><span class="line"><span class="comment"> * not the UI thread, the action is posted to the event queue of the UI thread.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> action the action to run on the UI thread</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">runOnUiThread</span><span class="params">(Runnable action)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() != mUiThread) &#123;</span><br><span class="line">        mHandler.post(action);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        action.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致意思是，如果現在主執行緒上再處理的是我們要做的事情，那就直接執行我們要做的事情吧！如果不是的話，那麼我們就把事情排入 UI 執行緒的隊伍當中，等待我們的事情被執行。</p>]]></content>
    
    
    <summary type="html">在 Android 執行緒的世界當中，我們可以指派工作給員工去執行，例如今天我指派了很多事情給員工 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="Android 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/Android-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="Android" scheme="https://blog.init.engineer/tags/Android/"/>
    
    <category term="runOnUiThread" scheme="https://blog.init.engineer/tags/runOnUiThread/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods iOS 第三方套件管理工具</title>
    <link href="https://blog.init.engineer/posts/CocoaPodsBasic/"/>
    <id>https://blog.init.engineer/posts/CocoaPodsBasic/</id>
    <published>2017-04-07T16:00:00.000Z</published>
    <updated>2017-04-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>當我們在開發 iOS 應用程式的時候，時常會為了完成某些功能，而開始尋找有沒有人已經寫了相關套件來解決問題，但是如果引用了太多第三方套件，又會變得難以管理整個專案，因此就有了 <a href="https://cocoapods.org/">CocoaPods</a> 這相依性套件管理工具。</p><ol><li>安裝 <a href="https://cocoapods.org/">CocoaPods</a>，請開啟終端機，並執行以下指令：</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure><ol start="2"><li>去吃個飯、洗個澡之類的，因為這會花上非常久的時間。</li></ol><p>安裝完成之後，就可以開始使用 <a href="https://cocoapods.org/">CocoaPods</a> 囉！首先我們利用 Xcode 在桌面當中，建立一個以 Swift 爲語言的 iOS 專案，接著我們開啟終端機，並 cd (移動)到專案的目錄下，執行以下指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod init</span><br></pre></td></tr></table></figure><p>這項指令的功能是在目錄下建立一個 podfile 檔案，用文字編輯直接打開 podfile 檔案即可，就可以發現它幫你撰寫了一些預設方法了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Uncomment the next line to define a global platform for your project</span><br><span class="line"># platform :ios, &#x27;9.0&#x27;</span><br><span class="line"></span><br><span class="line">target &#x27;Your-Project&#x27; do</span><br><span class="line">  # Comment the next line if you&#x27;re not using Swift and don&#x27;t want to use dynamic frameworks</span><br><span class="line">  use_frameworks!</span><br><span class="line"></span><br><span class="line">  # Pods for Your-Project</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>乾太在這邊稍微把註解刪除，並加上一小點說明，這時候我們就可以開始引入些第三方套件囉：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">target &#x27;Your-Project&#x27; do</span><br><span class="line">  use_frameworks!</span><br><span class="line"></span><br><span class="line">  # 加入你要引用的第三方套件</span><br><span class="line">  pod &#x27;OAuthSwift&#x27;, &#x27;1.1.0&#x27;</span><br><span class="line">  pod &#x27;TextFieldEffects&#x27;</span><br><span class="line">  pod &#x27;NVActivityIndicatorView&#x27;</span><br><span class="line">  pod &#x27;PopupDialog&#x27;, &#x27;~&gt; 0.5&#x27;</span><br><span class="line">  pod &#x27;SwiftyJSON&#x27;</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>這邊我總共引用了 6 種我常用且非常喜歡的套件，也順便介紹給大家，分別是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># [OAuthSwift](https://github.com/OAuthSwift/OAuthSwift)</span><br><span class="line"># Swift 介接 OAuth 的第三方套件，使用方法簡單又直覺。</span><br><span class="line"></span><br><span class="line"># [TextFieldEffects](https://github.com/raulriera/TextFieldEffects)</span><br><span class="line"># 有別於以往 TextField 輸入框的第三方套件，提供較為美觀的輸入框。</span><br><span class="line"></span><br><span class="line"># [NVActivityIndicatorView](https://github.com/ninjaprox/NVActivityIndicatorView)</span><br><span class="line"># 提供許多無縫向量動圖，可使用於 Loading 或其他等待畫面當中，相當美觀。</span><br><span class="line"></span><br><span class="line"># [PopupDialog](https://github.com/Orderella/PopupDialog)</span><br><span class="line"># 提供較為美觀的 Dialog 畫面。</span><br><span class="line"></span><br><span class="line"># [SwiftyJSON](https://github.com/SwiftyJSON/SwiftyJSON)</span><br><span class="line"># 提供更簡潔的 JSON 使用方法。</span><br></pre></td></tr></table></figure><p>另外如果對於 <a href="https://github.com/OAuthSwift/OAuthSwift">OAuthSwift</a> 有興趣的話，教學可見 ＝&gt; <a href="https://blog.init.engineer/posts/OAuthForSwiftBasic/">iOS Swift 第三方套件 - OAuthSwift</a></p><ol start="3"><li>輸入完以後，我們要開始執行安裝第三方套件，必須執行以下指令：</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><p>安裝完了以後，整個專案的檔案結構可能會不太一樣，會出現 <code>專案名稱.xcworkspace</code> 以及 <code>專案名稱.xcodeproj</code>，從今以後，這項專案我們必須開啟「xcworkspace」。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open 專案名稱.xcworkspace</span><br></pre></td></tr></table></figure><p>往後如果要管理第三方套件，就直接修改 podfile，並且執行 <code>pod install</code> 即可。</p>]]></content>
    
    
    <summary type="html">當我們在開發 iOS 應用程式的時候，時常會為了完成某些功能，而開始尋找有沒有人已經寫了相關套件來解決問題 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="iOS 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/iOS-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="CocoaPods" scheme="https://blog.init.engineer/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>iOS Swift 第三方套件 - OAuthSwift</title>
    <link href="https://blog.init.engineer/posts/OAuthForSwiftBasic/"/>
    <id>https://blog.init.engineer/posts/OAuthForSwiftBasic/</id>
    <published>2017-04-04T16:00:00.000Z</published>
    <updated>2017-04-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 iOS 開發介接第三方 API 相關的應用程式時，我們時常會需要遵循 <a href="https://zh.wikipedia.org/wiki/OAuth">OAuth 開放標準規範</a>，這過程十分繁雜，不過幸虧有大神寫出輕便使用的套件了，而且相容 OAuth 1.0、OAuth 2.0，那便是 <a href="https://github.com/OAuthSwift/OAuthSwift">OAuthSwift</a>，注意哦！這邊是使用「Swift」語言，如果您是使用「Objective-C」開發 iOS 應用程式的話，你可能要採用另一位大神寫的 <a href="https://github.com/nxtbgthng/OAuth2Client">OAuth2Client</a> 了。<br><br /><br /><br><strong>以下範例我們以 <a href="https://github.com/OAuthSwift/OAuthSwift">OAuthSwift</a> 作為範例。</strong><br><br /><br /><br>首先我們必須在 iOS 應用程式的專案當中，引入 <a href="https://github.com/OAuthSwift/OAuthSwift">OAuthSwift</a> 套件，引入的方式有兩種：</p><ol><li><a href="https://cocoapods.org/">CocoaPods</a></li><li><a href="https://github.com/Carthage/Carthage">Carthage</a></li></ol><p>這裡我們使用 <a href="https://cocoapods.org/">CocoaPods</a> 做完教學使用，另外如果對於 <a href="https://cocoapods.org/">CocoaPods</a><br /><br>有興趣的話，教學可見 ＝&gt; <a href="https://blog.init.engineer/posts/CocoaPodsBasic/">CocoaPods iOS 第三方套件管理工具</a><br /><br><br /></p><p>引入 <a href="https://cocoapods.org/">CocoaPods</a> 之後，我們接下來以介接「<a href="https://www.plurk.com/API">Plurk API 2.0</a>」做完介接範例，我們必須先到 Plurk 註冊一個第三方手機或桌面應用程式的應用服務。<br /><br>&#x3D;&gt; <a href="https://www.plurk.com/PlurkApp/register">請到這裡註冊 Plurk 應用服務</a><br /><br><br /></p><p>註冊完畢以後，我們可以多多善用 <a href="https://www.plurk.com/OAuth/test#/APP/Users/me">Plurk API &amp; OAuth test console for Developers</a> 噗浪 API 測試工具。<br /><br>&#x3D;&gt; <a href="https://www.plurk.com/OAuth/test#/APP/Users/me">Plurk API &amp; OAuth test console for Developers</a><br><br /><br><br /><br>首先這邊介紹四種很重要的 &quot;Key(金鑰)&quot;<br /></p><ol><li>App key &#x3D;&gt; 用於驗證介接 API 端口的合法性，你可以理解為你「應用程式的帳號」</li><li>App secret &#x3D;&gt; App key 的密鑰，你可以理解為你「應用程式的密碼」</li><li>Token &#x3D;&gt; 令牌、通行證之類的，當然也有人解釋成紀念幣，不過你更應該把它理解為「使用者的令牌」</li><li>Token secret &#x3D;&gt; Token 的密鑰，你可以理解為「使用者的密碼」</li></ol><br />我們來試著獲取這四種很重要的金鑰吧！<br /><br />#### 1. 當你註冊完一款應用程式服務時，Plurk 會配發你一組 App key、App secret。####     ↓  ↓  ↓#### 2. 把這兩個輸入到測試工具當中相對應的欄位。####     ↓  ↓  ↓#### 3. 然後點選「Get Request Token」按鈕，這步驟是獲取「未授權」的 Token、Token secret。####     ↓  ↓  ↓#### 4. 再來點選「Open Authorization URL」按鈕，這步驟是開啟授權網址。####     ↓  ↓  ↓#### 5. 網頁會跳換至 Plurk 授權網頁，這裡是在詢問使用者是否以他的社群軟體身份，授權我們應用程式相關權限。####     ↓  ↓  ↓#### 6. 獲得授權時，Plruk Authorization URL 會賦予一個授權碼，這要先記下來。####     ↓  ↓  ↓#### 7. 最後點選「Get Access Token」按鈕，並輸入剛剛獲得的授權碼。####     ↓  ↓  ↓#### 8. 授權完畢以後，剛剛獲取的 Token、Token secret 就「已授權」了。<br /><p>接下來你可以試著去獲取 Plurk API 相關的應用，我們先以「&#x2F;APP&#x2F;Users&#x2F;me」為例子，直接按下「Invoke API」按鈕，就可以獲得自己的資料(JSON格式)。</p><p><img src="/img/posts/OAuthForSwiftBasic/1.png" alt="範例圖"></p><p>既然現在我們已經了解 OAuth 的運作概念了，那我們差不多該進入主題囉！該如何使用 OAuthSwift 呢？首先我們要思考到，我們會先請求使用者到 Plruk 網頁去認證，當使用者認證完畢後，網頁可能會做些什麼動作之類的，然後跳回我們的應用程式，那我們要開始思考，如何讓網頁能夠「呼叫應用程式」呢？<br><br /></p><p>很直覺的，我們必須在我們的應用程式當中，設定一個「URL Schemes」網址呼叫方案，這可以讓瀏覽器呼叫某特別網址時，應用程式看到就知道說，這意思是在叫應用程式而不是網頁。</p><p><img src="/img/posts/OAuthForSwiftBasic/2.png" alt="呼叫應用程式"></p><p>設定完畢後，我們就要開始來撰寫程式邏輯了，在 Swift 當中，我們要先參考 OAuthSwift</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> OAuthSwift</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">接著我們需要建立一個 <span class="type">Swift</span> 物件，來幫我們完成 <span class="type">OAuth</span> 相關事宜<span class="operator">。</span></span><br><span class="line"></span><br><span class="line">```swift</span><br><span class="line"><span class="keyword">let</span> _OAuthSwift : <span class="type">OAuth1Swift</span> <span class="operator">=</span> <span class="type">OAuth1Swift</span>(</span><br><span class="line">    consumerKey:    <span class="string">&quot;Your App key&quot;</span>,</span><br><span class="line">    consumerSecret: <span class="string">&quot;Your App secret&quot;</span>,</span><br><span class="line">    requestTokenUrl: <span class="string">&quot;http://www.plurk.com/OAuth/request_token&quot;</span>,</span><br><span class="line">    authorizeUrl:    <span class="string">&quot;http://www.plurk.com/m/authorize&quot;</span>,</span><br><span class="line">    accessTokenUrl:  <span class="string">&quot;http://www.plurk.com/OAuth/access_token&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>再來使用者可能點個登入 Plurk 按鈕，就可以開啟瀏覽器登入 Plurk，並且授權我們的應用程式，這時候我們就要撰寫一個 function，執行這些事情：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">_OAuthSwift.authorize(</span><br><span class="line">    <span class="comment">// URL 請賦予剛剛 URL Schemes 的 URL</span></span><br><span class="line">    withCallbackURL: <span class="type">URL</span>(string: <span class="string">&quot;PlurkAPI://oauth-callback/plurk&quot;</span>)<span class="operator">!</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果授權成功</span></span><br><span class="line">    success: &#123; credential, response, parameters <span class="keyword">in</span></span><br><span class="line">        <span class="comment">// 賦予 OAuthSwfit 已授權的 Token</span></span><br><span class="line">        _OAuthSwift.client.credential.oauthToken <span class="operator">=</span> credential.oauthToken</span><br><span class="line">        <span class="type">NSLog</span>(<span class="string">&quot;[Success] OAuth Token = <span class="subst">\(credential.oauthToken)</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 賦予 OAuthSwfit 已授權的 Token secret</span></span><br><span class="line">        _OAuthSwift.client.credential.oauthTokenSecret <span class="operator">=</span> credential.oauthTokenSecret</span><br><span class="line">        <span class="type">NSLog</span>(<span class="string">&quot;[Success] OAuth Token Secret = <span class="subst">\(credential.oauthTokenSecret)</span>&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果授權失敗</span></span><br><span class="line">    failure: &#123; error <span class="keyword">in</span></span><br><span class="line">        <span class="type">NSLog</span>(error.localizedDescription)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>獲得使用者授權之後，我們接下來可以試著使用 OAuthSwift 囉！以下為基本規範：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> _OAuthSwift.client.get(</span><br><span class="line">    <span class="string">&quot;Request URL，索取 Plurk API 的網址&quot;</span>,</span><br><span class="line">    parameters: [</span><br><span class="line">        <span class="string">&quot;Key&quot;</span> : <span class="string">&quot;Value&quot;</span></span><br><span class="line">        <span class="comment">// 這可以放些指定的參數</span></span><br><span class="line">    ],</span><br><span class="line">    success: &#123; response <span class="keyword">in</span></span><br><span class="line">        <span class="comment">// 成功索取後的 function</span></span><br><span class="line">        <span class="type">NSLog</span>(response.string)</span><br><span class="line">    &#125;,</span><br><span class="line">    failure: &#123; error <span class="keyword">in</span></span><br><span class="line">        <span class="comment">// 失敗後的 function</span></span><br><span class="line">        <span class="type">NSLog</span>(error.localizedDescription)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>那我們來點範例吧，我想要抓取使用者的資訊，也就是剛剛的「&#x2F;APP&#x2F;Users&#x2F;me」的功能，那麼我們必須這樣寫：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> _OAuthSwift.client.get(</span><br><span class="line">    <span class="string">&quot;http://www.plurk.com/APP/Users/me&quot;</span>,</span><br><span class="line">    success: &#123; response <span class="keyword">in</span></span><br><span class="line">        <span class="type">NSLog</span>(response.string)</span><br><span class="line">    &#125;,</span><br><span class="line">    failure: &#123; error <span class="keyword">in</span></span><br><span class="line">        <span class="type">NSLog</span>(error.localizedDescription)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>運行後，就可以在 Log 日誌當中看到使用者資料以 Json 格式的方式來回應囉！</p>]]></content>
    
    
    <summary type="html">在 iOS 開發介接第三方 API 相關的應用程式時，我們時常會需要遵循 OAuth 開放標準規範 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="iOS 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/iOS-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="Swift" scheme="https://blog.init.engineer/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Android 執行緒使用經驗談 - HandlerThread</title>
    <link href="https://blog.init.engineer/posts/AndroidThreadBasic/"/>
    <id>https://blog.init.engineer/posts/AndroidThreadBasic/</id>
    <published>2017-03-27T16:00:00.000Z</published>
    <updated>2017-03-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>單執行緒的應用程式，就像一條單向車道般，有時候剛好碰到對向車道可能會塞車，可是雙執行緒的應用程式，他就像高速公路般，可以使得你的應用程式非常順暢。</p><p>你可以把整個作業系統理解成一家公司，而「執行緒」就是你的員工，你底下有許多位員工，你今天可以派發一件或多件工作給你的員工。</p><p>我們以 Android 作為範例(當然也適用於 Java)，先從做一件工作開始：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定一件工作(Thread)</span></span><br><span class="line">    <span class="keyword">private</span> Thread __ThreadStudy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定 __ThreadStudy 這工作的工作內容為 __Study</span></span><br><span class="line">        <span class="built_in">this</span>.__ThreadStudy = <span class="keyword">new</span> <span class="title class_">Thread</span>(__Study);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 開始執行 __ThreadStudy 這件工作</span></span><br><span class="line">        <span class="built_in">this</span>.__ThreadStudy.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 數數字的工作內容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Runnable</span> <span class="variable">__Study</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不過這樣會面臨一個問題，當這個 Activity 結束時，在執行緒的地方上會發生錯誤，原因是因為 Study 這項工作並沒有結束，我們必須搭配 interrupt，告訴我們的 Study 該休息了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onDestroy();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 __ThreadStudy 這項工作並不是 null</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.__ThreadStudy != <span class="literal">null</span>)</span><br><span class="line">        <span class="comment">// 哈囉，這項工作該結束了。</span></span><br><span class="line">        <span class="built_in">this</span>.__ThreadStudy.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣有了工作內容的概念以後，我們接下來要開始思考，如何僱請一位員工，並且開始請這位員工做些事情呢？這時候我們就要動用到 Handler 以及 HandlerThread，你可以把 Handler 想像成你自己，然後 HandlerThread 想像成是你的員工，你必須指派 Thread 工作內容給你的員工：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 我們有一位老闆 _Handler</span></span><br><span class="line">    <span class="keyword">private</span> Handler __Handler;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 我們有一位員工 __HandlerThread</span></span><br><span class="line">    <span class="keyword">private</span> HandlerThread __HandlerThread;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// __HandlerThread 這位員工的名字叫做 HandlerThread</span></span><br><span class="line">        <span class="built_in">this</span>.__HandlerThread = <span class="keyword">new</span> <span class="title class_">HandlerThread</span>(<span class="string">&quot;HandlerThread&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 讓員工動起來，準備開始工作了！</span></span><br><span class="line">        <span class="built_in">this</span>.__HandlerThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 告訴 HandlerThread 這位工人，你的老闆是 _Handler</span></span><br><span class="line">        <span class="built_in">this</span>.__Handler = <span class="keyword">new</span> <span class="title class_">Handler</span>(__HandlerThread.getLooper());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 請老闆指派工作(數數字的工作)給員工</span></span><br><span class="line">        <span class="built_in">this</span>.__Handler.post(__Study);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 數數字的工作內容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Runnable</span> <span class="variable">__Study</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果 __HandlerThread 這員工並不是 null</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.__HandlerThread != <span class="literal">null</span>)</span><br><span class="line">            <span class="comment">// 哈囉，你的工作結束囉！</span></span><br><span class="line">            <span class="built_in">this</span>.__HandlerThread.removeCallbacks(__Study);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果 __Handler 這老闆並不是 null</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.__Handler != <span class="literal">null</span>)</span><br><span class="line">            <span class="comment">// 哈囉，該讓員工下班囉！</span></span><br><span class="line">            <span class="built_in">this</span>.__Handler.quit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HandlerThread 的基本教學大概就這樣，之後還有 runOnUiThread、Service、Broadcast ... 之類的可以寫 XD</p>]]></content>
    
    
    <summary type="html">單執行緒應用程式，就像單向車道般的常常塞車，但多執行緒的應用程式，就會像高速公路般的順暢流利 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="Android 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/Android-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="Android" scheme="https://blog.init.engineer/tags/Android/"/>
    
    <category term="HandlerThread" scheme="https://blog.init.engineer/tags/HandlerThread/"/>
    
  </entry>
  
  <entry>
    <title>擁有自動學習的 Python 機器人 - ChatterBot</title>
    <link href="https://blog.init.engineer/posts/ChatterBotTeaching/"/>
    <id>https://blog.init.engineer/posts/ChatterBotTeaching/</id>
    <published>2017-03-15T16:00:00.000Z</published>
    <updated>2017-03-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>「聊天機器人」一直是許多企業、學界在專研的東西，它可以用於許多用途上，例如淘寶會有機器人客服人員，會透過機器人來幫助你解決問題，又或者是很多聊天室都會有聊天機器人這種東西，例如 Line 當中有人製作出了「卡米狗」，透過與使用者聊天當中學習語具，並在對應的場合當中回應相對應的回答。</p><p>而 <a href="https://github.com/gunthercox/ChatterBot">ChatterBot</a> 是一個基於機器學習的聊天機器人引擎，使用 Python 作為主要基底語言，可以基於已知會話的集合生成回應，另外 <a href="https://github.com/gunthercox/ChatterBot">ChatterBot</a> 的語言獨立設計允許它被訓練以說任何語言。</p><p>在官方的 GitHub 當中有一段範例：</p><ul><li>user: Good morning! How are you doing?</li><li>bot: I am doing very well, thank you for asking.</li><li>user: You&#39;re welcome.</li><li>bot: Do you like hats?</li></ul><p>又或者說，曾經我有將 <a href="https://github.com/gunthercox/ChatterBot">ChatterBot</a> 結合到 LineMessageAPI 的範例當中：</p><p><img src="/img/posts/ChatterBotTeaching/1.png" alt="範例"></p><p>如果對於 LineMessageAPI 有興趣的話，可以詳情： <a href="https://blog.init.engineer/posts/LineMessageAPI/">Line Message API 初戰！</a></p><p>接下來我們開始來講解該如何使用這套 <a href="https://github.com/gunthercox/ChatterBot">ChatterBot</a> 吧！首先我們必須要擁有 Python，這邊可能需要小小的注意一下說：</p><p>Python 3.x -&gt; 可以支援中文。<br>Python 2.x -&gt; 可能沒辦法支援中文，會有編碼上的問題。</p><p>再來你需要 <a href="https://pypi.python.org/pypi/ChatterBot">PyPi</a> 這套東西，然後透過它來下載：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install chatterbot</span><br></pre></td></tr></table></figure><p>安裝完成之後，我們就可以開始透過 Python 來使用 <a href="https://github.com/gunthercox/ChatterBot">ChatterBot</a> 了！</p><p>讓我們來看看簡單的使用範例吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入 ChatBot</span></span><br><span class="line"><span class="keyword">from</span> chatterbot <span class="keyword">import</span> ChatBot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立一個 ChatBot 物件</span></span><br><span class="line">chatbot = ChatBot(</span><br><span class="line">    <span class="string">&#x27;Ron Obvious&#x27;</span>,</span><br><span class="line">    trainer = <span class="string">&#x27;chatterbot.trainers.ChatterBotCorpusTrainer&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基於英文的自動學習套件</span></span><br><span class="line">chatbot.train(<span class="string">&quot;chatterbot.corpus.english&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 與 ChatBot 對話，並且取得回應</span></span><br><span class="line">chatbot.get_response(<span class="string">&quot;Hello, how are you today?&quot;</span>)</span><br></pre></td></tr></table></figure><p>當然除了英文語言庫外，還擁有中文語言庫(簡體中文)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chatbot.train(<span class="string">&quot;chatterbot.corpus.chinese&quot;</span>)</span><br></pre></td></tr></table></figure><p>當然也不止這些，我們可以透過載入基本語言庫、問候語言庫、對話語言庫，來讓我們的機器人更加的智慧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 載入(簡體)中文的基本語言庫</span></span><br><span class="line">chatbot.train(<span class="string">&quot;chatterbot.corpus.chinese&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 載入(簡體)中文的問候語言庫</span></span><br><span class="line">chatbot.train(<span class="string">&quot;chatterbot.corpus.chinese.greetings&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 載入(簡體)中文的對話語言庫</span></span><br><span class="line">chatbot.train(<span class="string">&quot;chatterbot.corpus.chinese.conversations&quot;</span>)</span><br></pre></td></tr></table></figure><p>當然我們能夠載入一些庫，是不是代表說，在 <a href="https://github.com/gunthercox/ChatterBot">ChatterBot</a> 當中，有某個地方存放著這些庫呢？我們打開 ChatterBot 專案底下的 Corpus -&gt; data 資料夾，我們會發現有幾些檔案夾很熟悉呢！其中有一個檔案夾叫做 chinese，我們打開他後會發現：</p><ul><li><p>基本對話的庫</p></li><li><p>conversations.corpus.json</p></li><li><p>問候語句的庫</p></li><li><p>greetings.corpus.json</p></li><li><p>詳細問題的庫</p></li><li><p>trivia.corpus.json</p></li></ul><p>這三個檔案表面上不曉得這是什麼意思，我們就來實際打開來看看吧！首先是 <code>conversations.corpus.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;conversations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;早安～&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;午安～&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;晚安～&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;我想睡覺了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;我想去吃飯&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;你好嗎&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;我想去洗澡&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;我媽叫我去吃飯&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;你好&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;尼好&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;你好嗎&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;我還不錯&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;那很好&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;是啊&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;我能幫你甚麼忙嗎&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;我有個問題&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;甚麼問題啊&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;我可以抱抱嗎&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;來ㄛ來抱ㄛ！&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;好啊！&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&lt;3&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span>   <span class="string">&quot;什麼是愛&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;就是你對我的感覺ㄛ &lt;3&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;你愛我嗎？&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;我知道我的主人很愛我喔！&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>看起來就像是普通的對話語句，不過設計經驗上，會建議如果要自己建立語言庫的話，conversations 的語句當中，最好是連續的對話。</p><p>接下來我們看看 <code>greetings.corpus.json</code> 檔案的內容吧：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;greetings&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;安安&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;尼好呀！&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;最近如何&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;還好ㄅ&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;最近如何&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;很棒&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;最近如何&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;ＯＫㄅ&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;最近如何&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;不好！&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;你還好嗎&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;超級不好！&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;你還好嗎&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;超級好！&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>看起來就是簡單的一問一答，不過這種狀況只在聊天剛開始的時候才會發生，就是簡單的問候句。</p><p>最後我們看看 trivia.corpus.json 檔案的內容吧！</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;trivia&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;誰是作者？&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;乾太大神！&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>很典型的問答，所以如果你想設計的是一個客服機器人的話，那你 trivia 當中的內容就會比較多哦！</p><p>如果你已經設計好你的 Corpus(庫) 的話，我們就來實機測試看看吧！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> chatterbot <span class="keyword">import</span> ChatBot</span><br><span class="line"><span class="keyword">from</span> chatterbot.trainers <span class="keyword">import</span> ChatterBotCorpusTrainer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KantaiBOT</span>:</span><br><span class="line">    <span class="comment"># 建立一個 ChatBot</span></span><br><span class="line">    chatbot = ChatBot(</span><br><span class="line">        <span class="comment"># 這個 ChatBot 的名字叫做 KantaiBOT</span></span><br><span class="line">        <span class="string">&quot;KantaiBOT&quot;</span>,</span><br><span class="line">        storage_adapter = <span class="string">&quot;chatterbot.storage.JsonFileStorageAdapter&quot;</span>,</span><br><span class="line">        <span class="comment"># 設定訓練的資料庫輸出於根目錄，並命名為 KantaiBOT_DB.json</span></span><br><span class="line">        database = <span class="string">&quot;./KantaiBOT_DB.json&quot;</span>    </span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.chatbot.set_trainer(ChatterBotCorpusTrainer)</span><br><span class="line">        self.chatbot.train(<span class="string">&quot;chatterbot.corpus.chinese&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getResponse</span>(<span class="params">self, message=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">        <span class="keyword">return</span> self.chatbot.get_response(message)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    bot = KantaiBOT()</span><br><span class="line">    <span class="built_in">print</span>(bot.getResponse(sys.argv[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><p>使用時只要在終端機中下指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python KantaiBOT <span class="string">&#x27;你想說的內容&#x27;</span></span><br></pre></td></tr></table></figure><p>機器人就會立即回應你了，這方法是為了銜接之前的 LineBOT 來實作，你可以使用 PHP、JSP、ASP.NET 或 Node.js 都可以，去呼叫這支 Python 程式碼，去啟動這個機器人，並且獲取回應回傳到 Line Server 當中，就完成簡易又能自動學習對話的機器人了！</p>]]></content>
    
    
    <summary type="html">「聊天機器人」一直是許多企業、學界在專研的東西，它可以用於許多用途上，例如淘寶會有機器人客服人員，會透過機器人來幫助你解決問題，又或者是很多聊天室都會有聊天機器人這種東西 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="Python" scheme="https://blog.init.engineer/tags/Python/"/>
    
    <category term="ChatterBot" scheme="https://blog.init.engineer/tags/ChatterBot/"/>
    
  </entry>
  
  <entry>
    <title>Line Message API 初戰！</title>
    <link href="https://blog.init.engineer/posts/LineMessageAPI/"/>
    <id>https://blog.init.engineer/posts/LineMessageAPI/</id>
    <published>2017-03-05T16:00:00.000Z</published>
    <updated>2017-03-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在台灣或日本當中，Line 一直是這些國家民眾愛用的通訊軟體之一，隨著資訊的發展，越來越多開發者重視各種機器人的開發，從上次的 <a href="https://blog.init.engineer/posts/FacebookChatBot/">Facebook Chat Bot 教學</a>，我們教大家使用 <a href="https://chatfuel.com/">Chatfuel</a> 來開發 Facebook 的聊天機器人，而這次乾太將要帶給大家 Line 的聊天機器人。</p><blockquote><p>LINE 官方：Messaging API 將透過 LINE 伺服器，在您的伺服器與 LINE 應用程式間互相收發資訊。並且將活用 JSON 形式的 API 進行通訊請求。</p></blockquote><p><img src="/img/posts/LineMessageAPI/1.png" alt="官方 API 架構"></p><p>如果對於 JSON 形式不了解的，那我們就來回顧回顧以往的 <a href="https://blog.init.engineer/posts/BasicUsingJsonOnJavaOrAndroid/">Java 或 Android 上的 Json 基本教學</a> 吧！</p><p>我們先進入 <a href="https://business.line.me/zh-hant/services/bot">Line Message API</a> 的官方看看吧！沒錯，就是<a href="https://business.line.me/zh-hant/services/bot">點我</a>。</p><p>在官方當中已經有基本的介紹了，有興趣的可以看看，首先我們要先申請一個 Line Business 帳號，這跟我們一般使用的 Line 帳號不太一樣，大家到這邊可能有點模糊，所以這邊我們要來小小的說明一下流程：</p><ol><li>你有個 Line 帳號</li><li>你透過這個 Line 帳號，去註冊一個或多個 Line BOT 帳號。</li><li>開始使用。</li></ol><p>嗯，看得好像有點懂，但事實上卻霧煞煞，沒關係，我們直接實際操作吧！我們先假設大家已經有 Line 帳號了，接下來我們要來申請 Line Business 帳號，流程非常簡單，<a href="https://business.line.me/zh-hant/companies/1345353/services/bot">點我</a>，然後選擇「<code>開始使用 Messaging API</code>」。</p><p><img src="/img/posts/LineMessageAPI/2.png" alt="圖"></p><p>然後填完一些機器人的基本資料，你可以給他黑人滿臉問號的大頭貼，或者把他名字取名為黑人滿臉問號，都可以。</p><p><img src="/img/posts/LineMessageAPI/3.png" alt="圖"></p><p>老樣子，我一樣會把我的 BOT 叫做「<code>加摩爾</code>」，確認完資料後就按申請吧。</p><p><img src="/img/posts/LineMessageAPI/4.png" alt="圖"></p><p>完成後，如果我們接下來要進入「<code>前往 LINE@MANAGER</code>」。</p><p><img src="/img/posts/LineMessageAPI/5.png" alt="圖"></p><p>接下來我們要啟用 BOT API。</p><p><img src="/img/posts/LineMessageAPI/6.png" alt="圖"></p><p>我們接下來就啟用你的 BOT 吧！我們必須啟用「<code>Webhook 傳訊</code>」這項功能，這樣才能透過伺服器來傳遞訊息。</p><p>啟用完之後，在「<code>Bot設定 -&gt; 狀態</code>」有個「<code>LINE Developers</code>」，點進去，我們要設定我們的伺服器。</p><p><img src="/img/posts/LineMessageAPI/7.png" alt="圖"></p><p>有個「Webhook URL」，我們必須設定我們伺服器 Response 的網址，嗯？你說你沒有伺服器？沒關係，我們就順便教教如何使用「<a href="https://cloud.google.com/appengine/">Google App Engine</a>」架設一個簡單的伺服器吧！</p><p>不過這邊我們要來小小的澄清一下 ... 話說為什麼我們要選擇使用 <a href="https://cloud.google.com/appengine/">Google App Engine</a> 呢？</p><p>首先 LINE 官方要求 Webhook URL 的來源必須是 <a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE">HTTPS</a>，如果只是用 <a href="https://www.apachefriends.org/zh_tw/index.html">XAMPP</a> 架設一個 Apache 的話，LINE 官方是不～吃～你～這～套的！二來又有固定IP、動態IP的問題點存在，而且電腦關機就等於機器人死翹翹了！所以選擇使用 <a href="https://cloud.google.com/appengine/">Google App Engine</a> 來&quot;充當&quot;一個基本的伺服器，當然後續還會講到其他原因就是了。</p><p>首先，「<a href="https://cloud.google.com/appengine/">Google App Engine</a>」&lt;- 開啟它吧！</p><p><img src="/img/posts/LineMessageAPI/8.png" alt="圖"></p><blockquote><p>點選「查看我的主控台」，並「建立專案」。</p></blockquote><blockquote><p>PS: 不過 Google 本身就提供教學服務了 ... 所以 ... 這邊就直接跳到寫程式的地方吧͏ (・∀・)</p></blockquote><p>這邊官方已經寫好一支程式了，如果大家照著「<code>Google 提供的 Google App Engine for PHP</code>」的教學，那請參考：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;LINEBotTiny.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$channelAccessToken</span> = <span class="string">&#x27;Your Channel Access Token&#x27;</span>;</span><br><span class="line"><span class="variable">$channelSecret</span> = <span class="string">&#x27;Your Channel Secret&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$client</span> = <span class="keyword">new</span> <span class="title class_">LINEBotTiny</span>(<span class="variable">$channelAccessToken</span>, <span class="variable">$channelSecret</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$client</span>-&gt;<span class="title function_ invoke__">parseEvents</span>() <span class="keyword">as</span> <span class="variable">$event</span>) &#123;</span><br><span class="line">    <span class="variable">$client</span>-&gt;<span class="title function_ invoke__">replyMessage</span>(<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;replyToken&#x27;</span> =&gt; <span class="variable">$event</span>[<span class="string">&#x27;replyToken&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;messages&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">            <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&#x27;type&#x27;</span> =&gt; <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;text&#x27;</span> =&gt; <span class="variable">$message</span>[<span class="string">&#x27;text&#x27;</span>]</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    ));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>另外請記得在目錄下新增一個「<code>LINEBotTiny.php</code>」的檔案，程式碼：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;hash_equals&#x27;</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">defined</span>(<span class="string">&#x27;USE_MB_STRING&#x27;</span>) <span class="keyword">or</span> <span class="title function_ invoke__">define</span>(<span class="string">&#x27;USE_MB_STRING&#x27;</span>, <span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;mb_strlen&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hash_equals</span>(<span class="params"><span class="variable">$knownString</span>, <span class="variable">$userString</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$strlen</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (USE_MB_STRING) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">mb_strlen</span>(<span class="variable">$string</span>, <span class="string">&#x27;8bit&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Compare string lengths</span></span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$length</span> = <span class="variable">$strlen</span>(<span class="variable">$knownString</span>)) !== <span class="variable">$strlen</span>(<span class="variable">$userString</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$diff</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Calculate differences</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$diff</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$knownString</span>[<span class="variable">$i</span>]) ^ <span class="title function_ invoke__">ord</span>(<span class="variable">$userString</span>[<span class="variable">$i</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$diff</span> === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LINEBotTiny</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$channelAccessToken</span>, <span class="variable">$channelSecret</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;channelAccessToken = <span class="variable">$channelAccessToken</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;channelSecret = <span class="variable">$channelSecret</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parseEvents</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] !== <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">http_response_code</span>(<span class="number">405</span>);</span><br><span class="line">            <span class="title function_ invoke__">error_log</span>(<span class="string">&quot;Method not allowed&quot;</span>);</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$entityBody</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$entityBody</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">http_response_code</span>(<span class="number">400</span>);</span><br><span class="line">            <span class="title function_ invoke__">error_log</span>(<span class="string">&quot;Missing request body&quot;</span>);</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">hash_equals</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">sign</span>(<span class="variable">$entityBody</span>), <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_LINE_SIGNATURE&#x27;</span>])) &#123;</span><br><span class="line">            <span class="title function_ invoke__">http_response_code</span>(<span class="number">400</span>);</span><br><span class="line">            <span class="title function_ invoke__">error_log</span>(<span class="string">&quot;Invalid signature value&quot;</span>);</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$data</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$entityBody</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$data</span>[<span class="string">&#x27;events&#x27;</span>])) &#123;</span><br><span class="line">            <span class="title function_ invoke__">http_response_code</span>(<span class="number">400</span>);</span><br><span class="line">            <span class="title function_ invoke__">error_log</span>(<span class="string">&quot;Invalid request body: missing events property&quot;</span>);</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>[<span class="string">&#x27;events&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">replyMessage</span>(<span class="params"><span class="variable">$message</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$header</span> = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&quot;Content-Type: application/json&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;Authorization: Bearer &#x27;</span> . <span class="variable language_">$this</span>-&gt;channelAccessToken,</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="variable">$context</span> = <span class="title function_ invoke__">stream_context_create</span>(<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&quot;http&quot;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&quot;method&quot;</span> =&gt; <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">                <span class="string">&quot;header&quot;</span> =&gt; <span class="title function_ invoke__">implode</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="variable">$header</span>),</span><br><span class="line">                <span class="string">&quot;content&quot;</span> =&gt; <span class="title function_ invoke__">json_encode</span>(<span class="variable">$message</span>),</span><br><span class="line">            ),</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        <span class="variable">$response</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;https://api.line.me/v2/bot/message/reply&#x27;</span>, <span class="literal">false</span>, <span class="variable">$context</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$http_response_header</span>[<span class="number">0</span>], <span class="string">&#x27;200&#x27;</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">http_response_code</span>(<span class="number">500</span>);</span><br><span class="line">            <span class="title function_ invoke__">error_log</span>(<span class="string">&quot;Request failed: &quot;</span> . <span class="variable">$response</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">sign</span>(<span class="params"><span class="variable">$body</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$hash</span> = <span class="title function_ invoke__">hash_hmac</span>(<span class="string">&#x27;sha256&#x27;</span>, <span class="variable">$body</span>, <span class="variable">$this</span>-&gt;channelSecret, <span class="literal">true</span>);</span><br><span class="line">        <span class="variable">$signature</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$hash</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$signature</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後記得回去 <code>Google App Engine</code> 裡頭，開啟 <code>Google Cloud Shell</code>，將你的程式碼 Compile 上去：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud app deploy app.yaml --project <span class="string">&#x27;你的專案名稱&#x27;</span></span><br></pre></td></tr></table></figure><p>完成之後，記得把網址回填之前 <code>LINE Developers</code> 裡頭的 <code>Webhood URL</code>。</p><p>成果：</p><p><img src="/img/posts/LineMessageAPI/9.png" alt="圖"></p><p><img src="/img/posts/LineMessageAPI/10.png" alt="圖"></p><p>下次大概會教如何使用 Python 撰寫會自動學習的聊天機器人吧。</p>]]></content>
    
    
    <summary type="html">本篇教學教你如何基本使用 Line Message API，在台灣或日本當中，Line 一直是這些國家民眾愛用的通訊軟體之一，隨著資訊的發展，越來越多開發者重視各種機器人的開發 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="Line Message API" scheme="https://blog.init.engineer/tags/Line-Message-API/"/>
    
  </entry>
  
  <entry>
    <title>Facebook Messenger 第三方聊天機器人 - Chatfuel</title>
    <link href="https://blog.init.engineer/posts/FacebookChatBot/"/>
    <id>https://blog.init.engineer/posts/FacebookChatBot/</id>
    <published>2017-02-24T16:00:00.000Z</published>
    <updated>2017-02-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在很久以前，因為自己很邊緣人，生活寂寞又孤單，所以乾太有一個夢想，就是自己打造一個機器人老婆，每天陪自己聊天，來緩解自己空虛寂寞覺得冷的窘境，大概頂多參考了這篇 <a href="http://ccckmit.wikidot.com/code:eliza">自己動手設計交談機器人 (Eliza 中文版) - 使用 Java</a> 做個小小的機器人，但如果要設計一套屬於自己的機器人，或者有點智慧的機器人，那會需要很多技術，像是機器學習或自然語言分析之類的，對於沒有程式基礎的人來說，需要投入相當多的時間去研究。</p><p>不過今天在大學的生活當中，意外學到了一個很有趣的東西，它叫做「<a href="https://chatfuel.com/">Chatfuel</a>」，它是一款架於 Facebook 的第三方服務，你可以這樣來理解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(1.) Facebook 提供各種 API 服務</span><br><span class="line">    ↓ ↑</span><br><span class="line">(2.) Chatfuel 平台將 API 服務做出人性化介面</span><br><span class="line">    ↓ ↑</span><br><span class="line">(3.) 使用者(You)</span><br></pre></td></tr></table></figure><p>我們今天以 Facebook 粉絲團作為範例，目標是建立出一個自動回覆的機器人，所以首先我們必須先建立一個粉絲團(或者你已經有了)：</p><p>步驟一、請先到 <a href="https://www.facebook.com/pages/create/">建立粉絲專頁</a> 當中去建立一個粉絲專頁。(如果已經有了，那你可以略過這步驟。)</p><p><img src="/img/posts/FacebookChatBot/1.png" alt="步驟一"></p><p>步驟二、接下來我們要把這個粉絲專頁綁訂到 <a href="https://chatfuel.com/">Chatfuel</a> 這平台當中，沒錯，請打開它。</p><p><img src="/img/posts/FacebookChatBot/2.png" alt="步驟二"></p><p>步驟三、不管你要點「LOG IN」還是「GET STARTED FOR FREE」都可以，你都必須將你 Faecbook 帳號的權限授權給 Chatfuel，因為這樣平台才能透過你的帳號，來建立自動回覆機器人，完成之後會進入主控台。</p><p><img src="/img/posts/FacebookChatBot/3.png" alt="步驟三"></p><p>步驟四、接下來我們選擇你要建立機器人的粉絲團，這邊當然我們就選擇我剛剛所建立的「<a href="https://www.facebook.com/%E5%8A%A0%E6%91%A9%E7%88%BE%E6%9C%83%E4%BF%9D%E8%AD%B7%E5%A4%A7%E5%AE%B6%E7%9A%84-407616019582120/">加摩爾會保護大家的！</a>」囉～完成之後，會進入該粉絲團機器人的控制台。</p><p><img src="/img/posts/FacebookChatBot/4.png" alt="步驟四"></p><p>步驟五、到這邊為止，我們甚麼都不做，就對這個粉絲團發 Messenger 訊息看看，看起來非常成功。</p><p><img src="/img/posts/FacebookChatBot/5.png" alt="步驟五"></p><p>這樣簡單的機器人就完成囉！接下來開始解說 Chatfuel 機器人控制台的簡介，他總共有分幾項大功能，我們就拿兩個常用來稍作解釋：</p><ol><li>Build &#x3D;&gt; 事件方塊，你可以想像成模組，你可以設定很多種模組，例如歡迎光臨模組、預設回覆模組之類的，而這些模組是讓機器人回話用的。</li><li>Set up AI &#x3D;&gt; 設定AI，如果有人對粉絲團留言，Chatfuel 會對留言做比對，例如比對到「加摩爾」這個字樣，就回覆某事件方塊(Build)。</li></ol><p>光這樣看可能不了解在做甚麼，那我們就來個實際案例吧！我們希望做出「如果有人留言提到&quot;一日千死&quot;的字樣，那機器人就回覆對應的圖片，並且留言」的功能。</p><p>步驟一、我們到 Chatfuel 機器人的控制台 &#x3D;&gt; Build 的功能選項裡頭，新建一個事件方塊：</p><p><img src="/img/posts/FacebookChatBot/6.png" alt="步驟一"></p><p>步驟二、再來我們到 Set up AI 的功能選項，去新增一個判斷，如果留言內容有「一日千死」，或者可能留言有錯字，打成了「一日千屎」，那機器人要回應一日千死的這個事件方塊：</p><p><img src="/img/posts/FacebookChatBot/7.png" alt="步驟二"></p><p>好的！接下來我們來看看機器人的成果：</p><p><img src="/img/posts/FacebookChatBot/8.png" alt="成果"></p><p>基本教學到這邊，下一次來談談如何讓 Chatfuel 界街第三方 API，或者連接自己的伺服器，使用 JSON API 來控制機器人。</p>]]></content>
    
    
    <summary type="html">在粉絲團或個人 Facebook 當中，如何建立一個自動聊天的機器人 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="Chatfuel" scheme="https://blog.init.engineer/tags/Chatfuel/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Web API 2 基本建置與教學</title>
    <link href="https://blog.init.engineer/posts/HowToPlayYourASP.NETWebAPI/"/>
    <id>https://blog.init.engineer/posts/HowToPlayYourASP.NETWebAPI/</id>
    <published>2017-01-09T16:00:00.000Z</published>
    <updated>2017-01-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在開發網頁應用程式，有時候會遇到一種情境，我們為了這個網頁做了很大量的開發，累積了很多使用者，但當我們想開發一些 API 應用給第三方開發者使用時，我們該怎麼辦呢？</p><p><a href="https://www.asp.net/">ASP.NET</a> 提供了一個很好的架構，就是 <a href="https://msdn.microsoft.com/zh-tw/library/dn448365(v=vs.118).aspx">ASP.NET Web API 2</a>，他可以輕鬆地幫你建置出 HTTP 服務下 API 應用，而本教學文章將帶大家了解這東西的基礎教學！</p><p>(1.) 首先我們要先在 <a href="https://www.visualstudio.com/zh-hant/">Visual Studio</a> 當中建立一個 Web Application 專案：</p><p><img src="/img/posts/HowToPlayYourASP.NETWebAPI/1.png" alt="建立 Web Application 專案"></p><p>(2.) 為了方便介紹，我們用空白專案(Empty)即可，不過這個地方需要注意一下！你必須勾選 <code>Web API</code> 這項核心參考：</p><p><img src="/img/posts/HowToPlayYourASP.NETWebAPI/2.png" alt="參考 Web API 核心"></p><p>(3.) 創建完專案後，Run 一下會發現整個網站空空如也，給你各種 404 找不到網頁，所以我們必須先來建立一個 <code>index.html</code> 的入口網頁：</p><p><img src="/img/posts/HowToPlayYourASP.NETWebAPI/3.png" alt="創建一個空網頁"></p><p>(4.) 再來我們希望 Web API 回傳的資料直接 show 在網頁上，所以我們要先定義一個地方，準備用來 show 資料：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>資料擺放區<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;showData&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(5.) 定義完之後，我們要開始思考，我們想拿到甚麼資料？資料的格式長甚麼樣子？我們就用之前寫過的 <a href="https://blog.init.engineer/posts/BasicUsingJsonOnJavaOrAndroid/">Java 或 Android 上的 Json 基本教學</a> 當中的格式作為範例，我們必須先在 Models 新增我們的 Model：</p><p><img src="/img/posts/HowToPlayYourASP.NETWebAPI/4.png" alt="新增 Model 用來定義資料格式"></p><p>(6.) 接下來我們要定義 model 的格式：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ASP.NET_Web_API_v2_Demo.Models</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ClassModel</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ClassDetail Class &#123; <span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ClassDetail</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">ClassDetail</span>(<span class="params">String number, String name</span>)</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.ClassNumber = number;</span><br><span class="line">                <span class="keyword">this</span>.ClassName = name;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> String ClassNumber &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> String ClassName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> StudentDetail[] Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentDetail</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">StudentDetail</span>(<span class="params">String number, String name</span>)</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.StudentNumber = number;</span><br><span class="line">                <span class="keyword">this</span>.StudentName = name;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> String StudentNumber &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> String StudentName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(7.) 資料的格式定義完之後，我們接下來要再建立一個控制器(Controller)做來建立資料、拋出資料的動作，這一切都是遵循 <a href="https://zh.wikipedia.org/wiki/MVC">MVC模式(Model–View–Controller)</a> 的開發模式：</p><p><img src="/img/posts/HowToPlayYourASP.NETWebAPI/5.png" alt="新增 Controller 用來建立資料、拋出資料"></p><p>(8.) 接下來撰寫控制器，去定義資料、拋出資料的方式、找尋資料的方式，不過我們這邊先把資料寫死 <a href="https://zh.wikipedia.org/zh-tw/%E5%AF%AB%E6%AD%BB">Hard Code</a>：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ASP.NET_Web_API_v2_Demo.Models;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Http;</span><br><span class="line"><span class="keyword">using</span> System.Web.Http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ASP.NET_Web_API_v2_Demo.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ClassController</span> : <span class="title">ApiController</span></span><br><span class="line">    &#123;</span><br><span class="line">        ClassModel[] classModel = <span class="keyword">new</span> ClassModel[] &#123;</span><br><span class="line">            <span class="keyword">new</span> ClassModel &#123;</span><br><span class="line">                Class = <span class="keyword">new</span> ClassModel.ClassDetail(<span class="string">&quot;Class01&quot;</span>, <span class="string">&quot;電腦教室&quot;</span>),</span><br><span class="line">                Students = <span class="keyword">new</span> ClassModel.StudentDetail[] &#123;</span><br><span class="line">                    <span class="keyword">new</span> ClassModel.StudentDetail(<span class="string">&quot;Student0101&quot;</span>, <span class="string">&quot;小明1號&quot;</span>),</span><br><span class="line">                    <span class="keyword">new</span> ClassModel.StudentDetail(<span class="string">&quot;Student0102&quot;</span>, <span class="string">&quot;小明2號&quot;</span>),</span><br><span class="line">                    <span class="keyword">new</span> ClassModel.StudentDetail(<span class="string">&quot;Student0103&quot;</span>, <span class="string">&quot;小明3號&quot;</span>),</span><br><span class="line">                    <span class="keyword">new</span> ClassModel.StudentDetail(<span class="string">&quot;Student0104&quot;</span>, <span class="string">&quot;小明4號&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">new</span> ClassModel &#123;</span><br><span class="line">                Class = <span class="keyword">new</span> ClassModel.ClassDetail(<span class="string">&quot;Class02&quot;</span>, <span class="string">&quot;音樂教室&quot;</span>),</span><br><span class="line">                Students = <span class="keyword">new</span> ClassModel.StudentDetail[] &#123;</span><br><span class="line">                    <span class="keyword">new</span> ClassModel.StudentDetail(<span class="string">&quot;Student0201&quot;</span>, <span class="string">&quot;小智1號&quot;</span>),</span><br><span class="line">                    <span class="keyword">new</span> ClassModel.StudentDetail(<span class="string">&quot;Student0201&quot;</span>, <span class="string">&quot;小智2號&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">new</span> ClassModel &#123;</span><br><span class="line">                Class = <span class="keyword">new</span> ClassModel.ClassDetail(<span class="string">&quot;Class03&quot;</span>, <span class="string">&quot;童軍教室&quot;</span>),</span><br><span class="line">                Students = <span class="keyword">new</span> ClassModel.StudentDetail[] &#123;</span><br><span class="line">                    <span class="keyword">new</span> ClassModel.StudentDetail(<span class="string">&quot;Student0301&quot;</span>, <span class="string">&quot;小春1號&quot;</span>),</span><br><span class="line">                    <span class="keyword">new</span> ClassModel.StudentDetail(<span class="string">&quot;Student0302&quot;</span>, <span class="string">&quot;小春2號&quot;</span>),</span><br><span class="line">                    <span class="keyword">new</span> ClassModel.StudentDetail(<span class="string">&quot;Student0303&quot;</span>, <span class="string">&quot;小春3號&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IEnumerable&lt;ClassModel&gt; <span class="title">GetAllClass</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> classModel;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IHttpActionResult <span class="title">GetClass</span>(<span class="params">String __classNumber</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> detail = classModel.FirstOrDefault((c) =&gt; c.Class.ClassNumber == __classNumber);</span><br><span class="line">            <span class="keyword">if</span> (detail == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> NotFound();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> Ok(detail);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(9.) 資料格式的模型(Model)寫完了，控制器(Controller)也寫完了，接下來我們回到 <code>index.html</code> 去撰寫網頁端的程式吧！我們透過 ajax 來抓資料：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>資料擺放區<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">&quot;data&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.0.3.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> uri = <span class="string">&#x27;api/class&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">getJSON</span>(uri).<span class="title function_">done</span>(</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    $.<span class="title function_">each</span>(data, <span class="keyword">function</span> (<span class="params">key, item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&#x27;&lt;li&gt;&#x27;</span>, &#123; html : <span class="title function_">formatItem</span>(item) &#125;).<span class="title function_">appendTo</span>($(<span class="string">&#x27;#data&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            );</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">formatItem</span>(<span class="params">item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> __response = <span class="string">&#x27;所屬 JSON 資料：&#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(item) + <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            __response += <span class="string">&#x27;教室名稱 =&gt; &#x27;</span> + item.<span class="property">Class</span>.<span class="property">ClassName</span> + <span class="string">&#x27;(&#x27;</span> + item.<span class="property">Class</span>.<span class="property">ClassNumber</span> + <span class="string">&#x27;)&lt;br /&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">each</span>(item.<span class="property">Students</span>, <span class="keyword">function</span> (<span class="params">key, item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                __response += <span class="string">&#x27;歸屬學生 = &#x27;</span> + item.<span class="property">StudentName</span> + <span class="string">&#x27;(&#x27;</span> + item.<span class="property">StudentNumber</span> + <span class="string">&#x27;)&lt;br /&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> __response;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(10.) 完成後，我們來看看成果吧！</p><p><img src="/img/posts/HowToPlayYourASP.NETWebAPI/6.png" alt="Web API v2 成果"></p><p>(11.) 不過目前只是抓出所有資料，對應的是在控制器當中的 GetAllClass 這個方法，我們希望善用到 GetProduct 這方法，去搜尋個別的教室，所以我們要在 <code>index.html</code> 當中多添加個輸入框及按鈕，並且透過 GetProduct 去撈取相對應的資料：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>資料擺放區<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">&quot;data&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Search by ID<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;class&quot;</span> <span class="attr">size</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Search&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;find();&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;detail&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.0.3.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> uri = <span class="string">&#x27;api/class&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">getJSON</span>(uri).<span class="title function_">done</span>(</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    $.<span class="title function_">each</span>(data, <span class="keyword">function</span> (<span class="params">key, item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&#x27;&lt;li&gt;&#x27;</span>, &#123; html : <span class="title function_">formatItem</span>(item) &#125;).<span class="title function_">appendTo</span>($(<span class="string">&#x27;#data&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            );</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">formatItem</span>(<span class="params">item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> __response = <span class="string">&#x27;所屬 JSON 資料：&#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(item) + <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            __response += <span class="string">&#x27;教室名稱 =&gt; &#x27;</span> + item.<span class="property">Class</span>.<span class="property">ClassName</span> + <span class="string">&#x27;(&#x27;</span> + item.<span class="property">Class</span>.<span class="property">ClassNumber</span> + <span class="string">&#x27;)&lt;br /&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">each</span>(item.<span class="property">Students</span>, <span class="keyword">function</span> (<span class="params">key, item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                __response += <span class="string">&#x27;歸屬學生 = &#x27;</span> + item.<span class="property">StudentName</span> + <span class="string">&#x27;(&#x27;</span> + item.<span class="property">StudentNumber</span> + <span class="string">&#x27;)&lt;br /&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> __response;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">find</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> id = $(<span class="string">&#x27;#class&#x27;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">getJSON</span>(uri + <span class="string">&#x27;/&#x27;</span> + id)</span></span><br><span class="line"><span class="language-javascript">                .<span class="title function_">done</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&#x27;#detail&#x27;</span>).<span class="title function_">text</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">                .<span class="title function_">fail</span>(<span class="keyword">function</span> (<span class="params">jqXHR, textStatus, err</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&#x27;#detail&#x27;</span>).<span class="title function_">text</span>(<span class="string">&#x27;Error: &#x27;</span> + err);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(12.) 完成後我們來看看成果吧！</p><p><img src="/img/posts/HowToPlayYourASP.NETWebAPI/7.png" alt="Search 資料"></p><p>整個 ASP.NET Web API v2 的基本教學大致上是這樣 m(_ _)m</p><p>其他官方教學與範例：<a href="https://www.asp.net/web-api">Learn About ASP.NET Web API</a></p>]]></content>
    
    
    <summary type="html">在開發網頁應用程式，有時候會遇到一種情境，我們為了這個網頁做了很大量的開發 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="ASP.NET 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/ASP-NET-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="ASP.NET Web APIv2" scheme="https://blog.init.engineer/tags/ASP-NET-Web-APIv2/"/>
    
  </entry>
  
  <entry>
    <title>Java 或 Android 上的 Json 基本教學</title>
    <link href="https://blog.init.engineer/posts/BasicUsingJsonOnJavaOrAndroid/"/>
    <id>https://blog.init.engineer/posts/BasicUsingJsonOnJavaOrAndroid/</id>
    <published>2017-01-08T16:00:00.000Z</published>
    <updated>2017-01-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多應用程式開發時，傳遞都會使用 Json 作為規範格式，像是 Plurk API、Facebook API ... 等等，都是採用 Json 作為傳遞格式，因為它具備輕量化、易於閱讀的優點，其他詳細內容就不多做介紹了，詳細說明請見 <a href="https://zh.wikipedia.org/wiki/JSON">JSON (JavaScript Object Notation)</a> 維基百科吧！</p><p>Json 格式以 Object、Array 作為兩大形式，用法如下：</p><p>一、物件形式 {}</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Key1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Value1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Key2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Value2&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>二、陣列刑式 []</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;Value1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;Value2&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>再來介紹 Json 支援的型態，總共有 String、Number、Boolean，用法如下：</p><p>一、String 字串 型態</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Value&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>二、Number 整數 型態</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Key&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>三、Boolean 布林 型態</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Key&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>既然基本教學都講完了，那我們來個簡單的隨堂小練習吧！我希望定義一個 Json 格式，這格式會傳遞每間教室的詳細資料(教室編號、教室名稱)，每間教室還會記載歸屬學生的資料(學生編號、學生姓名)，那這樣的 Json 該如何定義呢？</p><p>如果是我的話，我大概會想這樣定義：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;教室資訊 (Class Detail)&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;教室編號 (Class Number)&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;教室名稱 (Class Name)&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;學生資訊 (Student Detail)&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;學生編號 (Student Number)&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;學生名稱 (Student Name)&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>當然方法有很多種！我只是其中一種方法而已，我們接下來看看用那樣的方法會變成什麼樣子吧！</p><p>假設有三間教室，編號分別為 Class01、Class02、Class03</p><blockquote><p>電腦教室 (Class01) 的學生：<br /></p><ul><li>Student0101 小明1號<br /></li><li>Student0102 小明2號<br /></li><li>Student0103 小明3號<br /></li><li>Student0104 小明4號</li></ul></blockquote><blockquote><p>音樂教室 (Class02) 的學生：<br /></p><ul><li>Student0201 小智1號<br /></li><li>Student0202 小智2號</li></ul></blockquote><blockquote><p>童軍教室 (Class03) 的學生：<br /></p><ul><li>Student0301 小春1號<br /></li><li>Student0302 小春2號<br /></li><li>Student0303 小春3號</li></ul></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ClassDetail&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;ClassNumber&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Class01&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ClassName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;電腦教室&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;StudentDetail&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;StudentNumber&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Student0101&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;StudentName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;小明1號&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;StudentNumber&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Student0102&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;StudentName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;小明2號&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;StudentNumber&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Student0103&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;StudentName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;小明3號&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;StudentNumber&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Student0104&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;StudentName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;小明4號&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ClassDetail&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;ClassNumber&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Class02&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ClassName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;音樂教室&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;StudentDetail&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;StudentNumber&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Student0201&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;StudentName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;小智1號&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;StudentNumber&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Student0202&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;StudentName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;小智2號&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ClassDetail&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;ClassNumber&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Class03&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ClassName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;童軍教室&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;StudentDetail&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;StudentNumber&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Student0301&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;StudentName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;小春1號&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;StudentNumber&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Student0302&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;StudentName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;小春2號&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;StudentNumber&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Student0303&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;StudentName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;小春3號&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>接下來就要進入我們的主題囉！該如何在 Java 或 Android 當中，讀取 Json 的資料呢？我們先預想一整條 Json 就是一整串 String 字串吧！從最外層來看，這整個所有資料是包在一個 Json Array 當中，所以我們必須使用 JSONArray 來做初次的處理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (1.) 將 JSON String 解析為 JSONArray</span></span><br><span class="line"><span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>(<span class="string">&quot;Your Json String&quot;</span>);</span><br></pre></td></tr></table></figure><p>解析完 JSONArray 之後，每個教室都是用 JSONObject 給包起來的，再來如果想要批次的把每間教室一條一條讀出來，我們就可以這樣做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (1.) 將 JSON String 解析為 JSONArray</span></span><br><span class="line"><span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>(<span class="string">&quot;Your Json String&quot;</span>);</span><br><span class="line"><span class="comment">// (2.) 利用 for 來將每一筆 JSONObject 給讀出來</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; jsonArray.length(); i++) &#123;</span><br><span class="line">    <span class="comment">// (2.) 取得每一條 教室(JSONObject)</span></span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> jsonArray.getJSONObject(i);</span><br><span class="line">    <span class="comment">// (2.) 取得 教室(JSONObject) 當中 &quot;教室資訊(ClassDetail)&quot; 這項 JSONObject</span></span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">classDetailJson</span> <span class="operator">=</span> jsonObject.getJSONObject(<span class="string">&quot;ClassDetail&quot;</span>); </span><br><span class="line">    <span class="comment">// (2.) 取得 教室資訊(ClassDetail) 當中的 教室編號(ClassNumber)</span></span><br><span class="line">    System.out.println(<span class="string">&quot;ClassNumber =&gt; &quot;</span> + classDetailJson.getString(<span class="string">&quot;ClassNumber&quot;</span>));</span><br><span class="line">    <span class="comment">// (2.) 取得 教室資訊(ClassDetail) 當中的 教室名稱(ClassName)</span></span><br><span class="line">    System.out.println(<span class="string">&quot;ClassNumber =&gt; &quot;</span> + classDetailJson.getString(<span class="string">&quot;ClassName&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當然我們讀完教室後，我們還可以再來讀教室裡面的學生！因為封裝的方法是把 學生(Data) 包成 JSONObject，然後把 學生們(JSONObject) 包成 JSONArray，然後把 學生們(JSONArray) 掛載在所屬的教室當中，所以現在我們要逆著解析回來：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (1.) 將 JSON String 解析為 JSONArray</span></span><br><span class="line"><span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>(<span class="string">&quot;Your Json String&quot;</span>);</span><br><span class="line"><span class="comment">// (2.) 利用 for 來將每一筆 JSONObject 給讀出來</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; jsonArray.length(); i++) &#123;</span><br><span class="line">    <span class="comment">// (2.) 取得每一條 教室(JSONObject)</span></span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> jsonArray.getJSONObject(i);</span><br><span class="line">    <span class="comment">// (2.) 取得 教室(JSONObject) 當中 &quot;教室資訊(ClassDetail)&quot; 這項 JSONObject</span></span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">classDetailJson</span> <span class="operator">=</span> jsonObject.getJSONObject(<span class="string">&quot;ClassDetail&quot;</span>); </span><br><span class="line">    <span class="comment">// (2.) 取得 教室資訊(ClassDetail) 當中的 教室編號(ClassNumber)</span></span><br><span class="line">    System.out.println(<span class="string">&quot;ClassNumber =&gt; &quot;</span> + classDetailJson.getString(<span class="string">&quot;ClassNumber&quot;</span>));</span><br><span class="line">    <span class="comment">// (2.) 取得 教室資訊(ClassDetail) 當中的 教室名稱(ClassName)</span></span><br><span class="line">    System.out.println(<span class="string">&quot;ClassNumber =&gt; &quot;</span> + classDetailJson.getString(<span class="string">&quot;ClassName&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (3.) 取得 學生們(JSONArray) 的資料</span></span><br><span class="line">    <span class="type">JSONArray</span> <span class="variable">students</span> <span class="operator">=</span> jsonObject.getJSONArray(<span class="string">&quot;StudentDetail&quot;</span>);</span><br><span class="line">    <span class="comment">// (3.) 利用 for 來將每一筆 學生(JSONObject) 給讀出來</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; jsonArray.length(); i++) &#123;</span><br><span class="line">        <span class="comment">// (3.) 取得每一位 學生(Student)</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">student</span> <span class="operator">=</span> students.getJSONObject(i);</span><br><span class="line">        <span class="comment">// (3.) 取得 學生(Student) 當中的 學生編號(StudentNumber)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;StudentNumber =&gt; &quot;</span> + student.getString(<span class="string">&quot;StudentNumber&quot;</span>));</span><br><span class="line">        <span class="comment">// (3.) 取得 學生(Student) 當中的 學生名稱(StudentName)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;StudentName =&gt; &quot;</span> + student.getString(<span class="string">&quot;StudentName&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上大約為在 Java 或 Android 當中，該如何讀取、解析 Json 的教學，至於還有沒有進階用法嘛 ... 大概就 ...</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判斷是否為 Null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JSONObject.isNull(<span class="string">&quot;Key&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取得所有的 Key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;String&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JSONObject.keys();</span><br></pre></td></tr></table></figure><p>如果你真的對 org.json 很有興趣，那也當然歡迎多看看 <a href="https://developer.android.com/reference/org/json/package-summary.html">org.json</a> 的相關資料 ...</p><p>另外我很喜歡用一套線上 JSON 編輯器，也一起分享給大家：<a href="http://www.jsoneditoronline.org/">JSON Editor Online</a></p>]]></content>
    
    
    <summary type="html">很多應用程式開發時，傳遞都會使用 Json 作為規範格式，像是 Plurk API、Facebook API ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    <category term="Android 實務" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/Android-%E5%AF%A6%E5%8B%99/"/>
    
    
    <category term="Android" scheme="https://blog.init.engineer/tags/Android/"/>
    
    <category term="JSON" scheme="https://blog.init.engineer/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>如何在 GitHub 中建造一個屬於自己的部落格。</title>
    <link href="https://blog.init.engineer/posts/HowToCreateBlogOnGithub/"/>
    <id>https://blog.init.engineer/posts/HowToCreateBlogOnGithub/</id>
    <published>2017-01-06T16:00:00.000Z</published>
    <updated>2017-01-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>這是一份採用 <a href="http://jekyllrb.com/">Jekyll</a> 為基底，使用 <a href="https://github.com/poole/hyde">Hyde</a> 作為樣板的部落格，詳細可以去參考來源地，而以下內容是我在維護這份部落格時，所撰寫給自己的常用筆記。</p><p>最近利用 <a href="https://github.com/">GitHub</a> 架設了一個靜態 Blog，感覺還挺酷炫的！你只需要有一個 <a href="https://github.com/">GitHub</a> 的帳號就可以了，其優點是免營運成本、無流量限制、無廣告，而且你可以客製自己的版型及功能，所以就把整個過程給記錄下來，分享給大家。</p><p>不過在這之前，你的電腦必須已經擁有 <a href="https://www.ruby-lang.org/zh_tw/">Ruby</a> 這項軟體，以及 <a href="https://rubygems.org/">RubyGems</a> 這項 <a href="https://www.ruby-lang.org/zh_tw/">Ruby</a> 套件管理的工具，如果沒有的話，就到他們的官方網站安裝一下吧！</p><h1 id="開始"><a href="#開始" class="headerlink" title="開始"></a>開始</h1><p>這是一個利用 <a href="https://jekyllrb.com/">Jekyll</a> 去創建的部落格，所以我們必須先打開終端機，流程大概是：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 安裝 Jekyll</span></span><br><span class="line">~ $ gem install jekyll bundler</span><br><span class="line"><span class="comment"># 2. 創造一個 Jekyll 專案</span></span><br><span class="line">~ $ jekyll new <span class="string">&#x27;你的專案名稱&#x27;</span></span><br></pre></td></tr></table></figure><p>到這邊為止，我們只是創造了一個空的部落格專案，接下來讓我們來看看這專案長什麼樣子吧！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. 移動到 Jekyll 專案當中</span></span><br><span class="line">~ $ <span class="built_in">cd</span> <span class="string">&#x27;你的專案名稱&#x27;</span></span><br><span class="line"><span class="comment"># 4. 將專案 Compile 成 Blog 靜態網頁</span></span><br><span class="line">~/你的專案名稱 $ jekyll build</span><br><span class="line"><span class="comment"># 5. 架設 Blog 服務</span></span><br><span class="line">~/你的專案名稱 $ jekyll serve</span><br><span class="line"><span class="comment"># =&gt; Now browse to http://localhost:4000</span></span><br></pre></td></tr></table></figure><p>就如註解所說的般，你現在可以前往 <code>http://localhost:4000</code> 看看，你會發現一個基礎的雛型已經出來了！不過好像還不夠完美，所以在網路上找到 <a href="https://github.com/poole/hyde">Hyde</a> 這好東西，它是一款基於 <a href="https://jekyllrb.com/">Jekyll</a> 的基本板模，所以很多我們想得到的功能，基本上都沒有，所以我又參考到了兩篇很棒的文章：</p><p><a href="https://rhadow.github.io/2015/02/18/Jekyll-x-Github-x-Blog-Part1/">Jekyll x Github x Blog (Part 1)</a><br><a href="https://rhadow.github.io/2015/02/20/Jekyll-x-Github-x-Blog-Part2/">Jekyll x Github x Blog (Part 2)</a></p><p>當你整個部落格都撰寫完畢後，只需要把你的部落格 Push 到 GitHub 上就可以囉！</p><p>-- 這大概是一個東抄抄西抄抄沒營養的廢文吧 Orz --</p><h1 id="基本語法"><a href="#基本語法" class="headerlink" title="基本語法"></a>基本語法</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 Command Line 透過 Jekyll 建置部落格</span></span><br><span class="line">$ jekyll build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Command Line 透過 Jekyll 來架 Local server</span></span><br><span class="line">$ jekyll serve</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存在 ~/_posts/ 的文章 (*.md) 命名格式</span></span><br><span class="line"><span class="comment"># 年-月-日-文章標題.md</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">這是一份採用 Jekyll 為基底，使用 Hyde 作為樣板的部落格，詳細可以去參考來源地，而以下內容是我在維護這份部落格時，所撰寫給自己的常用筆記 ...</summary>
    
    
    
    <category term="技術文件" scheme="https://blog.init.engineer/categories/%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="Jekyll" scheme="https://blog.init.engineer/tags/Jekyll/"/>
    
    <category term="Hyde" scheme="https://blog.init.engineer/tags/Hyde/"/>
    
  </entry>
  
</feed>
